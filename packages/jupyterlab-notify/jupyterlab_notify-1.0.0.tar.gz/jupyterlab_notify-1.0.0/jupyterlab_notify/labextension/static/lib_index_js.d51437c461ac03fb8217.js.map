{"version":3,"sources":["webpack://jupyterlab-notify/./lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mDAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,IAAI;AACjD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,YAAY;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC","file":"lib_index_js.d51437c461ac03fb8217.js","sourcesContent":["import { Widget } from '@lumino/widgets';\n/**\n * The default mime type for the extension.\n */\nconst MIME_TYPE = 'application/desktop-notify+json';\nconst PROCESSED_KEY = 'isProcessed';\n// The below can be used to customize notifications\nconst NOTIFICATION_OPTIONS = {\n    icon: '/static/favicons/favicon.ico'\n};\n/**\n * A widget for rendering desktop-notify.\n */\nclass OutputWidget extends Widget {\n    constructor(options) {\n        super();\n        this._mimeType = options.mimeType;\n    }\n    renderModel(model) {\n        const mimeData = model.data[this._mimeType];\n        const payload = mimeData.payload;\n        // If the PROCESSED_KEY is available - do not take any action\n        // This is done so that notifications are not repeated on page refresh\n        if (mimeData[PROCESSED_KEY]) {\n            return Promise.resolve();\n        }\n        // For first-time users, check for necessary permissions and prompt if needed\n        if ((mimeData.type === 'INIT' && Notification.permission === 'default') ||\n            Notification.permission !== 'granted') {\n            // We do not have any actions to perform upon acquiring permission and so\n            // handle only the errors (if any)\n            Notification.requestPermission().catch(err => {\n                alert(`Encountered error - ${err} while requesting permissions for notebook notifications`);\n            });\n        }\n        if (mimeData.type === 'NOTIFY') {\n            // Notify only if there's sufficient permissions and this has not been processed previously\n            if (Notification.permission === 'granted' && !mimeData[PROCESSED_KEY]) {\n                new Notification(payload.title, NOTIFICATION_OPTIONS);\n            }\n            else {\n                this.node.innerHTML = `<div id=\"${mimeData.id}\">Missing permissions - update \"Notifications\" preferences under browser settings to receive notifications</div>`;\n            }\n        }\n        if (!mimeData[PROCESSED_KEY]) {\n            // Add isProcessed property to each notification message so that we can avoid repeating notifications on page reloads\n            const updatedModel = JSON.parse(JSON.stringify(model));\n            const updatedMimeData = updatedModel.data[this._mimeType];\n            updatedMimeData[PROCESSED_KEY] = true;\n            // The below model update is done inside a separate function and added to\n            // the event queue - this is done so to avoid re-rendering before the\n            // initial render is complete.\n            //\n            // Without the setTimeout, calling model.setData triggers the callbacks\n            // registered on model-updates that re-renders the widget and it again tries\n            // to update the model which again causes a re-render and so on.\n            setTimeout(() => {\n                model.setData(updatedModel);\n            }, 0);\n        }\n        return Promise.resolve();\n    }\n}\n/**\n * A mime renderer factory for desktop-notify data.\n */\nconst rendererFactory = {\n    safe: true,\n    mimeTypes: [MIME_TYPE],\n    createRenderer: options => new OutputWidget(options)\n};\n/**\n * Extension definition.\n */\nconst extension = {\n    id: 'desktop-notify:plugin',\n    rendererFactory,\n    rank: 0,\n    dataType: 'json'\n};\nexport default extension;\n"],"sourceRoot":""}