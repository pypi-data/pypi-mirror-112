# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from frdgrpc.compiled import faraday_pb2 as frdgrpc_dot_compiled_dot_faraday__pb2


class FaradayServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OutlierRecommendations = channel.unary_unary(
                '/frdrpc.FaradayServer/OutlierRecommendations',
                request_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.OutlierRecommendationsRequest.SerializeToString,
                response_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.CloseRecommendationsResponse.FromString,
                )
        self.ThresholdRecommendations = channel.unary_unary(
                '/frdrpc.FaradayServer/ThresholdRecommendations',
                request_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.ThresholdRecommendationsRequest.SerializeToString,
                response_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.CloseRecommendationsResponse.FromString,
                )
        self.RevenueReport = channel.unary_unary(
                '/frdrpc.FaradayServer/RevenueReport',
                request_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.RevenueReportRequest.SerializeToString,
                response_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.RevenueReportResponse.FromString,
                )
        self.ChannelInsights = channel.unary_unary(
                '/frdrpc.FaradayServer/ChannelInsights',
                request_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.ChannelInsightsRequest.SerializeToString,
                response_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.ChannelInsightsResponse.FromString,
                )
        self.ExchangeRate = channel.unary_unary(
                '/frdrpc.FaradayServer/ExchangeRate',
                request_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.ExchangeRateRequest.SerializeToString,
                response_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.ExchangeRateResponse.FromString,
                )
        self.NodeAudit = channel.unary_unary(
                '/frdrpc.FaradayServer/NodeAudit',
                request_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.NodeAuditRequest.SerializeToString,
                response_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.NodeAuditResponse.FromString,
                )
        self.CloseReport = channel.unary_unary(
                '/frdrpc.FaradayServer/CloseReport',
                request_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.CloseReportRequest.SerializeToString,
                response_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.CloseReportResponse.FromString,
                )


class FaradayServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OutlierRecommendations(self, request, context):
        """* frcli: `outliers`
        Get close recommendations for currently open channels based on whether it is
        an outlier.

        Example request:
        http://localhost:8466/v1/faraday/outliers/REVENUE?rec_request.minimum_monitored=123
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ThresholdRecommendations(self, request, context):
        """* frcli: `threshold`
        Get close recommendations for currently open channels based whether they are
        below a set threshold.

        Example request:
        http://localhost:8466/v1/faraday/threshold/UPTIME?rec_request.minimum_monitored=123
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevenueReport(self, request, context):
        """* frcli: `revenue`
        Get a pairwise revenue report for a channel.

        Example request:
        http://localhost:8466/v1/faraday/revenue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChannelInsights(self, request, context):
        """* frcli: `insights`
        List currently open channel with routing and uptime information.

        Example request:
        http://localhost:8466/v1/faraday/insights
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeRate(self, request, context):
        """* frcli:
        Get fiat prices for btc.

        Example request:
        http://localhost:8466/v1/faraday/exchangerate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeAudit(self, request, context):
        """*
        Get a report of your node's activity over a period.

        Example request:
        http://localhost:8466/v1/faraday/nodeaudit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseReport(self, request, context):
        """*
        Get a channel close report for a specific channel.

        Example request:
        http://localhost:8466/v1/faraday/closereport
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FaradayServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OutlierRecommendations': grpc.unary_unary_rpc_method_handler(
                    servicer.OutlierRecommendations,
                    request_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.OutlierRecommendationsRequest.FromString,
                    response_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.CloseRecommendationsResponse.SerializeToString,
            ),
            'ThresholdRecommendations': grpc.unary_unary_rpc_method_handler(
                    servicer.ThresholdRecommendations,
                    request_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.ThresholdRecommendationsRequest.FromString,
                    response_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.CloseRecommendationsResponse.SerializeToString,
            ),
            'RevenueReport': grpc.unary_unary_rpc_method_handler(
                    servicer.RevenueReport,
                    request_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.RevenueReportRequest.FromString,
                    response_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.RevenueReportResponse.SerializeToString,
            ),
            'ChannelInsights': grpc.unary_unary_rpc_method_handler(
                    servicer.ChannelInsights,
                    request_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.ChannelInsightsRequest.FromString,
                    response_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.ChannelInsightsResponse.SerializeToString,
            ),
            'ExchangeRate': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeRate,
                    request_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.ExchangeRateRequest.FromString,
                    response_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.ExchangeRateResponse.SerializeToString,
            ),
            'NodeAudit': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeAudit,
                    request_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.NodeAuditRequest.FromString,
                    response_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.NodeAuditResponse.SerializeToString,
            ),
            'CloseReport': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseReport,
                    request_deserializer=frdgrpc_dot_compiled_dot_faraday__pb2.CloseReportRequest.FromString,
                    response_serializer=frdgrpc_dot_compiled_dot_faraday__pb2.CloseReportResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'frdrpc.FaradayServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FaradayServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OutlierRecommendations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frdrpc.FaradayServer/OutlierRecommendations',
            frdgrpc_dot_compiled_dot_faraday__pb2.OutlierRecommendationsRequest.SerializeToString,
            frdgrpc_dot_compiled_dot_faraday__pb2.CloseRecommendationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ThresholdRecommendations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frdrpc.FaradayServer/ThresholdRecommendations',
            frdgrpc_dot_compiled_dot_faraday__pb2.ThresholdRecommendationsRequest.SerializeToString,
            frdgrpc_dot_compiled_dot_faraday__pb2.CloseRecommendationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RevenueReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frdrpc.FaradayServer/RevenueReport',
            frdgrpc_dot_compiled_dot_faraday__pb2.RevenueReportRequest.SerializeToString,
            frdgrpc_dot_compiled_dot_faraday__pb2.RevenueReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChannelInsights(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frdrpc.FaradayServer/ChannelInsights',
            frdgrpc_dot_compiled_dot_faraday__pb2.ChannelInsightsRequest.SerializeToString,
            frdgrpc_dot_compiled_dot_faraday__pb2.ChannelInsightsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frdrpc.FaradayServer/ExchangeRate',
            frdgrpc_dot_compiled_dot_faraday__pb2.ExchangeRateRequest.SerializeToString,
            frdgrpc_dot_compiled_dot_faraday__pb2.ExchangeRateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeAudit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frdrpc.FaradayServer/NodeAudit',
            frdgrpc_dot_compiled_dot_faraday__pb2.NodeAuditRequest.SerializeToString,
            frdgrpc_dot_compiled_dot_faraday__pb2.NodeAuditResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frdrpc.FaradayServer/CloseReport',
            frdgrpc_dot_compiled_dot_faraday__pb2.CloseReportRequest.SerializeToString,
            frdgrpc_dot_compiled_dot_faraday__pb2.CloseReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
