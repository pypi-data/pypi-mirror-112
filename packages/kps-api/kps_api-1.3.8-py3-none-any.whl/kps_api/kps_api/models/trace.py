# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.process import Process  # noqa: F401,E501
from kps_api.models.span import Span  # noqa: F401,E501
from kps_api.models.trace_id import TraceID  # noqa: F401,E501


class Trace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'processes': 'dict(str, Process)',
        'spans': 'list[Span]',
        'trace_id': 'TraceID',
        'warnings': 'list[str]'
    }

    attribute_map = {
        'processes': 'processes',
        'spans': 'spans',
        'trace_id': 'traceID',
        'warnings': 'warnings'
    }

    def __init__(self, processes=None, spans=None, trace_id=None, warnings=None):  # noqa: E501
        """Trace - a model defined in Swagger"""  # noqa: E501
        self._processes = None
        self._spans = None
        self._trace_id = None
        self._warnings = None
        self.discriminator = None
        if processes is not None:
            self.processes = processes
        if spans is not None:
            self.spans = spans
        if trace_id is not None:
            self.trace_id = trace_id
        if warnings is not None:
            self.warnings = warnings

    @property
    def processes(self):
        """Gets the processes of this Trace.  # noqa: E501


        :return: The processes of this Trace.  # noqa: E501
        :rtype: dict(str, Process)
        """
        return self._processes

    @processes.setter
    def processes(self, processes):
        """Sets the processes of this Trace.


        :param processes: The processes of this Trace.  # noqa: E501
        :type: dict(str, Process)
        """

        self._processes = processes

    @property
    def spans(self):
        """Gets the spans of this Trace.  # noqa: E501


        :return: The spans of this Trace.  # noqa: E501
        :rtype: list[Span]
        """
        return self._spans

    @spans.setter
    def spans(self, spans):
        """Sets the spans of this Trace.


        :param spans: The spans of this Trace.  # noqa: E501
        :type: list[Span]
        """

        self._spans = spans

    @property
    def trace_id(self):
        """Gets the trace_id of this Trace.  # noqa: E501


        :return: The trace_id of this Trace.  # noqa: E501
        :rtype: TraceID
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this Trace.


        :param trace_id: The trace_id of this Trace.  # noqa: E501
        :type: TraceID
        """

        self._trace_id = trace_id

    @property
    def warnings(self):
        """Gets the warnings of this Trace.  # noqa: E501


        :return: The warnings of this Trace.  # noqa: E501
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Trace.


        :param warnings: The warnings of this Trace.  # noqa: E501
        :type: list[str]
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Trace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
