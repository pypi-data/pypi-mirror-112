# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.node_health_status import NodeHealthStatus  # noqa: F401,E501


class NodeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifacts': 'dict(str, object)',
        'connected': 'bool',
        'cpu_usage': 'str',
        'gpu_info': 'str',
        'gpu_usage': 'str',
        'health_bits': 'dict(str, bool)',
        'health_status': 'NodeHealthStatus',
        'healthy': 'bool',
        'id': 'str',
        'kube_version': 'str',
        'memory_free_kb': 'str',
        'node_build_num': 'str',
        'node_id': 'str',
        'node_version': 'str',
        'num_cpu': 'str',
        'onboarded': 'bool',
        'os_version': 'str',
        'storage_free_kb': 'str',
        'svc_domain_id': 'str',
        'total_memory_kb': 'str',
        'total_storage_kb': 'str'
    }

    attribute_map = {
        'artifacts': 'artifacts',
        'connected': 'connected',
        'cpu_usage': 'cpuUsage',
        'gpu_info': 'gpuInfo',
        'gpu_usage': 'gpuUsage',
        'health_bits': 'healthBits',
        'health_status': 'healthStatus',
        'healthy': 'healthy',
        'id': 'id',
        'kube_version': 'kubeVersion',
        'memory_free_kb': 'memoryFreeKB',
        'node_build_num': 'nodeBuildNum',
        'node_id': 'nodeId',
        'node_version': 'nodeVersion',
        'num_cpu': 'numCpu',
        'onboarded': 'onboarded',
        'os_version': 'osVersion',
        'storage_free_kb': 'storageFreeKB',
        'svc_domain_id': 'svcDomainId',
        'total_memory_kb': 'totalMemoryKB',
        'total_storage_kb': 'totalStorageKB'
    }

    def __init__(self, artifacts=None, connected=None, cpu_usage=None, gpu_info=None, gpu_usage=None, health_bits=None, health_status=None, healthy=None, id=None, kube_version=None, memory_free_kb=None, node_build_num=None, node_id=None, node_version=None, num_cpu=None, onboarded=None, os_version=None, storage_free_kb=None, svc_domain_id=None, total_memory_kb=None, total_storage_kb=None):  # noqa: E501
        """NodeInfo - a model defined in Swagger"""  # noqa: E501
        self._artifacts = None
        self._connected = None
        self._cpu_usage = None
        self._gpu_info = None
        self._gpu_usage = None
        self._health_bits = None
        self._health_status = None
        self._healthy = None
        self._id = None
        self._kube_version = None
        self._memory_free_kb = None
        self._node_build_num = None
        self._node_id = None
        self._node_version = None
        self._num_cpu = None
        self._onboarded = None
        self._os_version = None
        self._storage_free_kb = None
        self._svc_domain_id = None
        self._total_memory_kb = None
        self._total_storage_kb = None
        self.discriminator = None
        if artifacts is not None:
            self.artifacts = artifacts
        if connected is not None:
            self.connected = connected
        if cpu_usage is not None:
            self.cpu_usage = cpu_usage
        if gpu_info is not None:
            self.gpu_info = gpu_info
        if gpu_usage is not None:
            self.gpu_usage = gpu_usage
        if health_bits is not None:
            self.health_bits = health_bits
        if health_status is not None:
            self.health_status = health_status
        if healthy is not None:
            self.healthy = healthy
        if id is not None:
            self.id = id
        if kube_version is not None:
            self.kube_version = kube_version
        if memory_free_kb is not None:
            self.memory_free_kb = memory_free_kb
        if node_build_num is not None:
            self.node_build_num = node_build_num
        if node_id is not None:
            self.node_id = node_id
        if node_version is not None:
            self.node_version = node_version
        if num_cpu is not None:
            self.num_cpu = num_cpu
        if onboarded is not None:
            self.onboarded = onboarded
        if os_version is not None:
            self.os_version = os_version
        if storage_free_kb is not None:
            self.storage_free_kb = storage_free_kb
        self.svc_domain_id = svc_domain_id
        if total_memory_kb is not None:
            self.total_memory_kb = total_memory_kb
        if total_storage_kb is not None:
            self.total_storage_kb = total_storage_kb

    @property
    def artifacts(self):
        """Gets the artifacts of this NodeInfo.  # noqa: E501

        Artifacts is a json object for passing node ip and service ports  # noqa: E501

        :return: The artifacts of this NodeInfo.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this NodeInfo.

        Artifacts is a json object for passing node ip and service ports  # noqa: E501

        :param artifacts: The artifacts of this NodeInfo.  # noqa: E501
        :type: dict(str, object)
        """

        self._artifacts = artifacts

    @property
    def connected(self):
        """Gets the connected of this NodeInfo.  # noqa: E501


        :return: The connected of this NodeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this NodeInfo.


        :param connected: The connected of this NodeInfo.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def cpu_usage(self):
        """Gets the cpu_usage of this NodeInfo.  # noqa: E501

        Node CPU usage.  # noqa: E501

        :return: The cpu_usage of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage):
        """Sets the cpu_usage of this NodeInfo.

        Node CPU usage.  # noqa: E501

        :param cpu_usage: The cpu_usage of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._cpu_usage = cpu_usage

    @property
    def gpu_info(self):
        """Gets the gpu_info of this NodeInfo.  # noqa: E501

        Information about GPUs associated with the node.  # noqa: E501

        :return: The gpu_info of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._gpu_info

    @gpu_info.setter
    def gpu_info(self, gpu_info):
        """Sets the gpu_info of this NodeInfo.

        Information about GPUs associated with the node.  # noqa: E501

        :param gpu_info: The gpu_info of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._gpu_info = gpu_info

    @property
    def gpu_usage(self):
        """Gets the gpu_usage of this NodeInfo.  # noqa: E501

        Node GPU Usage.  # noqa: E501

        :return: The gpu_usage of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._gpu_usage

    @gpu_usage.setter
    def gpu_usage(self, gpu_usage):
        """Sets the gpu_usage of this NodeInfo.

        Node GPU Usage.  # noqa: E501

        :param gpu_usage: The gpu_usage of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._gpu_usage = gpu_usage

    @property
    def health_bits(self):
        """Gets the health_bits of this NodeInfo.  # noqa: E501


        :return: The health_bits of this NodeInfo.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._health_bits

    @health_bits.setter
    def health_bits(self, health_bits):
        """Sets the health_bits of this NodeInfo.


        :param health_bits: The health_bits of this NodeInfo.  # noqa: E501
        :type: dict(str, bool)
        """

        self._health_bits = health_bits

    @property
    def health_status(self):
        """Gets the health_status of this NodeInfo.  # noqa: E501


        :return: The health_status of this NodeInfo.  # noqa: E501
        :rtype: NodeHealthStatus
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this NodeInfo.


        :param health_status: The health_status of this NodeInfo.  # noqa: E501
        :type: NodeHealthStatus
        """

        self._health_status = health_status

    @property
    def healthy(self):
        """Gets the healthy of this NodeInfo.  # noqa: E501

        Deprecated. Use healthStatus instead  # noqa: E501

        :return: The healthy of this NodeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """Sets the healthy of this NodeInfo.

        Deprecated. Use healthStatus instead  # noqa: E501

        :param healthy: The healthy of this NodeInfo.  # noqa: E501
        :type: bool
        """

        self._healthy = healthy

    @property
    def id(self):
        """Gets the id of this NodeInfo.  # noqa: E501

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :return: The id of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeInfo.

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :param id: The id of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def kube_version(self):
        """Gets the kube_version of this NodeInfo.  # noqa: E501

        Node Kubernetes version.  # noqa: E501

        :return: The kube_version of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._kube_version

    @kube_version.setter
    def kube_version(self, kube_version):
        """Sets the kube_version of this NodeInfo.

        Node Kubernetes version.  # noqa: E501

        :param kube_version: The kube_version of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._kube_version = kube_version

    @property
    def memory_free_kb(self):
        """Gets the memory_free_kb of this NodeInfo.  # noqa: E501

        Free (available) node memory in KB.  # noqa: E501

        :return: The memory_free_kb of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._memory_free_kb

    @memory_free_kb.setter
    def memory_free_kb(self, memory_free_kb):
        """Sets the memory_free_kb of this NodeInfo.

        Free (available) node memory in KB.  # noqa: E501

        :param memory_free_kb: The memory_free_kb of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._memory_free_kb = memory_free_kb

    @property
    def node_build_num(self):
        """Gets the node_build_num of this NodeInfo.  # noqa: E501

        Node build number.  # noqa: E501

        :return: The node_build_num of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_build_num

    @node_build_num.setter
    def node_build_num(self, node_build_num):
        """Sets the node_build_num of this NodeInfo.

        Node build number.  # noqa: E501

        :param node_build_num: The node_build_num of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._node_build_num = node_build_num

    @property
    def node_id(self):
        """Gets the node_id of this NodeInfo.  # noqa: E501


        :return: The node_id of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodeInfo.


        :param node_id: The node_id of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def node_version(self):
        """Gets the node_version of this NodeInfo.  # noqa: E501

        Node version.  # noqa: E501

        :return: The node_version of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_version

    @node_version.setter
    def node_version(self, node_version):
        """Sets the node_version of this NodeInfo.

        Node version.  # noqa: E501

        :param node_version: The node_version of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._node_version = node_version

    @property
    def num_cpu(self):
        """Gets the num_cpu of this NodeInfo.  # noqa: E501

        Number of CPUs assigned to the node.  # noqa: E501

        :return: The num_cpu of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._num_cpu

    @num_cpu.setter
    def num_cpu(self, num_cpu):
        """Sets the num_cpu of this NodeInfo.

        Number of CPUs assigned to the node.  # noqa: E501

        :param num_cpu: The num_cpu of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._num_cpu = num_cpu

    @property
    def onboarded(self):
        """Gets the onboarded of this NodeInfo.  # noqa: E501


        :return: The onboarded of this NodeInfo.  # noqa: E501
        :rtype: bool
        """
        return self._onboarded

    @onboarded.setter
    def onboarded(self, onboarded):
        """Sets the onboarded of this NodeInfo.


        :param onboarded: The onboarded of this NodeInfo.  # noqa: E501
        :type: bool
        """

        self._onboarded = onboarded

    @property
    def os_version(self):
        """Gets the os_version of this NodeInfo.  # noqa: E501

        Node OS version  # noqa: E501

        :return: The os_version of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this NodeInfo.

        Node OS version  # noqa: E501

        :param os_version: The os_version of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def storage_free_kb(self):
        """Gets the storage_free_kb of this NodeInfo.  # noqa: E501

        Free (available) node storage in KB.  # noqa: E501

        :return: The storage_free_kb of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._storage_free_kb

    @storage_free_kb.setter
    def storage_free_kb(self, storage_free_kb):
        """Sets the storage_free_kb of this NodeInfo.

        Free (available) node storage in KB.  # noqa: E501

        :param storage_free_kb: The storage_free_kb of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._storage_free_kb = storage_free_kb

    @property
    def svc_domain_id(self):
        """Gets the svc_domain_id of this NodeInfo.  # noqa: E501

        ID of the service domain this entity belongs to  # noqa: E501

        :return: The svc_domain_id of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._svc_domain_id

    @svc_domain_id.setter
    def svc_domain_id(self, svc_domain_id):
        """Sets the svc_domain_id of this NodeInfo.

        ID of the service domain this entity belongs to  # noqa: E501

        :param svc_domain_id: The svc_domain_id of this NodeInfo.  # noqa: E501
        :type: str
        """
        if svc_domain_id is None:
            raise ValueError("Invalid value for `svc_domain_id`, must not be `None`")  # noqa: E501

        self._svc_domain_id = svc_domain_id

    @property
    def total_memory_kb(self):
        """Gets the total_memory_kb of this NodeInfo.  # noqa: E501

        Total node memory in KB.  # noqa: E501

        :return: The total_memory_kb of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._total_memory_kb

    @total_memory_kb.setter
    def total_memory_kb(self, total_memory_kb):
        """Sets the total_memory_kb of this NodeInfo.

        Total node memory in KB.  # noqa: E501

        :param total_memory_kb: The total_memory_kb of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._total_memory_kb = total_memory_kb

    @property
    def total_storage_kb(self):
        """Gets the total_storage_kb of this NodeInfo.  # noqa: E501

        Total node storage capacity in KB.  # noqa: E501

        :return: The total_storage_kb of this NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._total_storage_kb

    @total_storage_kb.setter
    def total_storage_kb(self, total_storage_kb):
        """Sets the total_storage_kb of this NodeInfo.

        Total node storage capacity in KB.  # noqa: E501

        :param total_storage_kb: The total_storage_kb of this NodeInfo.  # noqa: E501
        :type: str
        """

        self._total_storage_kb = total_storage_kb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
