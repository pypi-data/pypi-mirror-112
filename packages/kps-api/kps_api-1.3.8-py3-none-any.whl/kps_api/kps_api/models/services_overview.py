# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.dashboard_response import DashboardResponse  # noqa: F401,E501
from kps_api.models.graph_config import GraphConfig  # noqa: F401,E501
from kps_api.models.service_details import ServiceDetails  # noqa: F401,E501
from kps_api.models.service_health import ServiceHealth  # noqa: F401,E501


class ServicesOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'detail': 'ServiceDetails',
        'graph': 'GraphConfig',
        'health': 'ServiceHealth',
        'inbound': 'DashboardResponse',
        'outbound': 'DashboardResponse'
    }

    attribute_map = {
        'detail': 'detail',
        'graph': 'graph',
        'health': 'health',
        'inbound': 'inbound',
        'outbound': 'outbound'
    }

    def __init__(self, detail=None, graph=None, health=None, inbound=None, outbound=None):  # noqa: E501
        """ServicesOverview - a model defined in Swagger"""  # noqa: E501
        self._detail = None
        self._graph = None
        self._health = None
        self._inbound = None
        self._outbound = None
        self.discriminator = None
        if detail is not None:
            self.detail = detail
        if graph is not None:
            self.graph = graph
        if health is not None:
            self.health = health
        if inbound is not None:
            self.inbound = inbound
        if outbound is not None:
            self.outbound = outbound

    @property
    def detail(self):
        """Gets the detail of this ServicesOverview.  # noqa: E501


        :return: The detail of this ServicesOverview.  # noqa: E501
        :rtype: ServiceDetails
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ServicesOverview.


        :param detail: The detail of this ServicesOverview.  # noqa: E501
        :type: ServiceDetails
        """

        self._detail = detail

    @property
    def graph(self):
        """Gets the graph of this ServicesOverview.  # noqa: E501


        :return: The graph of this ServicesOverview.  # noqa: E501
        :rtype: GraphConfig
        """
        return self._graph

    @graph.setter
    def graph(self, graph):
        """Sets the graph of this ServicesOverview.


        :param graph: The graph of this ServicesOverview.  # noqa: E501
        :type: GraphConfig
        """

        self._graph = graph

    @property
    def health(self):
        """Gets the health of this ServicesOverview.  # noqa: E501


        :return: The health of this ServicesOverview.  # noqa: E501
        :rtype: ServiceHealth
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this ServicesOverview.


        :param health: The health of this ServicesOverview.  # noqa: E501
        :type: ServiceHealth
        """

        self._health = health

    @property
    def inbound(self):
        """Gets the inbound of this ServicesOverview.  # noqa: E501


        :return: The inbound of this ServicesOverview.  # noqa: E501
        :rtype: DashboardResponse
        """
        return self._inbound

    @inbound.setter
    def inbound(self, inbound):
        """Sets the inbound of this ServicesOverview.


        :param inbound: The inbound of this ServicesOverview.  # noqa: E501
        :type: DashboardResponse
        """

        self._inbound = inbound

    @property
    def outbound(self):
        """Gets the outbound of this ServicesOverview.  # noqa: E501


        :return: The outbound of this ServicesOverview.  # noqa: E501
        :rtype: DashboardResponse
        """
        return self._outbound

    @outbound.setter
    def outbound(self, outbound):
        """Sets the outbound of this ServicesOverview.


        :param outbound: The outbound of this ServicesOverview.  # noqa: E501
        :type: DashboardResponse
        """

        self._outbound = outbound

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServicesOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicesOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
