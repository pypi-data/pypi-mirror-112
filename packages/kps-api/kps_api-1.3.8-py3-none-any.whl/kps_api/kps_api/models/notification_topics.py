# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NotificationTopics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    REPORTEDGE = "reportEdge"
    ONDELETEEDGE = "onDeleteEdge"
    ONUPDATEEDGE = "onUpdateEdge"
    REPORTEDGECLUSTER = "reportEdgeCluster"
    ONUPDATEEDGECLUSTER = "onUpdateEdgeCluster"
    ONDELETEEDGECLUSTER = "onDeleteEdgeCluster"
    REPORTSENSORS = "reportSensors"
    REPORTEDGEINFO = "reportEdgeInfo"
    APPLICATION_STATUS = "application-status"
    ONCREATEAPPLICATION = "onCreateApplication"
    ONDELETEAPPLICATION = "onDeleteApplication"
    ONUPDATEAPPLICATION = "onUpdateApplication"
    ONGETAPPLICATIONCONTAINERS = "onGetApplicationContainers"
    ONCREATECATEGORY = "onCreateCategory"
    ONDELETECATEGORY = "onDeleteCategory"
    ONUPDATECATEGORY = "onUpdateCategory"
    ONCREATEDATASOURCE = "onCreateDataSource"
    ONDELETEDATASOURCE = "onDeleteDataSource"
    ONUPDATEDATASOURCE = "onUpdateDataSource"
    ONCREATEDOCKERPROFILE = "onCreateDockerProfile"
    ONDELETEDOCKERPROFILE = "onDeleteDockerProfile"
    ONUPDATEDOCKERPROFILE = "onUpdateDockerProfile"
    ONCREATESCRIPT = "onCreateScript"
    ONDELETESCRIPT = "onDeleteScript"
    ONUPDATESCRIPT = "onUpdateScript"
    ONCREATESCRIPTRUNTIME = "onCreateScriptRuntime"
    ONDELETESCRIPTRUNTIME = "onDeleteScriptRuntime"
    ONUPDATESCRIPTRUNTIME = "onUpdateScriptRuntime"
    ONCREATEDATASTREAM = "onCreateDataStream"
    ONDELETEDATASTREAM = "onDeleteDataStream"
    ONUPDATEDATASTREAM = "onUpdateDataStream"
    ONGETDATAPIPELINECONTAINERS = "onGetDataPipelineContainers"
    ONCREATECLOUDCREDS = "onCreateCloudCreds"
    ONDELETECLOUDCREDS = "onDeleteCloudCreds"
    ONUPDATECLOUDCREDS = "onUpdateCloudCreds"
    ONCREATEPROJECT = "onCreateProject"
    ONDELETEPROJECT = "onDeleteProject"
    ONUPDATEPROJECT = "onUpdateProject"
    ONCREATEMLMODEL = "onCreateMLModel"
    ONDELETEMLMODEL = "onDeleteMLModel"
    ONUPDATEMLMODEL = "onUpdateMLModel"
    LOGUPLOAD = "logUpload"
    LOGSTREAM = "logStream"
    LOGUPLOADCOMPLETE = "logUploadComplete"
    EXECUTEEDGEUPGRADE = "executeEdgeUpgrade"
    SETUPSSHTUNNELING = "setupSSHTunneling"
    TEARDOWNSSHTUNNELING = "teardownSSHTunneling"
    ONCREATEPROJECTSERVICE = "onCreateProjectService"
    ONDELETEPROJECTSERVICE = "onDeleteProjectService"
    ONUPDATEPROJECTSERVICE = "onUpdateProjectService"
    ONCREATELOGCOLLECTOR = "onCreateLogCollector"
    ONDELETELOGCOLLECTOR = "onDeleteLogCollector"
    ONUPDATELOGCOLLECTOR = "onUpdateLogCollector"
    ONCREATESOFTWAREUPDATE = "onCreateSoftwareUpdate"
    ONUPDATESOFTWAREUPDATE = "onUpdateSoftwareUpdate"
    ONCREATESERVICEINSTANCE = "onCreateServiceInstance"
    ONUPDATESERVICEINSTANCE = "onUpdateServiceInstance"
    ONDELETESERVICEINSTANCE = "onDeleteServiceInstance"
    ONCREATESERVICEBINDING = "onCreateServiceBinding"
    ONDELETESERVICEBINDING = "onDeleteServiceBinding"
    ONCREATECONNECTORINSTANCE = "onCreateConnectorInstance"
    ONUPDATECONNECTORINSTANCE = "onUpdateConnectorInstance"
    ONDELETECONNECTORINSTANCE = "onDeleteConnectorInstance"
    HTTPPROXY = "httpProxy"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """NotificationTopics - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationTopics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationTopics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
