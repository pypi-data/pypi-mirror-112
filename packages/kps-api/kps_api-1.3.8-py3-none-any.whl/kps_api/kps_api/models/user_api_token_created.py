# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserApiTokenCreated(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'tenant_id': 'str',
        'token': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'tenant_id': 'tenantId',
        'token': 'token',
        'user_id': 'userId'
    }

    def __init__(self, id=None, tenant_id=None, token=None, user_id=None):  # noqa: E501
        """UserApiTokenCreated - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._tenant_id = None
        self._token = None
        self._user_id = None
        self.discriminator = None
        self.id = id
        self.tenant_id = tenant_id
        self.token = token
        self.user_id = user_id

    @property
    def id(self):
        """Gets the id of this UserApiTokenCreated.  # noqa: E501

        ID of the user API token  # noqa: E501

        :return: The id of this UserApiTokenCreated.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserApiTokenCreated.

        ID of the user API token  # noqa: E501

        :param id: The id of this UserApiTokenCreated.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this UserApiTokenCreated.  # noqa: E501

        Tenant ID  # noqa: E501

        :return: The tenant_id of this UserApiTokenCreated.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this UserApiTokenCreated.

        Tenant ID  # noqa: E501

        :param tenant_id: The tenant_id of this UserApiTokenCreated.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def token(self):
        """Gets the token of this UserApiTokenCreated.  # noqa: E501

        JWT token. User must save away this token. Karbon Platform Services does not store this token and it will not be returned by any subsequent API calls.  # noqa: E501

        :return: The token of this UserApiTokenCreated.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this UserApiTokenCreated.

        JWT token. User must save away this token. Karbon Platform Services does not store this token and it will not be returned by any subsequent API calls.  # noqa: E501

        :param token: The token of this UserApiTokenCreated.  # noqa: E501
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def user_id(self):
        """Gets the user_id of this UserApiTokenCreated.  # noqa: E501

        User ID  # noqa: E501

        :return: The user_id of this UserApiTokenCreated.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserApiTokenCreated.

        User ID  # noqa: E501

        :param user_id: The user_id of this UserApiTokenCreated.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserApiTokenCreated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserApiTokenCreated):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
