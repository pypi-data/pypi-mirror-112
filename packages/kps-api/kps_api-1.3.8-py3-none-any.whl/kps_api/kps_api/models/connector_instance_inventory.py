# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.connector_class import ConnectorClass  # noqa: F401,E501
from kps_api.models.connector_config import ConnectorConfig  # noqa: F401,E501
from kps_api.models.connector_instance import ConnectorInstance  # noqa: F401,E501
from kps_api.models.connector_stream import ConnectorStream  # noqa: F401,E501


class ConnectorInstanceInventory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'ConnectorClass',
        'configs': 'list[ConnectorConfig]',
        'doc': 'ConnectorInstance',
        'id': 'str',
        'streams': 'list[ConnectorStream]',
        'yaml_data': 'str'
    }

    attribute_map = {
        '_class': 'class',
        'configs': 'configs',
        'doc': 'doc',
        'id': 'id',
        'streams': 'streams',
        'yaml_data': 'yamlData'
    }

    def __init__(self, _class=None, configs=None, doc=None, id=None, streams=None, yaml_data=None):  # noqa: E501
        """ConnectorInstanceInventory - a model defined in Swagger"""  # noqa: E501
        self.__class = None
        self._configs = None
        self._doc = None
        self._id = None
        self._streams = None
        self._yaml_data = None
        self.discriminator = None
        self._class = _class
        self.configs = configs
        self.doc = doc
        if id is not None:
            self.id = id
        self.streams = streams
        self.yaml_data = yaml_data

    @property
    def _class(self):
        """Gets the _class of this ConnectorInstanceInventory.  # noqa: E501


        :return: The _class of this ConnectorInstanceInventory.  # noqa: E501
        :rtype: ConnectorClass
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this ConnectorInstanceInventory.


        :param _class: The _class of this ConnectorInstanceInventory.  # noqa: E501
        :type: ConnectorClass
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")  # noqa: E501

        self.__class = _class

    @property
    def configs(self):
        """Gets the configs of this ConnectorInstanceInventory.  # noqa: E501


        :return: The configs of this ConnectorInstanceInventory.  # noqa: E501
        :rtype: list[ConnectorConfig]
        """
        return self._configs

    @configs.setter
    def configs(self, configs):
        """Sets the configs of this ConnectorInstanceInventory.


        :param configs: The configs of this ConnectorInstanceInventory.  # noqa: E501
        :type: list[ConnectorConfig]
        """
        if configs is None:
            raise ValueError("Invalid value for `configs`, must not be `None`")  # noqa: E501

        self._configs = configs

    @property
    def doc(self):
        """Gets the doc of this ConnectorInstanceInventory.  # noqa: E501


        :return: The doc of this ConnectorInstanceInventory.  # noqa: E501
        :rtype: ConnectorInstance
        """
        return self._doc

    @doc.setter
    def doc(self, doc):
        """Sets the doc of this ConnectorInstanceInventory.


        :param doc: The doc of this ConnectorInstanceInventory.  # noqa: E501
        :type: ConnectorInstance
        """
        if doc is None:
            raise ValueError("Invalid value for `doc`, must not be `None`")  # noqa: E501

        self._doc = doc

    @property
    def id(self):
        """Gets the id of this ConnectorInstanceInventory.  # noqa: E501

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :return: The id of this ConnectorInstanceInventory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorInstanceInventory.

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :param id: The id of this ConnectorInstanceInventory.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def streams(self):
        """Gets the streams of this ConnectorInstanceInventory.  # noqa: E501


        :return: The streams of this ConnectorInstanceInventory.  # noqa: E501
        :rtype: list[ConnectorStream]
        """
        return self._streams

    @streams.setter
    def streams(self, streams):
        """Sets the streams of this ConnectorInstanceInventory.


        :param streams: The streams of this ConnectorInstanceInventory.  # noqa: E501
        :type: list[ConnectorStream]
        """
        if streams is None:
            raise ValueError("Invalid value for `streams`, must not be `None`")  # noqa: E501

        self._streams = streams

    @property
    def yaml_data(self):
        """Gets the yaml_data of this ConnectorInstanceInventory.  # noqa: E501


        :return: The yaml_data of this ConnectorInstanceInventory.  # noqa: E501
        :rtype: str
        """
        return self._yaml_data

    @yaml_data.setter
    def yaml_data(self, yaml_data):
        """Sets the yaml_data of this ConnectorInstanceInventory.


        :param yaml_data: The yaml_data of this ConnectorInstanceInventory.  # noqa: E501
        :type: str
        """
        if yaml_data is None:
            raise ValueError("Invalid value for `yaml_data`, must not be `None`")  # noqa: E501

        self._yaml_data = yaml_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectorInstanceInventory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorInstanceInventory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
