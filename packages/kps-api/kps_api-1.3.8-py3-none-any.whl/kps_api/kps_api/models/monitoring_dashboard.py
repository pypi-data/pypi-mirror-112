# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.aggregation import Aggregation  # noqa: F401,E501
from kps_api.models.chart import Chart  # noqa: F401,E501
from kps_api.models.external_link import ExternalLink  # noqa: F401,E501


class MonitoringDashboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregations': 'list[Aggregation]',
        'charts': 'list[Chart]',
        'external_links': 'list[ExternalLink]',
        'title': 'str'
    }

    attribute_map = {
        'aggregations': 'aggregations',
        'charts': 'charts',
        'external_links': 'externalLinks',
        'title': 'title'
    }

    def __init__(self, aggregations=None, charts=None, external_links=None, title=None):  # noqa: E501
        """MonitoringDashboard - a model defined in Swagger"""  # noqa: E501
        self._aggregations = None
        self._charts = None
        self._external_links = None
        self._title = None
        self.discriminator = None
        if aggregations is not None:
            self.aggregations = aggregations
        if charts is not None:
            self.charts = charts
        if external_links is not None:
            self.external_links = external_links
        if title is not None:
            self.title = title

    @property
    def aggregations(self):
        """Gets the aggregations of this MonitoringDashboard.  # noqa: E501


        :return: The aggregations of this MonitoringDashboard.  # noqa: E501
        :rtype: list[Aggregation]
        """
        return self._aggregations

    @aggregations.setter
    def aggregations(self, aggregations):
        """Sets the aggregations of this MonitoringDashboard.


        :param aggregations: The aggregations of this MonitoringDashboard.  # noqa: E501
        :type: list[Aggregation]
        """

        self._aggregations = aggregations

    @property
    def charts(self):
        """Gets the charts of this MonitoringDashboard.  # noqa: E501


        :return: The charts of this MonitoringDashboard.  # noqa: E501
        :rtype: list[Chart]
        """
        return self._charts

    @charts.setter
    def charts(self, charts):
        """Sets the charts of this MonitoringDashboard.


        :param charts: The charts of this MonitoringDashboard.  # noqa: E501
        :type: list[Chart]
        """

        self._charts = charts

    @property
    def external_links(self):
        """Gets the external_links of this MonitoringDashboard.  # noqa: E501


        :return: The external_links of this MonitoringDashboard.  # noqa: E501
        :rtype: list[ExternalLink]
        """
        return self._external_links

    @external_links.setter
    def external_links(self, external_links):
        """Sets the external_links of this MonitoringDashboard.


        :param external_links: The external_links of this MonitoringDashboard.  # noqa: E501
        :type: list[ExternalLink]
        """

        self._external_links = external_links

    @property
    def title(self):
        """Gets the title of this MonitoringDashboard.  # noqa: E501


        :return: The title of this MonitoringDashboard.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MonitoringDashboard.


        :param title: The title of this MonitoringDashboard.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitoringDashboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitoringDashboard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
