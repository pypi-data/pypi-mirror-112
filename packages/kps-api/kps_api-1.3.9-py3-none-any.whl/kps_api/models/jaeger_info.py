# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JaegerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'integration': 'bool',
        'namespace_selector': 'bool',
        'url': 'str',
        'white_list_istio_system': 'list[str]'
    }

    attribute_map = {
        'enabled': 'enabled',
        'integration': 'integration',
        'namespace_selector': 'namespaceSelector',
        'url': 'url',
        'white_list_istio_system': 'whiteListIstioSystem'
    }

    def __init__(self, enabled=None, integration=None, namespace_selector=None, url=None, white_list_istio_system=None):  # noqa: E501
        """JaegerInfo - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._integration = None
        self._namespace_selector = None
        self._url = None
        self._white_list_istio_system = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if integration is not None:
            self.integration = integration
        if namespace_selector is not None:
            self.namespace_selector = namespace_selector
        if url is not None:
            self.url = url
        if white_list_istio_system is not None:
            self.white_list_istio_system = white_list_istio_system

    @property
    def enabled(self):
        """Gets the enabled of this JaegerInfo.  # noqa: E501


        :return: The enabled of this JaegerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this JaegerInfo.


        :param enabled: The enabled of this JaegerInfo.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def integration(self):
        """Gets the integration of this JaegerInfo.  # noqa: E501


        :return: The integration of this JaegerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._integration

    @integration.setter
    def integration(self, integration):
        """Sets the integration of this JaegerInfo.


        :param integration: The integration of this JaegerInfo.  # noqa: E501
        :type: bool
        """

        self._integration = integration

    @property
    def namespace_selector(self):
        """Gets the namespace_selector of this JaegerInfo.  # noqa: E501


        :return: The namespace_selector of this JaegerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._namespace_selector

    @namespace_selector.setter
    def namespace_selector(self, namespace_selector):
        """Sets the namespace_selector of this JaegerInfo.


        :param namespace_selector: The namespace_selector of this JaegerInfo.  # noqa: E501
        :type: bool
        """

        self._namespace_selector = namespace_selector

    @property
    def url(self):
        """Gets the url of this JaegerInfo.  # noqa: E501


        :return: The url of this JaegerInfo.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this JaegerInfo.


        :param url: The url of this JaegerInfo.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def white_list_istio_system(self):
        """Gets the white_list_istio_system of this JaegerInfo.  # noqa: E501


        :return: The white_list_istio_system of this JaegerInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._white_list_istio_system

    @white_list_istio_system.setter
    def white_list_istio_system(self, white_list_istio_system):
        """Sets the white_list_istio_system of this JaegerInfo.


        :param white_list_istio_system: The white_list_istio_system of this JaegerInfo.  # noqa: E501
        :type: list[str]
        """

        self._white_list_istio_system = white_list_istio_system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JaegerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JaegerInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
