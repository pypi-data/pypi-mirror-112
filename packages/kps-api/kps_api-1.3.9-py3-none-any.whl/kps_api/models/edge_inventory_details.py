# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.application import Application  # noqa: F401,E501
from kps_api.models.category import Category  # noqa: F401,E501
from kps_api.models.cloud_creds import CloudCreds  # noqa: F401,E501
from kps_api.models.connector_instance_inventory import ConnectorInstanceInventory  # noqa: F401,E501
from kps_api.models.container_registry import ContainerRegistry  # noqa: F401,E501
from kps_api.models.data_source import DataSource  # noqa: F401,E501
from kps_api.models.data_stream import DataStream  # noqa: F401,E501
from kps_api.models.log_collector import LogCollector  # noqa: F401,E501
from kps_api.models.ml_model import MLModel  # noqa: F401,E501
from kps_api.models.project import Project  # noqa: F401,E501
from kps_api.models.project_service import ProjectService  # noqa: F401,E501
from kps_api.models.script import Script  # noqa: F401,E501
from kps_api.models.script_runtime import ScriptRuntime  # noqa: F401,E501
from kps_api.models.service_binding import ServiceBinding  # noqa: F401,E501
from kps_api.models.service_instance import ServiceInstance  # noqa: F401,E501
from kps_api.models.software_update_service_domain import SoftwareUpdateServiceDomain  # noqa: F401,E501


class EdgeInventoryDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applications': 'list[Application]',
        'categories': 'list[Category]',
        'cloud_profiles': 'list[CloudCreds]',
        'connector_instances': 'list[ConnectorInstanceInventory]',
        'container_registries': 'list[ContainerRegistry]',
        'data_pipelines': 'list[DataStream]',
        'data_sources': 'list[DataSource]',
        'functions': 'list[Script]',
        'log_collectors': 'list[LogCollector]',
        'ml_models': 'list[MLModel]',
        'project_services': 'list[ProjectService]',
        'projects': 'list[Project]',
        'runtime_environments': 'list[ScriptRuntime]',
        'software_updates': 'list[SoftwareUpdateServiceDomain]',
        'svc_bindings': 'list[ServiceBinding]',
        'svc_instances': 'list[ServiceInstance]'
    }

    attribute_map = {
        'applications': 'Applications',
        'categories': 'Categories',
        'cloud_profiles': 'CloudProfiles',
        'connector_instances': 'ConnectorInstances',
        'container_registries': 'ContainerRegistries',
        'data_pipelines': 'DataPipelines',
        'data_sources': 'DataSources',
        'functions': 'Functions',
        'log_collectors': 'LogCollectors',
        'ml_models': 'MLModels',
        'project_services': 'ProjectServices',
        'projects': 'Projects',
        'runtime_environments': 'RuntimeEnvironments',
        'software_updates': 'SoftwareUpdates',
        'svc_bindings': 'SvcBindings',
        'svc_instances': 'SvcInstances'
    }

    def __init__(self, applications=None, categories=None, cloud_profiles=None, connector_instances=None, container_registries=None, data_pipelines=None, data_sources=None, functions=None, log_collectors=None, ml_models=None, project_services=None, projects=None, runtime_environments=None, software_updates=None, svc_bindings=None, svc_instances=None):  # noqa: E501
        """EdgeInventoryDetails - a model defined in Swagger"""  # noqa: E501
        self._applications = None
        self._categories = None
        self._cloud_profiles = None
        self._connector_instances = None
        self._container_registries = None
        self._data_pipelines = None
        self._data_sources = None
        self._functions = None
        self._log_collectors = None
        self._ml_models = None
        self._project_services = None
        self._projects = None
        self._runtime_environments = None
        self._software_updates = None
        self._svc_bindings = None
        self._svc_instances = None
        self.discriminator = None
        if applications is not None:
            self.applications = applications
        if categories is not None:
            self.categories = categories
        if cloud_profiles is not None:
            self.cloud_profiles = cloud_profiles
        if connector_instances is not None:
            self.connector_instances = connector_instances
        if container_registries is not None:
            self.container_registries = container_registries
        if data_pipelines is not None:
            self.data_pipelines = data_pipelines
        if data_sources is not None:
            self.data_sources = data_sources
        if functions is not None:
            self.functions = functions
        if log_collectors is not None:
            self.log_collectors = log_collectors
        if ml_models is not None:
            self.ml_models = ml_models
        if project_services is not None:
            self.project_services = project_services
        if projects is not None:
            self.projects = projects
        if runtime_environments is not None:
            self.runtime_environments = runtime_environments
        if software_updates is not None:
            self.software_updates = software_updates
        if svc_bindings is not None:
            self.svc_bindings = svc_bindings
        if svc_instances is not None:
            self.svc_instances = svc_instances

    @property
    def applications(self):
        """Gets the applications of this EdgeInventoryDetails.  # noqa: E501


        :return: The applications of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[Application]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this EdgeInventoryDetails.


        :param applications: The applications of this EdgeInventoryDetails.  # noqa: E501
        :type: list[Application]
        """

        self._applications = applications

    @property
    def categories(self):
        """Gets the categories of this EdgeInventoryDetails.  # noqa: E501


        :return: The categories of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this EdgeInventoryDetails.


        :param categories: The categories of this EdgeInventoryDetails.  # noqa: E501
        :type: list[Category]
        """

        self._categories = categories

    @property
    def cloud_profiles(self):
        """Gets the cloud_profiles of this EdgeInventoryDetails.  # noqa: E501


        :return: The cloud_profiles of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[CloudCreds]
        """
        return self._cloud_profiles

    @cloud_profiles.setter
    def cloud_profiles(self, cloud_profiles):
        """Sets the cloud_profiles of this EdgeInventoryDetails.


        :param cloud_profiles: The cloud_profiles of this EdgeInventoryDetails.  # noqa: E501
        :type: list[CloudCreds]
        """

        self._cloud_profiles = cloud_profiles

    @property
    def connector_instances(self):
        """Gets the connector_instances of this EdgeInventoryDetails.  # noqa: E501


        :return: The connector_instances of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[ConnectorInstanceInventory]
        """
        return self._connector_instances

    @connector_instances.setter
    def connector_instances(self, connector_instances):
        """Sets the connector_instances of this EdgeInventoryDetails.


        :param connector_instances: The connector_instances of this EdgeInventoryDetails.  # noqa: E501
        :type: list[ConnectorInstanceInventory]
        """

        self._connector_instances = connector_instances

    @property
    def container_registries(self):
        """Gets the container_registries of this EdgeInventoryDetails.  # noqa: E501


        :return: The container_registries of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[ContainerRegistry]
        """
        return self._container_registries

    @container_registries.setter
    def container_registries(self, container_registries):
        """Sets the container_registries of this EdgeInventoryDetails.


        :param container_registries: The container_registries of this EdgeInventoryDetails.  # noqa: E501
        :type: list[ContainerRegistry]
        """

        self._container_registries = container_registries

    @property
    def data_pipelines(self):
        """Gets the data_pipelines of this EdgeInventoryDetails.  # noqa: E501


        :return: The data_pipelines of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[DataStream]
        """
        return self._data_pipelines

    @data_pipelines.setter
    def data_pipelines(self, data_pipelines):
        """Sets the data_pipelines of this EdgeInventoryDetails.


        :param data_pipelines: The data_pipelines of this EdgeInventoryDetails.  # noqa: E501
        :type: list[DataStream]
        """

        self._data_pipelines = data_pipelines

    @property
    def data_sources(self):
        """Gets the data_sources of this EdgeInventoryDetails.  # noqa: E501


        :return: The data_sources of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[DataSource]
        """
        return self._data_sources

    @data_sources.setter
    def data_sources(self, data_sources):
        """Sets the data_sources of this EdgeInventoryDetails.


        :param data_sources: The data_sources of this EdgeInventoryDetails.  # noqa: E501
        :type: list[DataSource]
        """

        self._data_sources = data_sources

    @property
    def functions(self):
        """Gets the functions of this EdgeInventoryDetails.  # noqa: E501


        :return: The functions of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[Script]
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """Sets the functions of this EdgeInventoryDetails.


        :param functions: The functions of this EdgeInventoryDetails.  # noqa: E501
        :type: list[Script]
        """

        self._functions = functions

    @property
    def log_collectors(self):
        """Gets the log_collectors of this EdgeInventoryDetails.  # noqa: E501


        :return: The log_collectors of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[LogCollector]
        """
        return self._log_collectors

    @log_collectors.setter
    def log_collectors(self, log_collectors):
        """Sets the log_collectors of this EdgeInventoryDetails.


        :param log_collectors: The log_collectors of this EdgeInventoryDetails.  # noqa: E501
        :type: list[LogCollector]
        """

        self._log_collectors = log_collectors

    @property
    def ml_models(self):
        """Gets the ml_models of this EdgeInventoryDetails.  # noqa: E501


        :return: The ml_models of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[MLModel]
        """
        return self._ml_models

    @ml_models.setter
    def ml_models(self, ml_models):
        """Sets the ml_models of this EdgeInventoryDetails.


        :param ml_models: The ml_models of this EdgeInventoryDetails.  # noqa: E501
        :type: list[MLModel]
        """

        self._ml_models = ml_models

    @property
    def project_services(self):
        """Gets the project_services of this EdgeInventoryDetails.  # noqa: E501


        :return: The project_services of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[ProjectService]
        """
        return self._project_services

    @project_services.setter
    def project_services(self, project_services):
        """Sets the project_services of this EdgeInventoryDetails.


        :param project_services: The project_services of this EdgeInventoryDetails.  # noqa: E501
        :type: list[ProjectService]
        """

        self._project_services = project_services

    @property
    def projects(self):
        """Gets the projects of this EdgeInventoryDetails.  # noqa: E501


        :return: The projects of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this EdgeInventoryDetails.


        :param projects: The projects of this EdgeInventoryDetails.  # noqa: E501
        :type: list[Project]
        """

        self._projects = projects

    @property
    def runtime_environments(self):
        """Gets the runtime_environments of this EdgeInventoryDetails.  # noqa: E501


        :return: The runtime_environments of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[ScriptRuntime]
        """
        return self._runtime_environments

    @runtime_environments.setter
    def runtime_environments(self, runtime_environments):
        """Sets the runtime_environments of this EdgeInventoryDetails.


        :param runtime_environments: The runtime_environments of this EdgeInventoryDetails.  # noqa: E501
        :type: list[ScriptRuntime]
        """

        self._runtime_environments = runtime_environments

    @property
    def software_updates(self):
        """Gets the software_updates of this EdgeInventoryDetails.  # noqa: E501


        :return: The software_updates of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[SoftwareUpdateServiceDomain]
        """
        return self._software_updates

    @software_updates.setter
    def software_updates(self, software_updates):
        """Sets the software_updates of this EdgeInventoryDetails.


        :param software_updates: The software_updates of this EdgeInventoryDetails.  # noqa: E501
        :type: list[SoftwareUpdateServiceDomain]
        """

        self._software_updates = software_updates

    @property
    def svc_bindings(self):
        """Gets the svc_bindings of this EdgeInventoryDetails.  # noqa: E501


        :return: The svc_bindings of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[ServiceBinding]
        """
        return self._svc_bindings

    @svc_bindings.setter
    def svc_bindings(self, svc_bindings):
        """Sets the svc_bindings of this EdgeInventoryDetails.


        :param svc_bindings: The svc_bindings of this EdgeInventoryDetails.  # noqa: E501
        :type: list[ServiceBinding]
        """

        self._svc_bindings = svc_bindings

    @property
    def svc_instances(self):
        """Gets the svc_instances of this EdgeInventoryDetails.  # noqa: E501


        :return: The svc_instances of this EdgeInventoryDetails.  # noqa: E501
        :rtype: list[ServiceInstance]
        """
        return self._svc_instances

    @svc_instances.setter
    def svc_instances(self, svc_instances):
        """Sets the svc_instances of this EdgeInventoryDetails.


        :param svc_instances: The svc_instances of this EdgeInventoryDetails.  # noqa: E501
        :type: list[ServiceInstance]
        """

        self._svc_instances = svc_instances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeInventoryDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeInventoryDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
