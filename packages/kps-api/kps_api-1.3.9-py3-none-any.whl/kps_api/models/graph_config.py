# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.elements import Elements  # noqa: F401,E501


class GraphConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration': 'int',
        'elements': 'Elements',
        'graph_type': 'str',
        'timestamp': 'int'
    }

    attribute_map = {
        'duration': 'duration',
        'elements': 'elements',
        'graph_type': 'graphType',
        'timestamp': 'timestamp'
    }

    def __init__(self, duration=None, elements=None, graph_type=None, timestamp=None):  # noqa: E501
        """GraphConfig - a model defined in Swagger"""  # noqa: E501
        self._duration = None
        self._elements = None
        self._graph_type = None
        self._timestamp = None
        self.discriminator = None
        if duration is not None:
            self.duration = duration
        if elements is not None:
            self.elements = elements
        if graph_type is not None:
            self.graph_type = graph_type
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def duration(self):
        """Gets the duration of this GraphConfig.  # noqa: E501


        :return: The duration of this GraphConfig.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GraphConfig.


        :param duration: The duration of this GraphConfig.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def elements(self):
        """Gets the elements of this GraphConfig.  # noqa: E501


        :return: The elements of this GraphConfig.  # noqa: E501
        :rtype: Elements
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this GraphConfig.


        :param elements: The elements of this GraphConfig.  # noqa: E501
        :type: Elements
        """

        self._elements = elements

    @property
    def graph_type(self):
        """Gets the graph_type of this GraphConfig.  # noqa: E501


        :return: The graph_type of this GraphConfig.  # noqa: E501
        :rtype: str
        """
        return self._graph_type

    @graph_type.setter
    def graph_type(self, graph_type):
        """Sets the graph_type of this GraphConfig.


        :param graph_type: The graph_type of this GraphConfig.  # noqa: E501
        :type: str
        """

        self._graph_type = graph_type

    @property
    def timestamp(self):
        """Gets the timestamp of this GraphConfig.  # noqa: E501


        :return: The timestamp of this GraphConfig.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GraphConfig.


        :param timestamp: The timestamp of this GraphConfig.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GraphConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
