# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.protocol_traffic import ProtocolTraffic  # noqa: F401,E501


class EdgeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_mtls': 'str',
        'response_time': 'str',
        'source': 'str',
        'target': 'str',
        'traffic': 'ProtocolTraffic'
    }

    attribute_map = {
        'id': 'id',
        'is_mtls': 'isMTLS',
        'response_time': 'responseTime',
        'source': 'source',
        'target': 'target',
        'traffic': 'traffic'
    }

    def __init__(self, id=None, is_mtls=None, response_time=None, source=None, target=None, traffic=None):  # noqa: E501
        """EdgeData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_mtls = None
        self._response_time = None
        self._source = None
        self._target = None
        self._traffic = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if is_mtls is not None:
            self.is_mtls = is_mtls
        if response_time is not None:
            self.response_time = response_time
        if source is not None:
            self.source = source
        if target is not None:
            self.target = target
        if traffic is not None:
            self.traffic = traffic

    @property
    def id(self):
        """Gets the id of this EdgeData.  # noqa: E501

        Cytoscape Fields  # noqa: E501

        :return: The id of this EdgeData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdgeData.

        Cytoscape Fields  # noqa: E501

        :param id: The id of this EdgeData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_mtls(self):
        """Gets the is_mtls of this EdgeData.  # noqa: E501


        :return: The is_mtls of this EdgeData.  # noqa: E501
        :rtype: str
        """
        return self._is_mtls

    @is_mtls.setter
    def is_mtls(self, is_mtls):
        """Sets the is_mtls of this EdgeData.


        :param is_mtls: The is_mtls of this EdgeData.  # noqa: E501
        :type: str
        """

        self._is_mtls = is_mtls

    @property
    def response_time(self):
        """Gets the response_time of this EdgeData.  # noqa: E501


        :return: The response_time of this EdgeData.  # noqa: E501
        :rtype: str
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """Sets the response_time of this EdgeData.


        :param response_time: The response_time of this EdgeData.  # noqa: E501
        :type: str
        """

        self._response_time = response_time

    @property
    def source(self):
        """Gets the source of this EdgeData.  # noqa: E501


        :return: The source of this EdgeData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EdgeData.


        :param source: The source of this EdgeData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this EdgeData.  # noqa: E501


        :return: The target of this EdgeData.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this EdgeData.


        :param target: The target of this EdgeData.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def traffic(self):
        """Gets the traffic of this EdgeData.  # noqa: E501


        :return: The traffic of this EdgeData.  # noqa: E501
        :rtype: ProtocolTraffic
        """
        return self._traffic

    @traffic.setter
    def traffic(self, traffic):
        """Sets the traffic of this EdgeData.


        :param traffic: The traffic of this EdgeData.  # noqa: E501
        :type: ProtocolTraffic
        """

        self._traffic = traffic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
