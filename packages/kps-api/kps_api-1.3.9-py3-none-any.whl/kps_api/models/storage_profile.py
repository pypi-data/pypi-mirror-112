# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.ebs_storage_profile_config import EBSStorageProfileConfig  # noqa: F401,E501
from kps_api.models.nutanix_volumes_storage_profile_config import NutanixVolumesStorageProfileConfig  # noqa: F401,E501
from kps_api.models.v_sphere_storage_profile_config import VSphereStorageProfileConfig  # noqa: F401,E501


class StorageProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ebs_storage_config': 'EBSStorageProfileConfig',
        'id': 'str',
        'is_default': 'bool',
        'name': 'str',
        'nutanix_volumes_config': 'NutanixVolumesStorageProfileConfig',
        'type': 'str',
        'v_sphere_storage_config': 'VSphereStorageProfileConfig'
    }

    attribute_map = {
        'ebs_storage_config': 'ebsStorageConfig',
        'id': 'id',
        'is_default': 'isDefault',
        'name': 'name',
        'nutanix_volumes_config': 'nutanixVolumesConfig',
        'type': 'type',
        'v_sphere_storage_config': 'vSphereStorageConfig'
    }

    def __init__(self, ebs_storage_config=None, id=None, is_default=None, name=None, nutanix_volumes_config=None, type=None, v_sphere_storage_config=None):  # noqa: E501
        """StorageProfile - a model defined in Swagger"""  # noqa: E501
        self._ebs_storage_config = None
        self._id = None
        self._is_default = None
        self._name = None
        self._nutanix_volumes_config = None
        self._type = None
        self._v_sphere_storage_config = None
        self.discriminator = None
        if ebs_storage_config is not None:
            self.ebs_storage_config = ebs_storage_config
        if id is not None:
            self.id = id
        if is_default is not None:
            self.is_default = is_default
        self.name = name
        if nutanix_volumes_config is not None:
            self.nutanix_volumes_config = nutanix_volumes_config
        self.type = type
        if v_sphere_storage_config is not None:
            self.v_sphere_storage_config = v_sphere_storage_config

    @property
    def ebs_storage_config(self):
        """Gets the ebs_storage_config of this StorageProfile.  # noqa: E501


        :return: The ebs_storage_config of this StorageProfile.  # noqa: E501
        :rtype: EBSStorageProfileConfig
        """
        return self._ebs_storage_config

    @ebs_storage_config.setter
    def ebs_storage_config(self, ebs_storage_config):
        """Sets the ebs_storage_config of this StorageProfile.


        :param ebs_storage_config: The ebs_storage_config of this StorageProfile.  # noqa: E501
        :type: EBSStorageProfileConfig
        """

        self._ebs_storage_config = ebs_storage_config

    @property
    def id(self):
        """Gets the id of this StorageProfile.  # noqa: E501

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :return: The id of this StorageProfile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StorageProfile.

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :param id: The id of this StorageProfile.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this StorageProfile.  # noqa: E501

        Flag to specify if it is default storage profile  # noqa: E501

        :return: The is_default of this StorageProfile.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this StorageProfile.

        Flag to specify if it is default storage profile  # noqa: E501

        :param is_default: The is_default of this StorageProfile.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this StorageProfile.  # noqa: E501

        Name for the storage profile.  # noqa: E501

        :return: The name of this StorageProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageProfile.

        Name for the storage profile.  # noqa: E501

        :param name: The name of this StorageProfile.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nutanix_volumes_config(self):
        """Gets the nutanix_volumes_config of this StorageProfile.  # noqa: E501


        :return: The nutanix_volumes_config of this StorageProfile.  # noqa: E501
        :rtype: NutanixVolumesStorageProfileConfig
        """
        return self._nutanix_volumes_config

    @nutanix_volumes_config.setter
    def nutanix_volumes_config(self, nutanix_volumes_config):
        """Sets the nutanix_volumes_config of this StorageProfile.


        :param nutanix_volumes_config: The nutanix_volumes_config of this StorageProfile.  # noqa: E501
        :type: NutanixVolumesStorageProfileConfig
        """

        self._nutanix_volumes_config = nutanix_volumes_config

    @property
    def type(self):
        """Gets the type of this StorageProfile.  # noqa: E501

        Storage type for this Storage profile.  # noqa: E501

        :return: The type of this StorageProfile.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StorageProfile.

        Storage type for this Storage profile.  # noqa: E501

        :param type: The type of this StorageProfile.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["NutanixVolumes", "EBS", "vSphere"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def v_sphere_storage_config(self):
        """Gets the v_sphere_storage_config of this StorageProfile.  # noqa: E501


        :return: The v_sphere_storage_config of this StorageProfile.  # noqa: E501
        :rtype: VSphereStorageProfileConfig
        """
        return self._v_sphere_storage_config

    @v_sphere_storage_config.setter
    def v_sphere_storage_config(self, v_sphere_storage_config):
        """Sets the v_sphere_storage_config of this StorageProfile.


        :param v_sphere_storage_config: The v_sphere_storage_config of this StorageProfile.  # noqa: E501
        :type: VSphereStorageProfileConfig
        """

        self._v_sphere_storage_config = v_sphere_storage_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
