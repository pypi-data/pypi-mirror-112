# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.additional_item import AdditionalItem  # noqa: F401,E501


class ServiceOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_detail_sample': 'AdditionalItem',
        'app_label': 'bool',
        'istio_sidecar': 'bool',
        'labels': 'dict(str, str)',
        'name': 'str'
    }

    attribute_map = {
        'additional_detail_sample': 'additionalDetailSample',
        'app_label': 'appLabel',
        'istio_sidecar': 'istioSidecar',
        'labels': 'labels',
        'name': 'name'
    }

    def __init__(self, additional_detail_sample=None, app_label=None, istio_sidecar=None, labels=None, name=None):  # noqa: E501
        """ServiceOverview - a model defined in Swagger"""  # noqa: E501
        self._additional_detail_sample = None
        self._app_label = None
        self._istio_sidecar = None
        self._labels = None
        self._name = None
        self.discriminator = None
        if additional_detail_sample is not None:
            self.additional_detail_sample = additional_detail_sample
        self.app_label = app_label
        self.istio_sidecar = istio_sidecar
        if labels is not None:
            self.labels = labels
        self.name = name

    @property
    def additional_detail_sample(self):
        """Gets the additional_detail_sample of this ServiceOverview.  # noqa: E501


        :return: The additional_detail_sample of this ServiceOverview.  # noqa: E501
        :rtype: AdditionalItem
        """
        return self._additional_detail_sample

    @additional_detail_sample.setter
    def additional_detail_sample(self, additional_detail_sample):
        """Sets the additional_detail_sample of this ServiceOverview.


        :param additional_detail_sample: The additional_detail_sample of this ServiceOverview.  # noqa: E501
        :type: AdditionalItem
        """

        self._additional_detail_sample = additional_detail_sample

    @property
    def app_label(self):
        """Gets the app_label of this ServiceOverview.  # noqa: E501

        Has label app  # noqa: E501

        :return: The app_label of this ServiceOverview.  # noqa: E501
        :rtype: bool
        """
        return self._app_label

    @app_label.setter
    def app_label(self, app_label):
        """Sets the app_label of this ServiceOverview.

        Has label app  # noqa: E501

        :param app_label: The app_label of this ServiceOverview.  # noqa: E501
        :type: bool
        """
        if app_label is None:
            raise ValueError("Invalid value for `app_label`, must not be `None`")  # noqa: E501

        self._app_label = app_label

    @property
    def istio_sidecar(self):
        """Gets the istio_sidecar of this ServiceOverview.  # noqa: E501

        Define if Pods related to this Service has an IstioSidecar deployed  # noqa: E501

        :return: The istio_sidecar of this ServiceOverview.  # noqa: E501
        :rtype: bool
        """
        return self._istio_sidecar

    @istio_sidecar.setter
    def istio_sidecar(self, istio_sidecar):
        """Sets the istio_sidecar of this ServiceOverview.

        Define if Pods related to this Service has an IstioSidecar deployed  # noqa: E501

        :param istio_sidecar: The istio_sidecar of this ServiceOverview.  # noqa: E501
        :type: bool
        """
        if istio_sidecar is None:
            raise ValueError("Invalid value for `istio_sidecar`, must not be `None`")  # noqa: E501

        self._istio_sidecar = istio_sidecar

    @property
    def labels(self):
        """Gets the labels of this ServiceOverview.  # noqa: E501

        Labels for Service  # noqa: E501

        :return: The labels of this ServiceOverview.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ServiceOverview.

        Labels for Service  # noqa: E501

        :param labels: The labels of this ServiceOverview.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ServiceOverview.  # noqa: E501

        Name of the Service  # noqa: E501

        :return: The name of this ServiceOverview.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceOverview.

        Name of the Service  # noqa: E501

        :param name: The name of this ServiceOverview.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
