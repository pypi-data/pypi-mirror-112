# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from kps_api.api_client import ApiClient


class HTTPServiceProxyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def h_ttp_service_proxy_create(self, body, authorization, **kwargs):  # noqa: E501
        """Create a HTTP service proxy.  # noqa: E501

        Create a HTTP service proxy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.h_ttp_service_proxy_create(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HTTPServiceProxyCreateParamPayload body: (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: HTTPServiceProxyCreateResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.h_ttp_service_proxy_create_with_http_info(body, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.h_ttp_service_proxy_create_with_http_info(body, authorization, **kwargs)  # noqa: E501
            return data

    def h_ttp_service_proxy_create_with_http_info(self, body, authorization, **kwargs):  # noqa: E501
        """Create a HTTP service proxy.  # noqa: E501

        Create a HTTP service proxy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.h_ttp_service_proxy_create_with_http_info(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HTTPServiceProxyCreateParamPayload body: (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: HTTPServiceProxyCreateResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method h_ttp_service_proxy_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `h_ttp_service_proxy_create`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `h_ttp_service_proxy_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/httpserviceproxies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPServiceProxyCreateResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def h_ttp_service_proxy_delete(self, id, authorization, **kwargs):  # noqa: E501
        """Delete HTTP service proxy.  # noqa: E501

        Delete the HTTP service proxy with the given ID {id}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.h_ttp_service_proxy_delete(id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: DeleteDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.h_ttp_service_proxy_delete_with_http_info(id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.h_ttp_service_proxy_delete_with_http_info(id, authorization, **kwargs)  # noqa: E501
            return data

    def h_ttp_service_proxy_delete_with_http_info(self, id, authorization, **kwargs):  # noqa: E501
        """Delete HTTP service proxy.  # noqa: E501

        Delete the HTTP service proxy with the given ID {id}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.h_ttp_service_proxy_delete_with_http_info(id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: DeleteDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method h_ttp_service_proxy_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `h_ttp_service_proxy_delete`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `h_ttp_service_proxy_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/httpserviceproxies/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteDocumentResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def h_ttp_service_proxy_get(self, id, authorization, **kwargs):  # noqa: E501
        """Get a HTTP service proxy by its ID.  # noqa: E501

        Retrieves a HTTP service proxy with the given ID {id}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.h_ttp_service_proxy_get(id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: HTTPServiceProxy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.h_ttp_service_proxy_get_with_http_info(id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.h_ttp_service_proxy_get_with_http_info(id, authorization, **kwargs)  # noqa: E501
            return data

    def h_ttp_service_proxy_get_with_http_info(self, id, authorization, **kwargs):  # noqa: E501
        """Get a HTTP service proxy by its ID.  # noqa: E501

        Retrieves a HTTP service proxy with the given ID {id}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.h_ttp_service_proxy_get_with_http_info(id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: HTTPServiceProxy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method h_ttp_service_proxy_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `h_ttp_service_proxy_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `h_ttp_service_proxy_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/httpserviceproxies/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPServiceProxy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def h_ttp_service_proxy_list(self, authorization, **kwargs):  # noqa: E501
        """Get all HTTP service proxies.  # noqa: E501

        Retrieves a list of all HTTP service proxies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.h_ttp_service_proxy_list(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :param str type: Type of the HTTP Service Proxy
        :param str project_id: HTTP Service Proxy Project ID
        :param str svc_domain_id: HTTP Service Proxy Service Domain ID
        :param str name: Name of the HTTP Service Proxy
        :param str service_name: ServiceName of the HTTP Service Proxy
        :param str service_namespace: ServiceNamespace of the HTTP Service Proxy
        :return: HTTPServiceProxyListPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.h_ttp_service_proxy_list_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.h_ttp_service_proxy_list_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def h_ttp_service_proxy_list_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Get all HTTP service proxies.  # noqa: E501

        Retrieves a list of all HTTP service proxies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.h_ttp_service_proxy_list_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :param str type: Type of the HTTP Service Proxy
        :param str project_id: HTTP Service Proxy Project ID
        :param str svc_domain_id: HTTP Service Proxy Service Domain ID
        :param str name: Name of the HTTP Service Proxy
        :param str service_name: ServiceName of the HTTP Service Proxy
        :param str service_namespace: ServiceNamespace of the HTTP Service Proxy
        :return: HTTPServiceProxyListPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'page_index', 'page_size', 'order_by', 'filter', 'type', 'project_id', 'svc_domain_id', 'name', 'service_name', 'service_namespace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method h_ttp_service_proxy_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `h_ttp_service_proxy_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
            collection_formats['orderBy'] = 'csv'  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'svc_domain_id' in params:
            query_params.append(('svcDomainId', params['svc_domain_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'service_name' in params:
            query_params.append(('serviceName', params['service_name']))  # noqa: E501
        if 'service_namespace' in params:
            query_params.append(('serviceNamespace', params['service_namespace']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/httpserviceproxies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPServiceProxyListPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def h_ttp_service_proxy_update(self, body, authorization, id, **kwargs):  # noqa: E501
        """Update a HTTP service proxy by its ID.  # noqa: E501

        Update a HTTP service proxy with the given ID {id}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.h_ttp_service_proxy_update(body, authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HTTPServiceProxyUpdateParamPayload body: (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param str id: ID of the entity (required)
        :return: HTTPServiceProxyUpdateResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.h_ttp_service_proxy_update_with_http_info(body, authorization, id, **kwargs)  # noqa: E501
        else:
            (data) = self.h_ttp_service_proxy_update_with_http_info(body, authorization, id, **kwargs)  # noqa: E501
            return data

    def h_ttp_service_proxy_update_with_http_info(self, body, authorization, id, **kwargs):  # noqa: E501
        """Update a HTTP service proxy by its ID.  # noqa: E501

        Update a HTTP service proxy with the given ID {id}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.h_ttp_service_proxy_update_with_http_info(body, authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HTTPServiceProxyUpdateParamPayload body: (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param str id: ID of the entity (required)
        :return: HTTPServiceProxyUpdateResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method h_ttp_service_proxy_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `h_ttp_service_proxy_update`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `h_ttp_service_proxy_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `h_ttp_service_proxy_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/httpserviceproxies/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPServiceProxyUpdateResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
