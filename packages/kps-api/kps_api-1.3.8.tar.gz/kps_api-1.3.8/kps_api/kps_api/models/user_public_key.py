# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserPublicKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'id': 'str',
        'public_key': 'str',
        'tenant_id': 'str',
        'updated_at': 'datetime',
        'used_at': 'datetime'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'id': 'id',
        'public_key': 'publicKey',
        'tenant_id': 'tenantId',
        'updated_at': 'updatedAt',
        'used_at': 'usedAt'
    }

    def __init__(self, created_at=None, id=None, public_key=None, tenant_id=None, updated_at=None, used_at=None):  # noqa: E501
        """UserPublicKey - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._id = None
        self._public_key = None
        self._tenant_id = None
        self._updated_at = None
        self._used_at = None
        self.discriminator = None
        self.created_at = created_at
        self.id = id
        self.public_key = public_key
        self.tenant_id = tenant_id
        self.updated_at = updated_at
        self.used_at = used_at

    @property
    def created_at(self):
        """Gets the created_at of this UserPublicKey.  # noqa: E501

        created at timestamp  # noqa: E501

        :return: The created_at of this UserPublicKey.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserPublicKey.

        created at timestamp  # noqa: E501

        :param created_at: The created_at of this UserPublicKey.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this UserPublicKey.  # noqa: E501

        ID of the user  # noqa: E501

        :return: The id of this UserPublicKey.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserPublicKey.

        ID of the user  # noqa: E501

        :param id: The id of this UserPublicKey.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def public_key(self):
        """Gets the public_key of this UserPublicKey.  # noqa: E501

        Public Key of the user  # noqa: E501

        :return: The public_key of this UserPublicKey.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this UserPublicKey.

        Public Key of the user  # noqa: E501

        :param public_key: The public_key of this UserPublicKey.  # noqa: E501
        :type: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")  # noqa: E501

        self._public_key = public_key

    @property
    def tenant_id(self):
        """Gets the tenant_id of this UserPublicKey.  # noqa: E501

        Tenant ID of the user  # noqa: E501

        :return: The tenant_id of this UserPublicKey.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this UserPublicKey.

        Tenant ID of the user  # noqa: E501

        :param tenant_id: The tenant_id of this UserPublicKey.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def updated_at(self):
        """Gets the updated_at of this UserPublicKey.  # noqa: E501

        updated at timestamp  # noqa: E501

        :return: The updated_at of this UserPublicKey.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserPublicKey.

        updated at timestamp  # noqa: E501

        :param updated_at: The updated_at of this UserPublicKey.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def used_at(self):
        """Gets the used_at of this UserPublicKey.  # noqa: E501

        last used timestamp  # noqa: E501

        :return: The used_at of this UserPublicKey.  # noqa: E501
        :rtype: datetime
        """
        return self._used_at

    @used_at.setter
    def used_at(self, used_at):
        """Sets the used_at of this UserPublicKey.

        last used timestamp  # noqa: E501

        :param used_at: The used_at of this UserPublicKey.  # noqa: E501
        :type: datetime
        """
        if used_at is None:
            raise ValueError("Invalid value for `used_at`, must not be `None`")  # noqa: E501

        self._used_at = used_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserPublicKey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPublicKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
