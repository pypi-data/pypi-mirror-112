# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ExecuteEdgeUpgradeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'str',
        'docker_login': 'str',
        'edge_id': 'str',
        'id': 'str',
        'release': 'str',
        'upgrade_url': 'str'
    }

    attribute_map = {
        'data': 'data',
        'docker_login': 'dockerLogin',
        'edge_id': 'edgeID',
        'id': 'id',
        'release': 'release',
        'upgrade_url': 'upgradeURL'
    }

    def __init__(self, data=None, docker_login=None, edge_id=None, id=None, release=None, upgrade_url=None):  # noqa: E501
        """ExecuteEdgeUpgradeData - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._docker_login = None
        self._edge_id = None
        self._id = None
        self._release = None
        self._upgrade_url = None
        self.discriminator = None
        self.data = data
        self.docker_login = docker_login
        self.edge_id = edge_id
        if id is not None:
            self.id = id
        self.release = release
        self.upgrade_url = upgrade_url

    @property
    def data(self):
        """Gets the data of this ExecuteEdgeUpgradeData.  # noqa: E501

        Data for the execute edge upgrade.  # noqa: E501

        :return: The data of this ExecuteEdgeUpgradeData.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ExecuteEdgeUpgradeData.

        Data for the execute edge upgrade.  # noqa: E501

        :param data: The data of this ExecuteEdgeUpgradeData.  # noqa: E501
        :type: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def docker_login(self):
        """Gets the docker_login of this ExecuteEdgeUpgradeData.  # noqa: E501

        Docker login command  # noqa: E501

        :return: The docker_login of this ExecuteEdgeUpgradeData.  # noqa: E501
        :rtype: str
        """
        return self._docker_login

    @docker_login.setter
    def docker_login(self, docker_login):
        """Sets the docker_login of this ExecuteEdgeUpgradeData.

        Docker login command  # noqa: E501

        :param docker_login: The docker_login of this ExecuteEdgeUpgradeData.  # noqa: E501
        :type: str
        """
        if docker_login is None:
            raise ValueError("Invalid value for `docker_login`, must not be `None`")  # noqa: E501

        self._docker_login = docker_login

    @property
    def edge_id(self):
        """Gets the edge_id of this ExecuteEdgeUpgradeData.  # noqa: E501

        EdgeID. ID of the specific edge to upgrade.  # noqa: E501

        :return: The edge_id of this ExecuteEdgeUpgradeData.  # noqa: E501
        :rtype: str
        """
        return self._edge_id

    @edge_id.setter
    def edge_id(self, edge_id):
        """Sets the edge_id of this ExecuteEdgeUpgradeData.

        EdgeID. ID of the specific edge to upgrade.  # noqa: E501

        :param edge_id: The edge_id of this ExecuteEdgeUpgradeData.  # noqa: E501
        :type: str
        """
        if edge_id is None:
            raise ValueError("Invalid value for `edge_id`, must not be `None`")  # noqa: E501

        self._edge_id = edge_id

    @property
    def id(self):
        """Gets the id of this ExecuteEdgeUpgradeData.  # noqa: E501

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :return: The id of this ExecuteEdgeUpgradeData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExecuteEdgeUpgradeData.

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :param id: The id of this ExecuteEdgeUpgradeData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def release(self):
        """Gets the release of this ExecuteEdgeUpgradeData.  # noqa: E501

        Release for execute edge upgrade.  # noqa: E501

        :return: The release of this ExecuteEdgeUpgradeData.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this ExecuteEdgeUpgradeData.

        Release for execute edge upgrade.  # noqa: E501

        :param release: The release of this ExecuteEdgeUpgradeData.  # noqa: E501
        :type: str
        """
        if release is None:
            raise ValueError("Invalid value for `release`, must not be `None`")  # noqa: E501

        self._release = release

    @property
    def upgrade_url(self):
        """Gets the upgrade_url of this ExecuteEdgeUpgradeData.  # noqa: E501

        URL for the edge to get the upgrade from  # noqa: E501

        :return: The upgrade_url of this ExecuteEdgeUpgradeData.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_url

    @upgrade_url.setter
    def upgrade_url(self, upgrade_url):
        """Sets the upgrade_url of this ExecuteEdgeUpgradeData.

        URL for the edge to get the upgrade from  # noqa: E501

        :param upgrade_url: The upgrade_url of this ExecuteEdgeUpgradeData.  # noqa: E501
        :type: str
        """
        if upgrade_url is None:
            raise ValueError("Invalid value for `upgrade_url`, must not be `None`")  # noqa: E501

        self._upgrade_url = upgrade_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecuteEdgeUpgradeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecuteEdgeUpgradeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
