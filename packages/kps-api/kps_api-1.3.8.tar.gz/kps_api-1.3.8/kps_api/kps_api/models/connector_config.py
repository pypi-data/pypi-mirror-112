# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.category_info import CategoryInfo  # noqa: F401,E501
from kps_api.models.connector_parameters_values import ConnectorParametersValues  # noqa: F401,E501


class ConnectorConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connector_instance_id': 'str',
        'description': 'str',
        'exclude_service_domain_ids': 'list[str]',
        'id': 'str',
        'name': 'str',
        'parameters': 'ConnectorParametersValues',
        'service_domain_ids': 'list[str]',
        'service_domain_selectors': 'list[CategoryInfo]'
    }

    attribute_map = {
        'connector_instance_id': 'connectorInstanceID',
        'description': 'description',
        'exclude_service_domain_ids': 'excludeServiceDomainIds',
        'id': 'id',
        'name': 'name',
        'parameters': 'parameters',
        'service_domain_ids': 'serviceDomainIds',
        'service_domain_selectors': 'serviceDomainSelectors'
    }

    def __init__(self, connector_instance_id=None, description=None, exclude_service_domain_ids=None, id=None, name=None, parameters=None, service_domain_ids=None, service_domain_selectors=None):  # noqa: E501
        """ConnectorConfig - a model defined in Swagger"""  # noqa: E501
        self._connector_instance_id = None
        self._description = None
        self._exclude_service_domain_ids = None
        self._id = None
        self._name = None
        self._parameters = None
        self._service_domain_ids = None
        self._service_domain_selectors = None
        self.discriminator = None
        self.connector_instance_id = connector_instance_id
        if description is not None:
            self.description = description
        if exclude_service_domain_ids is not None:
            self.exclude_service_domain_ids = exclude_service_domain_ids
        if id is not None:
            self.id = id
        self.name = name
        if parameters is not None:
            self.parameters = parameters
        if service_domain_ids is not None:
            self.service_domain_ids = service_domain_ids
        if service_domain_selectors is not None:
            self.service_domain_selectors = service_domain_selectors

    @property
    def connector_instance_id(self):
        """Gets the connector_instance_id of this ConnectorConfig.  # noqa: E501


        :return: The connector_instance_id of this ConnectorConfig.  # noqa: E501
        :rtype: str
        """
        return self._connector_instance_id

    @connector_instance_id.setter
    def connector_instance_id(self, connector_instance_id):
        """Sets the connector_instance_id of this ConnectorConfig.


        :param connector_instance_id: The connector_instance_id of this ConnectorConfig.  # noqa: E501
        :type: str
        """
        if connector_instance_id is None:
            raise ValueError("Invalid value for `connector_instance_id`, must not be `None`")  # noqa: E501

        self._connector_instance_id = connector_instance_id

    @property
    def description(self):
        """Gets the description of this ConnectorConfig.  # noqa: E501


        :return: The description of this ConnectorConfig.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConnectorConfig.


        :param description: The description of this ConnectorConfig.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def exclude_service_domain_ids(self):
        """Gets the exclude_service_domain_ids of this ConnectorConfig.  # noqa: E501

        Service domains to be excluded from the connector config deployment.  # noqa: E501

        :return: The exclude_service_domain_ids of this ConnectorConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_service_domain_ids

    @exclude_service_domain_ids.setter
    def exclude_service_domain_ids(self, exclude_service_domain_ids):
        """Sets the exclude_service_domain_ids of this ConnectorConfig.

        Service domains to be excluded from the connector config deployment.  # noqa: E501

        :param exclude_service_domain_ids: The exclude_service_domain_ids of this ConnectorConfig.  # noqa: E501
        :type: list[str]
        """

        self._exclude_service_domain_ids = exclude_service_domain_ids

    @property
    def id(self):
        """Gets the id of this ConnectorConfig.  # noqa: E501

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :return: The id of this ConnectorConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorConfig.

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :param id: The id of this ConnectorConfig.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ConnectorConfig.  # noqa: E501


        :return: The name of this ConnectorConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectorConfig.


        :param name: The name of this ConnectorConfig.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this ConnectorConfig.  # noqa: E501


        :return: The parameters of this ConnectorConfig.  # noqa: E501
        :rtype: ConnectorParametersValues
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ConnectorConfig.


        :param parameters: The parameters of this ConnectorConfig.  # noqa: E501
        :type: ConnectorParametersValues
        """

        self._parameters = parameters

    @property
    def service_domain_ids(self):
        """Gets the service_domain_ids of this ConnectorConfig.  # noqa: E501

        Service domains listed according to ID where the connector config is deployed. Only relevant if the parent project EdgeSelectorType value is set to Explicit.  # noqa: E501

        :return: The service_domain_ids of this ConnectorConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_domain_ids

    @service_domain_ids.setter
    def service_domain_ids(self, service_domain_ids):
        """Sets the service_domain_ids of this ConnectorConfig.

        Service domains listed according to ID where the connector config is deployed. Only relevant if the parent project EdgeSelectorType value is set to Explicit.  # noqa: E501

        :param service_domain_ids: The service_domain_ids of this ConnectorConfig.  # noqa: E501
        :type: list[str]
        """

        self._service_domain_ids = service_domain_ids

    @property
    def service_domain_selectors(self):
        """Gets the service_domain_selectors of this ConnectorConfig.  # noqa: E501

        Select service domains according to CategoryInfo. Only relevant if the parent project EdgeSelectorType value is set to Category.  # noqa: E501

        :return: The service_domain_selectors of this ConnectorConfig.  # noqa: E501
        :rtype: list[CategoryInfo]
        """
        return self._service_domain_selectors

    @service_domain_selectors.setter
    def service_domain_selectors(self, service_domain_selectors):
        """Sets the service_domain_selectors of this ConnectorConfig.

        Select service domains according to CategoryInfo. Only relevant if the parent project EdgeSelectorType value is set to Category.  # noqa: E501

        :param service_domain_selectors: The service_domain_selectors of this ConnectorConfig.  # noqa: E501
        :type: list[CategoryInfo]
        """

        self._service_domain_selectors = service_domain_selectors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectorConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
