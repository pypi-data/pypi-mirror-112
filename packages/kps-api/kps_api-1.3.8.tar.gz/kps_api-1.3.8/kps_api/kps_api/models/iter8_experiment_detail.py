# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.iter8_criteria_detail import Iter8CriteriaDetail  # noqa: F401,E501
from kps_api.models.iter8_experiment_item import Iter8ExperimentItem  # noqa: F401,E501
from kps_api.models.iter8_traffic_control import Iter8TrafficControl  # noqa: F401,E501
from kps_api.models.resource_permissions import ResourcePermissions  # noqa: F401,E501


class Iter8ExperimentDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'criterias': 'list[Iter8CriteriaDetail]',
        'experiment_item': 'Iter8ExperimentItem',
        'permissions': 'ResourcePermissions',
        'traffic_control': 'Iter8TrafficControl'
    }

    attribute_map = {
        'criterias': 'criterias',
        'experiment_item': 'experimentItem',
        'permissions': 'permissions',
        'traffic_control': 'trafficControl'
    }

    def __init__(self, criterias=None, experiment_item=None, permissions=None, traffic_control=None):  # noqa: E501
        """Iter8ExperimentDetail - a model defined in Swagger"""  # noqa: E501
        self._criterias = None
        self._experiment_item = None
        self._permissions = None
        self._traffic_control = None
        self.discriminator = None
        if criterias is not None:
            self.criterias = criterias
        if experiment_item is not None:
            self.experiment_item = experiment_item
        if permissions is not None:
            self.permissions = permissions
        if traffic_control is not None:
            self.traffic_control = traffic_control

    @property
    def criterias(self):
        """Gets the criterias of this Iter8ExperimentDetail.  # noqa: E501


        :return: The criterias of this Iter8ExperimentDetail.  # noqa: E501
        :rtype: list[Iter8CriteriaDetail]
        """
        return self._criterias

    @criterias.setter
    def criterias(self, criterias):
        """Sets the criterias of this Iter8ExperimentDetail.


        :param criterias: The criterias of this Iter8ExperimentDetail.  # noqa: E501
        :type: list[Iter8CriteriaDetail]
        """

        self._criterias = criterias

    @property
    def experiment_item(self):
        """Gets the experiment_item of this Iter8ExperimentDetail.  # noqa: E501


        :return: The experiment_item of this Iter8ExperimentDetail.  # noqa: E501
        :rtype: Iter8ExperimentItem
        """
        return self._experiment_item

    @experiment_item.setter
    def experiment_item(self, experiment_item):
        """Sets the experiment_item of this Iter8ExperimentDetail.


        :param experiment_item: The experiment_item of this Iter8ExperimentDetail.  # noqa: E501
        :type: Iter8ExperimentItem
        """

        self._experiment_item = experiment_item

    @property
    def permissions(self):
        """Gets the permissions of this Iter8ExperimentDetail.  # noqa: E501


        :return: The permissions of this Iter8ExperimentDetail.  # noqa: E501
        :rtype: ResourcePermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Iter8ExperimentDetail.


        :param permissions: The permissions of this Iter8ExperimentDetail.  # noqa: E501
        :type: ResourcePermissions
        """

        self._permissions = permissions

    @property
    def traffic_control(self):
        """Gets the traffic_control of this Iter8ExperimentDetail.  # noqa: E501


        :return: The traffic_control of this Iter8ExperimentDetail.  # noqa: E501
        :rtype: Iter8TrafficControl
        """
        return self._traffic_control

    @traffic_control.setter
    def traffic_control(self, traffic_control):
        """Sets the traffic_control of this Iter8ExperimentDetail.


        :param traffic_control: The traffic_control of this Iter8ExperimentDetail.  # noqa: E501
        :type: Iter8TrafficControl
        """

        self._traffic_control = traffic_control

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Iter8ExperimentDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Iter8ExperimentDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
