# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.namespace import Namespace  # noqa: F401,E501
from kps_api.models.runtime import Runtime  # noqa: F401,E501
from kps_api.models.workload_item import WorkloadItem  # noqa: F401,E501


class App(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'namespace': 'Namespace',
        'runtimes': 'list[Runtime]',
        'service_names': 'list[str]',
        'workloads': 'list[WorkloadItem]'
    }

    attribute_map = {
        'name': 'name',
        'namespace': 'namespace',
        'runtimes': 'runtimes',
        'service_names': 'serviceNames',
        'workloads': 'workloads'
    }

    def __init__(self, name=None, namespace=None, runtimes=None, service_names=None, workloads=None):  # noqa: E501
        """App - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._namespace = None
        self._runtimes = None
        self._service_names = None
        self._workloads = None
        self.discriminator = None
        self.name = name
        self.namespace = namespace
        if runtimes is not None:
            self.runtimes = runtimes
        self.service_names = service_names
        self.workloads = workloads

    @property
    def name(self):
        """Gets the name of this App.  # noqa: E501

        Name of the application  # noqa: E501

        :return: The name of this App.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this App.

        Name of the application  # noqa: E501

        :param name: The name of this App.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this App.  # noqa: E501


        :return: The namespace of this App.  # noqa: E501
        :rtype: Namespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this App.


        :param namespace: The namespace of this App.  # noqa: E501
        :type: Namespace
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def runtimes(self):
        """Gets the runtimes of this App.  # noqa: E501

        Runtimes and associated dashboards  # noqa: E501

        :return: The runtimes of this App.  # noqa: E501
        :rtype: list[Runtime]
        """
        return self._runtimes

    @runtimes.setter
    def runtimes(self, runtimes):
        """Sets the runtimes of this App.

        Runtimes and associated dashboards  # noqa: E501

        :param runtimes: The runtimes of this App.  # noqa: E501
        :type: list[Runtime]
        """

        self._runtimes = runtimes

    @property
    def service_names(self):
        """Gets the service_names of this App.  # noqa: E501

        List of service names linked with an application  # noqa: E501

        :return: The service_names of this App.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_names

    @service_names.setter
    def service_names(self, service_names):
        """Sets the service_names of this App.

        List of service names linked with an application  # noqa: E501

        :param service_names: The service_names of this App.  # noqa: E501
        :type: list[str]
        """
        if service_names is None:
            raise ValueError("Invalid value for `service_names`, must not be `None`")  # noqa: E501

        self._service_names = service_names

    @property
    def workloads(self):
        """Gets the workloads of this App.  # noqa: E501

        Workloads for a given application  # noqa: E501

        :return: The workloads of this App.  # noqa: E501
        :rtype: list[WorkloadItem]
        """
        return self._workloads

    @workloads.setter
    def workloads(self, workloads):
        """Sets the workloads of this App.

        Workloads for a given application  # noqa: E501

        :param workloads: The workloads of this App.  # noqa: E501
        :type: list[WorkloadItem]
        """
        if workloads is None:
            raise ValueError("Invalid value for `workloads`, must not be `None`")  # noqa: E501

        self._workloads = workloads

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(App, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, App):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
