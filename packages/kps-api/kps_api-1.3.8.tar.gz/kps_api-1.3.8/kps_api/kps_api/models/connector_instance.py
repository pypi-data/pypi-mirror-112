# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.connector_parameters_values import ConnectorParametersValues  # noqa: F401,E501


class ConnectorInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connector_class_id': 'str',
        'description': 'str',
        'id': 'str',
        'name': 'str',
        'project_id': 'str',
        'static_parameters': 'ConnectorParametersValues'
    }

    attribute_map = {
        'connector_class_id': 'connectorClassID',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'project_id': 'projectId',
        'static_parameters': 'staticParameters'
    }

    def __init__(self, connector_class_id=None, description=None, id=None, name=None, project_id=None, static_parameters=None):  # noqa: E501
        """ConnectorInstance - a model defined in Swagger"""  # noqa: E501
        self._connector_class_id = None
        self._description = None
        self._id = None
        self._name = None
        self._project_id = None
        self._static_parameters = None
        self.discriminator = None
        self.connector_class_id = connector_class_id
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        self.name = name
        self.project_id = project_id
        if static_parameters is not None:
            self.static_parameters = static_parameters

    @property
    def connector_class_id(self):
        """Gets the connector_class_id of this ConnectorInstance.  # noqa: E501


        :return: The connector_class_id of this ConnectorInstance.  # noqa: E501
        :rtype: str
        """
        return self._connector_class_id

    @connector_class_id.setter
    def connector_class_id(self, connector_class_id):
        """Sets the connector_class_id of this ConnectorInstance.


        :param connector_class_id: The connector_class_id of this ConnectorInstance.  # noqa: E501
        :type: str
        """
        if connector_class_id is None:
            raise ValueError("Invalid value for `connector_class_id`, must not be `None`")  # noqa: E501

        self._connector_class_id = connector_class_id

    @property
    def description(self):
        """Gets the description of this ConnectorInstance.  # noqa: E501


        :return: The description of this ConnectorInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConnectorInstance.


        :param description: The description of this ConnectorInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ConnectorInstance.  # noqa: E501

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :return: The id of this ConnectorInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorInstance.

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :param id: The id of this ConnectorInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ConnectorInstance.  # noqa: E501


        :return: The name of this ConnectorInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectorInstance.


        :param name: The name of this ConnectorInstance.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this ConnectorInstance.  # noqa: E501

        ID of parent project.  # noqa: E501

        :return: The project_id of this ConnectorInstance.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ConnectorInstance.

        ID of parent project.  # noqa: E501

        :param project_id: The project_id of this ConnectorInstance.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def static_parameters(self):
        """Gets the static_parameters of this ConnectorInstance.  # noqa: E501


        :return: The static_parameters of this ConnectorInstance.  # noqa: E501
        :rtype: ConnectorParametersValues
        """
        return self._static_parameters

    @static_parameters.setter
    def static_parameters(self, static_parameters):
        """Sets the static_parameters of this ConnectorInstance.


        :param static_parameters: The static_parameters of this ConnectorInstance.  # noqa: E501
        :type: ConnectorParametersValues
        """

        self._static_parameters = static_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectorInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
