# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from kps_api.api_client import ApiClient


class MLModelApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def m_l_model_create(self, body, authorization, **kwargs):  # noqa: E501
        """Create a machine learning model.  # noqa: E501

        Creates a machine learning model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_create(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MLModelMetadata body: (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :return: CreateDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.m_l_model_create_with_http_info(body, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.m_l_model_create_with_http_info(body, authorization, **kwargs)  # noqa: E501
            return data

    def m_l_model_create_with_http_info(self, body, authorization, **kwargs):  # noqa: E501
        """Create a machine learning model.  # noqa: E501

        Creates a machine learning model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_create_with_http_info(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MLModelMetadata body: (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :return: CreateDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method m_l_model_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `m_l_model_create`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `m_l_model_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/mlmodels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateDocumentResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def m_l_model_delete(self, id, authorization, **kwargs):  # noqa: E501
        """Delete a machine learning model  by its ID.  # noqa: E501

        Deletes a machine learning model by its given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_delete(id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :return: DeleteDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.m_l_model_delete_with_http_info(id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.m_l_model_delete_with_http_info(id, authorization, **kwargs)  # noqa: E501
            return data

    def m_l_model_delete_with_http_info(self, id, authorization, **kwargs):  # noqa: E501
        """Delete a machine learning model  by its ID.  # noqa: E501

        Deletes a machine learning model by its given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_delete_with_http_info(id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :return: DeleteDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method m_l_model_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `m_l_model_delete`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `m_l_model_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/mlmodels/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteDocumentResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def m_l_model_get(self, id, authorization, **kwargs):  # noqa: E501
        """Get machine learning model by its ID.  # noqa: E501

        Retrieves a machine learning model by its given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_get(id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :return: MLModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.m_l_model_get_with_http_info(id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.m_l_model_get_with_http_info(id, authorization, **kwargs)  # noqa: E501
            return data

    def m_l_model_get_with_http_info(self, id, authorization, **kwargs):  # noqa: E501
        """Get machine learning model by its ID.  # noqa: E501

        Retrieves a machine learning model by its given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_get_with_http_info(id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :return: MLModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method m_l_model_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `m_l_model_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `m_l_model_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/mlmodels/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MLModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def m_l_model_list(self, authorization, **kwargs):  # noqa: E501
        """Lists machine learning models.  # noqa: E501

        Retrieve all machine learning models.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_list(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :return: MLModelListResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.m_l_model_list_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.m_l_model_list_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def m_l_model_list_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Lists machine learning models.  # noqa: E501

        Retrieve all machine learning models.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_list_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :return: MLModelListResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'page_index', 'page_size', 'order_by', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method m_l_model_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `m_l_model_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
            collection_formats['orderBy'] = 'csv'  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/mlmodels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MLModelListResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def m_l_model_update(self, body, authorization, id, **kwargs):  # noqa: E501
        """Update a machine learning model by its ID.  # noqa: E501

        Updates a machine learning model by its given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_update(body, authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MLModelMetadata body: (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :param str id: ID of the entity (required)
        :return: UpdateDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.m_l_model_update_with_http_info(body, authorization, id, **kwargs)  # noqa: E501
        else:
            (data) = self.m_l_model_update_with_http_info(body, authorization, id, **kwargs)  # noqa: E501
            return data

    def m_l_model_update_with_http_info(self, body, authorization, id, **kwargs):  # noqa: E501
        """Update a machine learning model by its ID.  # noqa: E501

        Updates a machine learning model by its given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_update_with_http_info(body, authorization, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MLModelMetadata body: (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :param str id: ID of the entity (required)
        :return: UpdateDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method m_l_model_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `m_l_model_update`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `m_l_model_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `m_l_model_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/mlmodels/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateDocumentResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def m_l_model_version_create(self, payload, authorization, model_version, id, **kwargs):  # noqa: E501
        """Create a new version of the machine learning model by its ID.  # noqa: E501

        Create a new version of the machine learning model by its given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_version_create(payload, authorization, model_version, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file payload: (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :param int model_version: Model version, a positive integer. (required)
        :param str id: ID of the entity (required)
        :param str description: Model version description.
        :return: CreateDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.m_l_model_version_create_with_http_info(payload, authorization, model_version, id, **kwargs)  # noqa: E501
        else:
            (data) = self.m_l_model_version_create_with_http_info(payload, authorization, model_version, id, **kwargs)  # noqa: E501
            return data

    def m_l_model_version_create_with_http_info(self, payload, authorization, model_version, id, **kwargs):  # noqa: E501
        """Create a new version of the machine learning model by its ID.  # noqa: E501

        Create a new version of the machine learning model by its given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_version_create_with_http_info(payload, authorization, model_version, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file payload: (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :param int model_version: Model version, a positive integer. (required)
        :param str id: ID of the entity (required)
        :param str description: Model version description.
        :return: CreateDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payload', 'authorization', 'model_version', 'id', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method m_l_model_version_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payload' is set
        if ('payload' not in params or
                params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `m_l_model_version_create`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `m_l_model_version_create`")  # noqa: E501
        # verify the required parameter 'model_version' is set
        if ('model_version' not in params or
                params['model_version'] is None):
            raise ValueError("Missing the required parameter `model_version` when calling `m_l_model_version_create`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `m_l_model_version_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'model_version' in params:
            query_params.append(('model_version', params['model_version']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'payload' in params:
            local_var_files['Payload'] = params['payload']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/mlmodels/{id}/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateDocumentResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def m_l_model_version_delete(self, id, model_version, authorization, **kwargs):  # noqa: E501
        """Delete the version of the machine learning model by its ID.  # noqa: E501

        Deletes the version of the machine learning model by machine learning model ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_version_delete(id, model_version, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param int model_version: Model version, a positive integer. (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :return: DeleteDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.m_l_model_version_delete_with_http_info(id, model_version, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.m_l_model_version_delete_with_http_info(id, model_version, authorization, **kwargs)  # noqa: E501
            return data

    def m_l_model_version_delete_with_http_info(self, id, model_version, authorization, **kwargs):  # noqa: E501
        """Delete the version of the machine learning model by its ID.  # noqa: E501

        Deletes the version of the machine learning model by machine learning model ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_version_delete_with_http_info(id, model_version, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param int model_version: Model version, a positive integer. (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :return: DeleteDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model_version', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method m_l_model_version_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `m_l_model_version_delete`")  # noqa: E501
        # verify the required parameter 'model_version' is set
        if ('model_version' not in params or
                params['model_version'] is None):
            raise ValueError("Missing the required parameter `model_version` when calling `m_l_model_version_delete`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `m_l_model_version_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'model_version' in params:
            path_params['model_version'] = params['model_version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/mlmodels/{id}/versions/{model_version}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteDocumentResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def m_l_model_version_update(self, id, model_version, authorization, **kwargs):  # noqa: E501
        """Update the version of the machine learning model by its ID.  # noqa: E501

        Updates the version of the machine learning model by machine learning model ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_version_update(id, model_version, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param int model_version: Model version, a positive integer. (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :param str description: Model version description.
        :return: UpdateDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.m_l_model_version_update_with_http_info(id, model_version, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.m_l_model_version_update_with_http_info(id, model_version, authorization, **kwargs)  # noqa: E501
            return data

    def m_l_model_version_update_with_http_info(self, id, model_version, authorization, **kwargs):  # noqa: E501
        """Update the version of the machine learning model by its ID.  # noqa: E501

        Updates the version of the machine learning model by machine learning model ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_version_update_with_http_info(id, model_version, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param int model_version: Model version, a positive integer. (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :param str description: Model version description.
        :return: UpdateDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model_version', 'authorization', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method m_l_model_version_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `m_l_model_version_update`")  # noqa: E501
        # verify the required parameter 'model_version' is set
        if ('model_version' not in params or
                params['model_version'] is None):
            raise ValueError("Missing the required parameter `model_version` when calling `m_l_model_version_update`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `m_l_model_version_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'model_version' in params:
            path_params['model_version'] = params['model_version']  # noqa: E501

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/mlmodels/{id}/versions/{model_version}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateDocumentResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def m_l_model_version_url_get(self, id, model_version, authorization, **kwargs):  # noqa: E501
        """Get a pre-signed URL for the machine learning model according to its ID and version.  # noqa: E501

        Retrieves a pre-signed URL for the machine learning model according to its ID and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_version_url_get(id, model_version, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param int model_version: Model version, a positive integer. (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :param int expiration_duration: Model URL expiration duration in minutes.
        :return: MLModelVersionURLGetResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.m_l_model_version_url_get_with_http_info(id, model_version, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.m_l_model_version_url_get_with_http_info(id, model_version, authorization, **kwargs)  # noqa: E501
            return data

    def m_l_model_version_url_get_with_http_info(self, id, model_version, authorization, **kwargs):  # noqa: E501
        """Get a pre-signed URL for the machine learning model according to its ID and version.  # noqa: E501

        Retrieves a pre-signed URL for the machine learning model according to its ID and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.m_l_model_version_url_get_with_http_info(id, model_version, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the entity (required)
        :param int model_version: Model version, a positive integer. (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :param int expiration_duration: Model URL expiration duration in minutes.
        :return: MLModelVersionURLGetResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model_version', 'authorization', 'expiration_duration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method m_l_model_version_url_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `m_l_model_version_url_get`")  # noqa: E501
        # verify the required parameter 'model_version' is set
        if ('model_version' not in params or
                params['model_version'] is None):
            raise ValueError("Missing the required parameter `model_version` when calling `m_l_model_version_url_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `m_l_model_version_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'model_version' in params:
            path_params['model_version'] = params['model_version']  # noqa: E501

        query_params = []
        if 'expiration_duration' in params:
            query_params.append(('expiration_duration', params['expiration_duration']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/mlmodels/{id}/versions/{model_version}/url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MLModelVersionURLGetResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_get_ml_models(self, project_id, authorization, **kwargs):  # noqa: E501
        """Lists project machine learning models by project ID.  # noqa: E501

        Retrieves all machine learning models for a project by its given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_ml_models(project_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: ID for the project (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :return: MLModelListResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_ml_models_with_http_info(project_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.project_get_ml_models_with_http_info(project_id, authorization, **kwargs)  # noqa: E501
            return data

    def project_get_ml_models_with_http_info(self, project_id, authorization, **kwargs):  # noqa: E501
        """Lists project machine learning models by project ID.  # noqa: E501

        Retrieves all machine learning models for a project by its given ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_ml_models_with_http_info(project_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: ID for the project (required)
        :param str authorization: Format: Bearer <token>, with <token> from the login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :return: MLModelListResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'authorization', 'page_index', 'page_size', 'order_by', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_ml_models" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `project_get_ml_models`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `project_get_ml_models`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
            collection_formats['orderBy'] = 'csv'  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/projects/{projectId}/mlmodels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MLModelListResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
