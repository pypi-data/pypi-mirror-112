# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EdgeDeviceInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifacts': 'dict(str, object)',
        'cluster_id': 'str',
        'connected': 'bool',
        'cpu_usage': 'str',
        'device_id': 'str',
        'edge_build_num': 'str',
        'edge_version': 'str',
        'gpu_info': 'str',
        'gpu_usage': 'str',
        'health_bits': 'dict(str, bool)',
        'healthy': 'bool',
        'id': 'str',
        'kube_version': 'str',
        'memory_free_kb': 'str',
        'num_cpu': 'str',
        'onboarded': 'bool',
        'os_version': 'str',
        'storage_free_kb': 'str',
        'total_memory_kb': 'str',
        'total_storage_kb': 'str'
    }

    attribute_map = {
        'artifacts': 'artifacts',
        'cluster_id': 'clusterId',
        'connected': 'connected',
        'cpu_usage': 'cpuUsage',
        'device_id': 'deviceId',
        'edge_build_num': 'edgeBuildNum',
        'edge_version': 'edgeVersion',
        'gpu_info': 'gpuInfo',
        'gpu_usage': 'gpuUsage',
        'health_bits': 'healthBits',
        'healthy': 'healthy',
        'id': 'id',
        'kube_version': 'kubeVersion',
        'memory_free_kb': 'memoryFreeKB',
        'num_cpu': 'numCpu',
        'onboarded': 'onboarded',
        'os_version': 'osVersion',
        'storage_free_kb': 'storageFreeKB',
        'total_memory_kb': 'totalMemoryKB',
        'total_storage_kb': 'totalStorageKB'
    }

    def __init__(self, artifacts=None, cluster_id=None, connected=None, cpu_usage=None, device_id=None, edge_build_num=None, edge_version=None, gpu_info=None, gpu_usage=None, health_bits=None, healthy=None, id=None, kube_version=None, memory_free_kb=None, num_cpu=None, onboarded=None, os_version=None, storage_free_kb=None, total_memory_kb=None, total_storage_kb=None):  # noqa: E501
        """EdgeDeviceInfo - a model defined in Swagger"""  # noqa: E501
        self._artifacts = None
        self._cluster_id = None
        self._connected = None
        self._cpu_usage = None
        self._device_id = None
        self._edge_build_num = None
        self._edge_version = None
        self._gpu_info = None
        self._gpu_usage = None
        self._health_bits = None
        self._healthy = None
        self._id = None
        self._kube_version = None
        self._memory_free_kb = None
        self._num_cpu = None
        self._onboarded = None
        self._os_version = None
        self._storage_free_kb = None
        self._total_memory_kb = None
        self._total_storage_kb = None
        self.discriminator = None
        if artifacts is not None:
            self.artifacts = artifacts
        self.cluster_id = cluster_id
        if connected is not None:
            self.connected = connected
        if cpu_usage is not None:
            self.cpu_usage = cpu_usage
        if device_id is not None:
            self.device_id = device_id
        if edge_build_num is not None:
            self.edge_build_num = edge_build_num
        if edge_version is not None:
            self.edge_version = edge_version
        if gpu_info is not None:
            self.gpu_info = gpu_info
        if gpu_usage is not None:
            self.gpu_usage = gpu_usage
        if health_bits is not None:
            self.health_bits = health_bits
        if healthy is not None:
            self.healthy = healthy
        if id is not None:
            self.id = id
        if kube_version is not None:
            self.kube_version = kube_version
        if memory_free_kb is not None:
            self.memory_free_kb = memory_free_kb
        if num_cpu is not None:
            self.num_cpu = num_cpu
        if onboarded is not None:
            self.onboarded = onboarded
        if os_version is not None:
            self.os_version = os_version
        if storage_free_kb is not None:
            self.storage_free_kb = storage_free_kb
        if total_memory_kb is not None:
            self.total_memory_kb = total_memory_kb
        if total_storage_kb is not None:
            self.total_storage_kb = total_storage_kb

    @property
    def artifacts(self):
        """Gets the artifacts of this EdgeDeviceInfo.  # noqa: E501

        Artifacts is a json object for passing edge ip and service ports  # noqa: E501

        :return: The artifacts of this EdgeDeviceInfo.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this EdgeDeviceInfo.

        Artifacts is a json object for passing edge ip and service ports  # noqa: E501

        :param artifacts: The artifacts of this EdgeDeviceInfo.  # noqa: E501
        :type: dict(str, object)
        """

        self._artifacts = artifacts

    @property
    def cluster_id(self):
        """Gets the cluster_id of this EdgeDeviceInfo.  # noqa: E501

        ID of the cluster this entity belongs to  # noqa: E501

        :return: The cluster_id of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this EdgeDeviceInfo.

        ID of the cluster this entity belongs to  # noqa: E501

        :param cluster_id: The cluster_id of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def connected(self):
        """Gets the connected of this EdgeDeviceInfo.  # noqa: E501


        :return: The connected of this EdgeDeviceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this EdgeDeviceInfo.


        :param connected: The connected of this EdgeDeviceInfo.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def cpu_usage(self):
        """Gets the cpu_usage of this EdgeDeviceInfo.  # noqa: E501

        Edge CPU usage.  # noqa: E501

        :return: The cpu_usage of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage):
        """Sets the cpu_usage of this EdgeDeviceInfo.

        Edge CPU usage.  # noqa: E501

        :param cpu_usage: The cpu_usage of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._cpu_usage = cpu_usage

    @property
    def device_id(self):
        """Gets the device_id of this EdgeDeviceInfo.  # noqa: E501


        :return: The device_id of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this EdgeDeviceInfo.


        :param device_id: The device_id of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def edge_build_num(self):
        """Gets the edge_build_num of this EdgeDeviceInfo.  # noqa: E501

        Edge build number.  # noqa: E501

        :return: The edge_build_num of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._edge_build_num

    @edge_build_num.setter
    def edge_build_num(self, edge_build_num):
        """Sets the edge_build_num of this EdgeDeviceInfo.

        Edge build number.  # noqa: E501

        :param edge_build_num: The edge_build_num of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._edge_build_num = edge_build_num

    @property
    def edge_version(self):
        """Gets the edge_version of this EdgeDeviceInfo.  # noqa: E501

        Edge version.  # noqa: E501

        :return: The edge_version of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._edge_version

    @edge_version.setter
    def edge_version(self, edge_version):
        """Sets the edge_version of this EdgeDeviceInfo.

        Edge version.  # noqa: E501

        :param edge_version: The edge_version of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._edge_version = edge_version

    @property
    def gpu_info(self):
        """Gets the gpu_info of this EdgeDeviceInfo.  # noqa: E501

        Information about GPUs associated with the edge.  # noqa: E501

        :return: The gpu_info of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._gpu_info

    @gpu_info.setter
    def gpu_info(self, gpu_info):
        """Sets the gpu_info of this EdgeDeviceInfo.

        Information about GPUs associated with the edge.  # noqa: E501

        :param gpu_info: The gpu_info of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._gpu_info = gpu_info

    @property
    def gpu_usage(self):
        """Gets the gpu_usage of this EdgeDeviceInfo.  # noqa: E501

        Edge GPU Usage.  # noqa: E501

        :return: The gpu_usage of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._gpu_usage

    @gpu_usage.setter
    def gpu_usage(self, gpu_usage):
        """Sets the gpu_usage of this EdgeDeviceInfo.

        Edge GPU Usage.  # noqa: E501

        :param gpu_usage: The gpu_usage of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._gpu_usage = gpu_usage

    @property
    def health_bits(self):
        """Gets the health_bits of this EdgeDeviceInfo.  # noqa: E501


        :return: The health_bits of this EdgeDeviceInfo.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._health_bits

    @health_bits.setter
    def health_bits(self, health_bits):
        """Sets the health_bits of this EdgeDeviceInfo.


        :param health_bits: The health_bits of this EdgeDeviceInfo.  # noqa: E501
        :type: dict(str, bool)
        """

        self._health_bits = health_bits

    @property
    def healthy(self):
        """Gets the healthy of this EdgeDeviceInfo.  # noqa: E501


        :return: The healthy of this EdgeDeviceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """Sets the healthy of this EdgeDeviceInfo.


        :param healthy: The healthy of this EdgeDeviceInfo.  # noqa: E501
        :type: bool
        """

        self._healthy = healthy

    @property
    def id(self):
        """Gets the id of this EdgeDeviceInfo.  # noqa: E501

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :return: The id of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdgeDeviceInfo.

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :param id: The id of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def kube_version(self):
        """Gets the kube_version of this EdgeDeviceInfo.  # noqa: E501

        Edge Kubernetes version.  # noqa: E501

        :return: The kube_version of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._kube_version

    @kube_version.setter
    def kube_version(self, kube_version):
        """Sets the kube_version of this EdgeDeviceInfo.

        Edge Kubernetes version.  # noqa: E501

        :param kube_version: The kube_version of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._kube_version = kube_version

    @property
    def memory_free_kb(self):
        """Gets the memory_free_kb of this EdgeDeviceInfo.  # noqa: E501

        Free (available) edge memory in KB.  # noqa: E501

        :return: The memory_free_kb of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._memory_free_kb

    @memory_free_kb.setter
    def memory_free_kb(self, memory_free_kb):
        """Sets the memory_free_kb of this EdgeDeviceInfo.

        Free (available) edge memory in KB.  # noqa: E501

        :param memory_free_kb: The memory_free_kb of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._memory_free_kb = memory_free_kb

    @property
    def num_cpu(self):
        """Gets the num_cpu of this EdgeDeviceInfo.  # noqa: E501

        Number of CPUs assigned to the edge.  # noqa: E501

        :return: The num_cpu of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._num_cpu

    @num_cpu.setter
    def num_cpu(self, num_cpu):
        """Sets the num_cpu of this EdgeDeviceInfo.

        Number of CPUs assigned to the edge.  # noqa: E501

        :param num_cpu: The num_cpu of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._num_cpu = num_cpu

    @property
    def onboarded(self):
        """Gets the onboarded of this EdgeDeviceInfo.  # noqa: E501


        :return: The onboarded of this EdgeDeviceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._onboarded

    @onboarded.setter
    def onboarded(self, onboarded):
        """Sets the onboarded of this EdgeDeviceInfo.


        :param onboarded: The onboarded of this EdgeDeviceInfo.  # noqa: E501
        :type: bool
        """

        self._onboarded = onboarded

    @property
    def os_version(self):
        """Gets the os_version of this EdgeDeviceInfo.  # noqa: E501

        Edge OS version  # noqa: E501

        :return: The os_version of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this EdgeDeviceInfo.

        Edge OS version  # noqa: E501

        :param os_version: The os_version of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def storage_free_kb(self):
        """Gets the storage_free_kb of this EdgeDeviceInfo.  # noqa: E501

        Free (available) edge storage in KB.  # noqa: E501

        :return: The storage_free_kb of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._storage_free_kb

    @storage_free_kb.setter
    def storage_free_kb(self, storage_free_kb):
        """Sets the storage_free_kb of this EdgeDeviceInfo.

        Free (available) edge storage in KB.  # noqa: E501

        :param storage_free_kb: The storage_free_kb of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._storage_free_kb = storage_free_kb

    @property
    def total_memory_kb(self):
        """Gets the total_memory_kb of this EdgeDeviceInfo.  # noqa: E501

        Total edge memory in KB.  # noqa: E501

        :return: The total_memory_kb of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._total_memory_kb

    @total_memory_kb.setter
    def total_memory_kb(self, total_memory_kb):
        """Sets the total_memory_kb of this EdgeDeviceInfo.

        Total edge memory in KB.  # noqa: E501

        :param total_memory_kb: The total_memory_kb of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._total_memory_kb = total_memory_kb

    @property
    def total_storage_kb(self):
        """Gets the total_storage_kb of this EdgeDeviceInfo.  # noqa: E501

        Total edge storage capacity in KB.  # noqa: E501

        :return: The total_storage_kb of this EdgeDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._total_storage_kb

    @total_storage_kb.setter
    def total_storage_kb(self, total_storage_kb):
        """Sets the total_storage_kb of this EdgeDeviceInfo.

        Total edge storage capacity in KB.  # noqa: E501

        :param total_storage_kb: The total_storage_kb of this EdgeDeviceInfo.  # noqa: E501
        :type: str
        """

        self._total_storage_kb = total_storage_kb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeDeviceInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeDeviceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
