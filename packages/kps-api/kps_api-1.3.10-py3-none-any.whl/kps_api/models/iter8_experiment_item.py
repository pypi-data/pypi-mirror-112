# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Iter8ExperimentItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assessment_conclusion': 'list[str]',
        'baseline': 'str',
        'baseline_percentage': 'int',
        'candidate': 'str',
        'candidate_percentage': 'int',
        'created_at': 'int',
        'ended_at': 'int',
        'name': 'str',
        'namespace': 'str',
        'phase': 'str',
        'started_at': 'int',
        'status': 'str',
        'target_service': 'str',
        'target_service_namespace': 'str'
    }

    attribute_map = {
        'assessment_conclusion': 'assessmentConclusion',
        'baseline': 'baseline',
        'baseline_percentage': 'baselinePercentage',
        'candidate': 'candidate',
        'candidate_percentage': 'candidatePercentage',
        'created_at': 'createdAt',
        'ended_at': 'endedAt',
        'name': 'name',
        'namespace': 'namespace',
        'phase': 'phase',
        'started_at': 'startedAt',
        'status': 'status',
        'target_service': 'targetService',
        'target_service_namespace': 'targetServiceNamespace'
    }

    def __init__(self, assessment_conclusion=None, baseline=None, baseline_percentage=None, candidate=None, candidate_percentage=None, created_at=None, ended_at=None, name=None, namespace=None, phase=None, started_at=None, status=None, target_service=None, target_service_namespace=None):  # noqa: E501
        """Iter8ExperimentItem - a model defined in Swagger"""  # noqa: E501
        self._assessment_conclusion = None
        self._baseline = None
        self._baseline_percentage = None
        self._candidate = None
        self._candidate_percentage = None
        self._created_at = None
        self._ended_at = None
        self._name = None
        self._namespace = None
        self._phase = None
        self._started_at = None
        self._status = None
        self._target_service = None
        self._target_service_namespace = None
        self.discriminator = None
        if assessment_conclusion is not None:
            self.assessment_conclusion = assessment_conclusion
        if baseline is not None:
            self.baseline = baseline
        if baseline_percentage is not None:
            self.baseline_percentage = baseline_percentage
        if candidate is not None:
            self.candidate = candidate
        if candidate_percentage is not None:
            self.candidate_percentage = candidate_percentage
        if created_at is not None:
            self.created_at = created_at
        if ended_at is not None:
            self.ended_at = ended_at
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if phase is not None:
            self.phase = phase
        if started_at is not None:
            self.started_at = started_at
        if status is not None:
            self.status = status
        if target_service is not None:
            self.target_service = target_service
        if target_service_namespace is not None:
            self.target_service_namespace = target_service_namespace

    @property
    def assessment_conclusion(self):
        """Gets the assessment_conclusion of this Iter8ExperimentItem.  # noqa: E501


        :return: The assessment_conclusion of this Iter8ExperimentItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._assessment_conclusion

    @assessment_conclusion.setter
    def assessment_conclusion(self, assessment_conclusion):
        """Sets the assessment_conclusion of this Iter8ExperimentItem.


        :param assessment_conclusion: The assessment_conclusion of this Iter8ExperimentItem.  # noqa: E501
        :type: list[str]
        """

        self._assessment_conclusion = assessment_conclusion

    @property
    def baseline(self):
        """Gets the baseline of this Iter8ExperimentItem.  # noqa: E501


        :return: The baseline of this Iter8ExperimentItem.  # noqa: E501
        :rtype: str
        """
        return self._baseline

    @baseline.setter
    def baseline(self, baseline):
        """Sets the baseline of this Iter8ExperimentItem.


        :param baseline: The baseline of this Iter8ExperimentItem.  # noqa: E501
        :type: str
        """

        self._baseline = baseline

    @property
    def baseline_percentage(self):
        """Gets the baseline_percentage of this Iter8ExperimentItem.  # noqa: E501


        :return: The baseline_percentage of this Iter8ExperimentItem.  # noqa: E501
        :rtype: int
        """
        return self._baseline_percentage

    @baseline_percentage.setter
    def baseline_percentage(self, baseline_percentage):
        """Sets the baseline_percentage of this Iter8ExperimentItem.


        :param baseline_percentage: The baseline_percentage of this Iter8ExperimentItem.  # noqa: E501
        :type: int
        """

        self._baseline_percentage = baseline_percentage

    @property
    def candidate(self):
        """Gets the candidate of this Iter8ExperimentItem.  # noqa: E501


        :return: The candidate of this Iter8ExperimentItem.  # noqa: E501
        :rtype: str
        """
        return self._candidate

    @candidate.setter
    def candidate(self, candidate):
        """Sets the candidate of this Iter8ExperimentItem.


        :param candidate: The candidate of this Iter8ExperimentItem.  # noqa: E501
        :type: str
        """

        self._candidate = candidate

    @property
    def candidate_percentage(self):
        """Gets the candidate_percentage of this Iter8ExperimentItem.  # noqa: E501


        :return: The candidate_percentage of this Iter8ExperimentItem.  # noqa: E501
        :rtype: int
        """
        return self._candidate_percentage

    @candidate_percentage.setter
    def candidate_percentage(self, candidate_percentage):
        """Sets the candidate_percentage of this Iter8ExperimentItem.


        :param candidate_percentage: The candidate_percentage of this Iter8ExperimentItem.  # noqa: E501
        :type: int
        """

        self._candidate_percentage = candidate_percentage

    @property
    def created_at(self):
        """Gets the created_at of this Iter8ExperimentItem.  # noqa: E501


        :return: The created_at of this Iter8ExperimentItem.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Iter8ExperimentItem.


        :param created_at: The created_at of this Iter8ExperimentItem.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def ended_at(self):
        """Gets the ended_at of this Iter8ExperimentItem.  # noqa: E501


        :return: The ended_at of this Iter8ExperimentItem.  # noqa: E501
        :rtype: int
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this Iter8ExperimentItem.


        :param ended_at: The ended_at of this Iter8ExperimentItem.  # noqa: E501
        :type: int
        """

        self._ended_at = ended_at

    @property
    def name(self):
        """Gets the name of this Iter8ExperimentItem.  # noqa: E501


        :return: The name of this Iter8ExperimentItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Iter8ExperimentItem.


        :param name: The name of this Iter8ExperimentItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this Iter8ExperimentItem.  # noqa: E501


        :return: The namespace of this Iter8ExperimentItem.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Iter8ExperimentItem.


        :param namespace: The namespace of this Iter8ExperimentItem.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def phase(self):
        """Gets the phase of this Iter8ExperimentItem.  # noqa: E501


        :return: The phase of this Iter8ExperimentItem.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this Iter8ExperimentItem.


        :param phase: The phase of this Iter8ExperimentItem.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def started_at(self):
        """Gets the started_at of this Iter8ExperimentItem.  # noqa: E501


        :return: The started_at of this Iter8ExperimentItem.  # noqa: E501
        :rtype: int
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Iter8ExperimentItem.


        :param started_at: The started_at of this Iter8ExperimentItem.  # noqa: E501
        :type: int
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this Iter8ExperimentItem.  # noqa: E501


        :return: The status of this Iter8ExperimentItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Iter8ExperimentItem.


        :param status: The status of this Iter8ExperimentItem.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def target_service(self):
        """Gets the target_service of this Iter8ExperimentItem.  # noqa: E501


        :return: The target_service of this Iter8ExperimentItem.  # noqa: E501
        :rtype: str
        """
        return self._target_service

    @target_service.setter
    def target_service(self, target_service):
        """Sets the target_service of this Iter8ExperimentItem.


        :param target_service: The target_service of this Iter8ExperimentItem.  # noqa: E501
        :type: str
        """

        self._target_service = target_service

    @property
    def target_service_namespace(self):
        """Gets the target_service_namespace of this Iter8ExperimentItem.  # noqa: E501


        :return: The target_service_namespace of this Iter8ExperimentItem.  # noqa: E501
        :rtype: str
        """
        return self._target_service_namespace

    @target_service_namespace.setter
    def target_service_namespace(self, target_service_namespace):
        """Sets the target_service_namespace of this Iter8ExperimentItem.


        :param target_service_namespace: The target_service_namespace of this Iter8ExperimentItem.  # noqa: E501
        :type: str
        """

        self._target_service_namespace = target_service_namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Iter8ExperimentItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Iter8ExperimentItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
