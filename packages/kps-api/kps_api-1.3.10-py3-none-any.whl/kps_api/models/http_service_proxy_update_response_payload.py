# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class HTTPServiceProxyUpdateResponsePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dns_url': 'str',
        'expires_at': 'datetime',
        'id': 'str',
        'password': 'str',
        'url': 'str',
        'username': 'str'
    }

    attribute_map = {
        'dns_url': 'dnsURL',
        'expires_at': 'expiresAt',
        'id': 'id',
        'password': 'password',
        'url': 'url',
        'username': 'username'
    }

    def __init__(self, dns_url=None, expires_at=None, id=None, password=None, url=None, username=None):  # noqa: E501
        """HTTPServiceProxyUpdateResponsePayload - a model defined in Swagger"""  # noqa: E501
        self._dns_url = None
        self._expires_at = None
        self._id = None
        self._password = None
        self._url = None
        self._username = None
        self.discriminator = None
        self.dns_url = dns_url
        if expires_at is not None:
            self.expires_at = expires_at
        self.id = id
        if password is not None:
            self.password = password
        self.url = url
        if username is not None:
            self.username = username

    @property
    def dns_url(self):
        """Gets the dns_url of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501

        DNS URL of the service proxy endpoint Valid only if setupDNS is set to true when creating the service proxy  # noqa: E501

        :return: The dns_url of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501
        :rtype: str
        """
        return self._dns_url

    @dns_url.setter
    def dns_url(self, dns_url):
        """Sets the dns_url of this HTTPServiceProxyUpdateResponsePayload.

        DNS URL of the service proxy endpoint Valid only if setupDNS is set to true when creating the service proxy  # noqa: E501

        :param dns_url: The dns_url of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501
        :type: str
        """
        if dns_url is None:
            raise ValueError("Invalid value for `dns_url`, must not be `None`")  # noqa: E501

        self._dns_url = dns_url

    @property
    def expires_at(self):
        """Gets the expires_at of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501

        Expires at timestamp  # noqa: E501

        :return: The expires_at of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this HTTPServiceProxyUpdateResponsePayload.

        Expires at timestamp  # noqa: E501

        :param expires_at: The expires_at of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501

        ID of the entity  # noqa: E501

        :return: The id of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HTTPServiceProxyUpdateResponsePayload.

        ID of the entity  # noqa: E501

        :param id: The id of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def password(self):
        """Gets the password of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501

        Password to login to the service when setupBasicAuth=true.  # noqa: E501

        :return: The password of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this HTTPServiceProxyUpdateResponsePayload.

        Password to login to the service when setupBasicAuth=true.  # noqa: E501

        :param password: The password of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def url(self):
        """Gets the url of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501

        URL of the service proxy endpoint  # noqa: E501

        :return: The url of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HTTPServiceProxyUpdateResponsePayload.

        URL of the service proxy endpoint  # noqa: E501

        :param url: The url of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def username(self):
        """Gets the username of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501

        Username to login to the service when setupBasicAuth=true.  # noqa: E501

        :return: The username of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this HTTPServiceProxyUpdateResponsePayload.

        Username to login to the service when setupBasicAuth=true.  # noqa: E501

        :param username: The username of this HTTPServiceProxyUpdateResponsePayload.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HTTPServiceProxyUpdateResponsePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HTTPServiceProxyUpdateResponsePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
