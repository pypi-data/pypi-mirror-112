# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.container_info import ContainerInfo  # noqa: F401,E501
from kps_api.models.reference import Reference  # noqa: F401,E501


class Pod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotations': 'dict(str, str)',
        'app_label': 'bool',
        'containers': 'list[ContainerInfo]',
        'created_at': 'str',
        'created_by': 'list[Reference]',
        'istio_containers': 'list[ContainerInfo]',
        'istio_init_containers': 'list[ContainerInfo]',
        'labels': 'dict(str, str)',
        'name': 'str',
        'status': 'str',
        'version_label': 'bool'
    }

    attribute_map = {
        'annotations': 'annotations',
        'app_label': 'appLabel',
        'containers': 'containers',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'istio_containers': 'istioContainers',
        'istio_init_containers': 'istioInitContainers',
        'labels': 'labels',
        'name': 'name',
        'status': 'status',
        'version_label': 'versionLabel'
    }

    def __init__(self, annotations=None, app_label=None, containers=None, created_at=None, created_by=None, istio_containers=None, istio_init_containers=None, labels=None, name=None, status=None, version_label=None):  # noqa: E501
        """Pod - a model defined in Swagger"""  # noqa: E501
        self._annotations = None
        self._app_label = None
        self._containers = None
        self._created_at = None
        self._created_by = None
        self._istio_containers = None
        self._istio_init_containers = None
        self._labels = None
        self._name = None
        self._status = None
        self._version_label = None
        self.discriminator = None
        if annotations is not None:
            self.annotations = annotations
        if app_label is not None:
            self.app_label = app_label
        if containers is not None:
            self.containers = containers
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if istio_containers is not None:
            self.istio_containers = istio_containers
        if istio_init_containers is not None:
            self.istio_init_containers = istio_init_containers
        if labels is not None:
            self.labels = labels
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if version_label is not None:
            self.version_label = version_label

    @property
    def annotations(self):
        """Gets the annotations of this Pod.  # noqa: E501


        :return: The annotations of this Pod.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Pod.


        :param annotations: The annotations of this Pod.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def app_label(self):
        """Gets the app_label of this Pod.  # noqa: E501


        :return: The app_label of this Pod.  # noqa: E501
        :rtype: bool
        """
        return self._app_label

    @app_label.setter
    def app_label(self, app_label):
        """Sets the app_label of this Pod.


        :param app_label: The app_label of this Pod.  # noqa: E501
        :type: bool
        """

        self._app_label = app_label

    @property
    def containers(self):
        """Gets the containers of this Pod.  # noqa: E501


        :return: The containers of this Pod.  # noqa: E501
        :rtype: list[ContainerInfo]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this Pod.


        :param containers: The containers of this Pod.  # noqa: E501
        :type: list[ContainerInfo]
        """

        self._containers = containers

    @property
    def created_at(self):
        """Gets the created_at of this Pod.  # noqa: E501


        :return: The created_at of this Pod.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Pod.


        :param created_at: The created_at of this Pod.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Pod.  # noqa: E501


        :return: The created_by of this Pod.  # noqa: E501
        :rtype: list[Reference]
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Pod.


        :param created_by: The created_by of this Pod.  # noqa: E501
        :type: list[Reference]
        """

        self._created_by = created_by

    @property
    def istio_containers(self):
        """Gets the istio_containers of this Pod.  # noqa: E501


        :return: The istio_containers of this Pod.  # noqa: E501
        :rtype: list[ContainerInfo]
        """
        return self._istio_containers

    @istio_containers.setter
    def istio_containers(self, istio_containers):
        """Sets the istio_containers of this Pod.


        :param istio_containers: The istio_containers of this Pod.  # noqa: E501
        :type: list[ContainerInfo]
        """

        self._istio_containers = istio_containers

    @property
    def istio_init_containers(self):
        """Gets the istio_init_containers of this Pod.  # noqa: E501


        :return: The istio_init_containers of this Pod.  # noqa: E501
        :rtype: list[ContainerInfo]
        """
        return self._istio_init_containers

    @istio_init_containers.setter
    def istio_init_containers(self, istio_init_containers):
        """Sets the istio_init_containers of this Pod.


        :param istio_init_containers: The istio_init_containers of this Pod.  # noqa: E501
        :type: list[ContainerInfo]
        """

        self._istio_init_containers = istio_init_containers

    @property
    def labels(self):
        """Gets the labels of this Pod.  # noqa: E501


        :return: The labels of this Pod.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Pod.


        :param labels: The labels of this Pod.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Pod.  # noqa: E501


        :return: The name of this Pod.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pod.


        :param name: The name of this Pod.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Pod.  # noqa: E501


        :return: The status of this Pod.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Pod.


        :param status: The status of this Pod.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def version_label(self):
        """Gets the version_label of this Pod.  # noqa: E501


        :return: The version_label of this Pod.  # noqa: E501
        :rtype: bool
        """
        return self._version_label

    @version_label.setter
    def version_label(self, version_label):
        """Sets the version_label of this Pod.


        :param version_label: The version_label of this Pod.  # noqa: E501
        :type: bool
        """

        self._version_label = version_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
