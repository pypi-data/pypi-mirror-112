# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NutanixVolumesStorageProfileConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_services_ip': 'str',
        'data_services_port': 'int',
        'flash_mode': 'bool',
        'prism_element_cluster_port': 'int',
        'prism_element_cluster_vip': 'str',
        'prism_element_password': 'str',
        'prism_element_user_name': 'str',
        'storage_container_name': 'str'
    }

    attribute_map = {
        'data_services_ip': 'dataServicesIP',
        'data_services_port': 'dataServicesPort',
        'flash_mode': 'flashMode',
        'prism_element_cluster_port': 'prismElementClusterPort',
        'prism_element_cluster_vip': 'prismElementClusterVIP',
        'prism_element_password': 'prismElementPassword',
        'prism_element_user_name': 'prismElementUserName',
        'storage_container_name': 'storageContainerName'
    }

    def __init__(self, data_services_ip=None, data_services_port=None, flash_mode=None, prism_element_cluster_port=None, prism_element_cluster_vip=None, prism_element_password=None, prism_element_user_name=None, storage_container_name=None):  # noqa: E501
        """NutanixVolumesStorageProfileConfig - a model defined in Swagger"""  # noqa: E501
        self._data_services_ip = None
        self._data_services_port = None
        self._flash_mode = None
        self._prism_element_cluster_port = None
        self._prism_element_cluster_vip = None
        self._prism_element_password = None
        self._prism_element_user_name = None
        self._storage_container_name = None
        self.discriminator = None
        self.data_services_ip = data_services_ip
        self.data_services_port = data_services_port
        if flash_mode is not None:
            self.flash_mode = flash_mode
        self.prism_element_cluster_port = prism_element_cluster_port
        self.prism_element_cluster_vip = prism_element_cluster_vip
        self.prism_element_password = prism_element_password
        self.prism_element_user_name = prism_element_user_name
        self.storage_container_name = storage_container_name

    @property
    def data_services_ip(self):
        """Gets the data_services_ip of this NutanixVolumesStorageProfileConfig.  # noqa: E501


        :return: The data_services_ip of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :rtype: str
        """
        return self._data_services_ip

    @data_services_ip.setter
    def data_services_ip(self, data_services_ip):
        """Sets the data_services_ip of this NutanixVolumesStorageProfileConfig.


        :param data_services_ip: The data_services_ip of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :type: str
        """
        if data_services_ip is None:
            raise ValueError("Invalid value for `data_services_ip`, must not be `None`")  # noqa: E501

        self._data_services_ip = data_services_ip

    @property
    def data_services_port(self):
        """Gets the data_services_port of this NutanixVolumesStorageProfileConfig.  # noqa: E501


        :return: The data_services_port of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :rtype: int
        """
        return self._data_services_port

    @data_services_port.setter
    def data_services_port(self, data_services_port):
        """Sets the data_services_port of this NutanixVolumesStorageProfileConfig.


        :param data_services_port: The data_services_port of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :type: int
        """
        if data_services_port is None:
            raise ValueError("Invalid value for `data_services_port`, must not be `None`")  # noqa: E501

        self._data_services_port = data_services_port

    @property
    def flash_mode(self):
        """Gets the flash_mode of this NutanixVolumesStorageProfileConfig.  # noqa: E501


        :return: The flash_mode of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :rtype: bool
        """
        return self._flash_mode

    @flash_mode.setter
    def flash_mode(self, flash_mode):
        """Sets the flash_mode of this NutanixVolumesStorageProfileConfig.


        :param flash_mode: The flash_mode of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :type: bool
        """

        self._flash_mode = flash_mode

    @property
    def prism_element_cluster_port(self):
        """Gets the prism_element_cluster_port of this NutanixVolumesStorageProfileConfig.  # noqa: E501


        :return: The prism_element_cluster_port of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :rtype: int
        """
        return self._prism_element_cluster_port

    @prism_element_cluster_port.setter
    def prism_element_cluster_port(self, prism_element_cluster_port):
        """Sets the prism_element_cluster_port of this NutanixVolumesStorageProfileConfig.


        :param prism_element_cluster_port: The prism_element_cluster_port of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :type: int
        """
        if prism_element_cluster_port is None:
            raise ValueError("Invalid value for `prism_element_cluster_port`, must not be `None`")  # noqa: E501

        self._prism_element_cluster_port = prism_element_cluster_port

    @property
    def prism_element_cluster_vip(self):
        """Gets the prism_element_cluster_vip of this NutanixVolumesStorageProfileConfig.  # noqa: E501


        :return: The prism_element_cluster_vip of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :rtype: str
        """
        return self._prism_element_cluster_vip

    @prism_element_cluster_vip.setter
    def prism_element_cluster_vip(self, prism_element_cluster_vip):
        """Sets the prism_element_cluster_vip of this NutanixVolumesStorageProfileConfig.


        :param prism_element_cluster_vip: The prism_element_cluster_vip of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :type: str
        """
        if prism_element_cluster_vip is None:
            raise ValueError("Invalid value for `prism_element_cluster_vip`, must not be `None`")  # noqa: E501

        self._prism_element_cluster_vip = prism_element_cluster_vip

    @property
    def prism_element_password(self):
        """Gets the prism_element_password of this NutanixVolumesStorageProfileConfig.  # noqa: E501


        :return: The prism_element_password of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :rtype: str
        """
        return self._prism_element_password

    @prism_element_password.setter
    def prism_element_password(self, prism_element_password):
        """Sets the prism_element_password of this NutanixVolumesStorageProfileConfig.


        :param prism_element_password: The prism_element_password of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :type: str
        """
        if prism_element_password is None:
            raise ValueError("Invalid value for `prism_element_password`, must not be `None`")  # noqa: E501

        self._prism_element_password = prism_element_password

    @property
    def prism_element_user_name(self):
        """Gets the prism_element_user_name of this NutanixVolumesStorageProfileConfig.  # noqa: E501


        :return: The prism_element_user_name of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :rtype: str
        """
        return self._prism_element_user_name

    @prism_element_user_name.setter
    def prism_element_user_name(self, prism_element_user_name):
        """Sets the prism_element_user_name of this NutanixVolumesStorageProfileConfig.


        :param prism_element_user_name: The prism_element_user_name of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :type: str
        """
        if prism_element_user_name is None:
            raise ValueError("Invalid value for `prism_element_user_name`, must not be `None`")  # noqa: E501

        self._prism_element_user_name = prism_element_user_name

    @property
    def storage_container_name(self):
        """Gets the storage_container_name of this NutanixVolumesStorageProfileConfig.  # noqa: E501


        :return: The storage_container_name of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :rtype: str
        """
        return self._storage_container_name

    @storage_container_name.setter
    def storage_container_name(self, storage_container_name):
        """Sets the storage_container_name of this NutanixVolumesStorageProfileConfig.


        :param storage_container_name: The storage_container_name of this NutanixVolumesStorageProfileConfig.  # noqa: E501
        :type: str
        """
        if storage_container_name is None:
            raise ValueError("Invalid value for `storage_container_name`, must not be `None`")  # noqa: E501

        self._storage_container_name = storage_container_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NutanixVolumesStorageProfileConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NutanixVolumesStorageProfileConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
