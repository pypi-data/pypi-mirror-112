# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.connector_class_type import ConnectorClassType  # noqa: F401,E501
from kps_api.models.connector_parameters_schema import ConnectorParametersSchema  # noqa: F401,E501


class ConnectorClass(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config_parameter_schema': 'ConnectorParametersSchema',
        'connector_version': 'str',
        'description': 'str',
        'id': 'str',
        'min_svc_domain_version': 'str',
        'name': 'str',
        'static_parameter_schema': 'ConnectorParametersSchema',
        'stream_parameter_schema': 'ConnectorParametersSchema',
        'type': 'ConnectorClassType',
        'yaml_data': 'str'
    }

    attribute_map = {
        'config_parameter_schema': 'configParameterSchema',
        'connector_version': 'connectorVersion',
        'description': 'description',
        'id': 'id',
        'min_svc_domain_version': 'minSvcDomainVersion',
        'name': 'name',
        'static_parameter_schema': 'staticParameterSchema',
        'stream_parameter_schema': 'streamParameterSchema',
        'type': 'type',
        'yaml_data': 'yamlData'
    }

    def __init__(self, config_parameter_schema=None, connector_version=None, description=None, id=None, min_svc_domain_version=None, name=None, static_parameter_schema=None, stream_parameter_schema=None, type=None, yaml_data=None):  # noqa: E501
        """ConnectorClass - a model defined in Swagger"""  # noqa: E501
        self._config_parameter_schema = None
        self._connector_version = None
        self._description = None
        self._id = None
        self._min_svc_domain_version = None
        self._name = None
        self._static_parameter_schema = None
        self._stream_parameter_schema = None
        self._type = None
        self._yaml_data = None
        self.discriminator = None
        if config_parameter_schema is not None:
            self.config_parameter_schema = config_parameter_schema
        self.connector_version = connector_version
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if min_svc_domain_version is not None:
            self.min_svc_domain_version = min_svc_domain_version
        self.name = name
        if static_parameter_schema is not None:
            self.static_parameter_schema = static_parameter_schema
        if stream_parameter_schema is not None:
            self.stream_parameter_schema = stream_parameter_schema
        self.type = type
        self.yaml_data = yaml_data

    @property
    def config_parameter_schema(self):
        """Gets the config_parameter_schema of this ConnectorClass.  # noqa: E501


        :return: The config_parameter_schema of this ConnectorClass.  # noqa: E501
        :rtype: ConnectorParametersSchema
        """
        return self._config_parameter_schema

    @config_parameter_schema.setter
    def config_parameter_schema(self, config_parameter_schema):
        """Sets the config_parameter_schema of this ConnectorClass.


        :param config_parameter_schema: The config_parameter_schema of this ConnectorClass.  # noqa: E501
        :type: ConnectorParametersSchema
        """

        self._config_parameter_schema = config_parameter_schema

    @property
    def connector_version(self):
        """Gets the connector_version of this ConnectorClass.  # noqa: E501

        External version of a connector. It is possible to have multiple connectors with the same name, but different versions.  # noqa: E501

        :return: The connector_version of this ConnectorClass.  # noqa: E501
        :rtype: str
        """
        return self._connector_version

    @connector_version.setter
    def connector_version(self, connector_version):
        """Sets the connector_version of this ConnectorClass.

        External version of a connector. It is possible to have multiple connectors with the same name, but different versions.  # noqa: E501

        :param connector_version: The connector_version of this ConnectorClass.  # noqa: E501
        :type: str
        """
        if connector_version is None:
            raise ValueError("Invalid value for `connector_version`, must not be `None`")  # noqa: E501

        self._connector_version = connector_version

    @property
    def description(self):
        """Gets the description of this ConnectorClass.  # noqa: E501


        :return: The description of this ConnectorClass.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConnectorClass.


        :param description: The description of this ConnectorClass.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ConnectorClass.  # noqa: E501

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :return: The id of this ConnectorClass.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorClass.

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :param id: The id of this ConnectorClass.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def min_svc_domain_version(self):
        """Gets the min_svc_domain_version of this ConnectorClass.  # noqa: E501


        :return: The min_svc_domain_version of this ConnectorClass.  # noqa: E501
        :rtype: str
        """
        return self._min_svc_domain_version

    @min_svc_domain_version.setter
    def min_svc_domain_version(self, min_svc_domain_version):
        """Sets the min_svc_domain_version of this ConnectorClass.


        :param min_svc_domain_version: The min_svc_domain_version of this ConnectorClass.  # noqa: E501
        :type: str
        """

        self._min_svc_domain_version = min_svc_domain_version

    @property
    def name(self):
        """Gets the name of this ConnectorClass.  # noqa: E501


        :return: The name of this ConnectorClass.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectorClass.


        :param name: The name of this ConnectorClass.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def static_parameter_schema(self):
        """Gets the static_parameter_schema of this ConnectorClass.  # noqa: E501


        :return: The static_parameter_schema of this ConnectorClass.  # noqa: E501
        :rtype: ConnectorParametersSchema
        """
        return self._static_parameter_schema

    @static_parameter_schema.setter
    def static_parameter_schema(self, static_parameter_schema):
        """Sets the static_parameter_schema of this ConnectorClass.


        :param static_parameter_schema: The static_parameter_schema of this ConnectorClass.  # noqa: E501
        :type: ConnectorParametersSchema
        """

        self._static_parameter_schema = static_parameter_schema

    @property
    def stream_parameter_schema(self):
        """Gets the stream_parameter_schema of this ConnectorClass.  # noqa: E501


        :return: The stream_parameter_schema of this ConnectorClass.  # noqa: E501
        :rtype: ConnectorParametersSchema
        """
        return self._stream_parameter_schema

    @stream_parameter_schema.setter
    def stream_parameter_schema(self, stream_parameter_schema):
        """Sets the stream_parameter_schema of this ConnectorClass.


        :param stream_parameter_schema: The stream_parameter_schema of this ConnectorClass.  # noqa: E501
        :type: ConnectorParametersSchema
        """

        self._stream_parameter_schema = stream_parameter_schema

    @property
    def type(self):
        """Gets the type of this ConnectorClass.  # noqa: E501


        :return: The type of this ConnectorClass.  # noqa: E501
        :rtype: ConnectorClassType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectorClass.


        :param type: The type of this ConnectorClass.  # noqa: E501
        :type: ConnectorClassType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def yaml_data(self):
        """Gets the yaml_data of this ConnectorClass.  # noqa: E501

        The YAML content for the application.  # noqa: E501

        :return: The yaml_data of this ConnectorClass.  # noqa: E501
        :rtype: str
        """
        return self._yaml_data

    @yaml_data.setter
    def yaml_data(self, yaml_data):
        """Sets the yaml_data of this ConnectorClass.

        The YAML content for the application.  # noqa: E501

        :param yaml_data: The yaml_data of this ConnectorClass.  # noqa: E501
        :type: str
        """
        if yaml_data is None:
            raise ValueError("Invalid value for `yaml_data`, must not be `None`")  # noqa: E501

        self._yaml_data = yaml_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectorClass, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
