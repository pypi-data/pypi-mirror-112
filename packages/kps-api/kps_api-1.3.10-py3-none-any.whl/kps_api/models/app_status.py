# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.pod_metrics import PodMetrics  # noqa: F401,E501
from kps_api.models.pod_status import PodStatus  # noqa: F401,E501


class AppStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_list': 'list[str]',
        'pod_metrics_list': 'list[PodMetrics]',
        'pod_status_list': 'list[PodStatus]'
    }

    attribute_map = {
        'image_list': 'imageList',
        'pod_metrics_list': 'podMetricsList',
        'pod_status_list': 'podStatusList'
    }

    def __init__(self, image_list=None, pod_metrics_list=None, pod_status_list=None):  # noqa: E501
        """AppStatus - a model defined in Swagger"""  # noqa: E501
        self._image_list = None
        self._pod_metrics_list = None
        self._pod_status_list = None
        self.discriminator = None
        if image_list is not None:
            self.image_list = image_list
        if pod_metrics_list is not None:
            self.pod_metrics_list = pod_metrics_list
        self.pod_status_list = pod_status_list

    @property
    def image_list(self):
        """Gets the image_list of this AppStatus.  # noqa: E501


        :return: The image_list of this AppStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._image_list

    @image_list.setter
    def image_list(self, image_list):
        """Sets the image_list of this AppStatus.


        :param image_list: The image_list of this AppStatus.  # noqa: E501
        :type: list[str]
        """

        self._image_list = image_list

    @property
    def pod_metrics_list(self):
        """Gets the pod_metrics_list of this AppStatus.  # noqa: E501


        :return: The pod_metrics_list of this AppStatus.  # noqa: E501
        :rtype: list[PodMetrics]
        """
        return self._pod_metrics_list

    @pod_metrics_list.setter
    def pod_metrics_list(self, pod_metrics_list):
        """Sets the pod_metrics_list of this AppStatus.


        :param pod_metrics_list: The pod_metrics_list of this AppStatus.  # noqa: E501
        :type: list[PodMetrics]
        """

        self._pod_metrics_list = pod_metrics_list

    @property
    def pod_status_list(self):
        """Gets the pod_status_list of this AppStatus.  # noqa: E501


        :return: The pod_status_list of this AppStatus.  # noqa: E501
        :rtype: list[PodStatus]
        """
        return self._pod_status_list

    @pod_status_list.setter
    def pod_status_list(self, pod_status_list):
        """Sets the pod_status_list of this AppStatus.


        :param pod_status_list: The pod_status_list of this AppStatus.  # noqa: E501
        :type: list[PodStatus]
        """
        if pod_status_list is None:
            raise ValueError("Invalid value for `pod_status_list`, must not be `None`")  # noqa: E501

        self._pod_status_list = pod_status_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
