# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.ml_model_version_status import MLModelVersionStatus  # noqa: F401,E501


class MLModelStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'edge_id': 'str',
        'model_id': 'str',
        'model_status': 'list[MLModelVersionStatus]',
        'project_id': 'str',
        'tenant_id': 'str',
        'updated_at': 'datetime',
        'version': 'float'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'edge_id': 'edgeId',
        'model_id': 'modelId',
        'model_status': 'modelStatus',
        'project_id': 'projectId',
        'tenant_id': 'tenantId',
        'updated_at': 'updatedAt',
        'version': 'version'
    }

    def __init__(self, created_at=None, edge_id=None, model_id=None, model_status=None, project_id=None, tenant_id=None, updated_at=None, version=None):  # noqa: E501
        """MLModelStatus - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._edge_id = None
        self._model_id = None
        self._model_status = None
        self._project_id = None
        self._tenant_id = None
        self._updated_at = None
        self._version = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if edge_id is not None:
            self.edge_id = edge_id
        if model_id is not None:
            self.model_id = model_id
        if model_status is not None:
            self.model_status = model_status
        if project_id is not None:
            self.project_id = project_id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if updated_at is not None:
            self.updated_at = updated_at
        if version is not None:
            self.version = version

    @property
    def created_at(self):
        """Gets the created_at of this MLModelStatus.  # noqa: E501


        :return: The created_at of this MLModelStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MLModelStatus.


        :param created_at: The created_at of this MLModelStatus.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def edge_id(self):
        """Gets the edge_id of this MLModelStatus.  # noqa: E501


        :return: The edge_id of this MLModelStatus.  # noqa: E501
        :rtype: str
        """
        return self._edge_id

    @edge_id.setter
    def edge_id(self, edge_id):
        """Sets the edge_id of this MLModelStatus.


        :param edge_id: The edge_id of this MLModelStatus.  # noqa: E501
        :type: str
        """

        self._edge_id = edge_id

    @property
    def model_id(self):
        """Gets the model_id of this MLModelStatus.  # noqa: E501


        :return: The model_id of this MLModelStatus.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this MLModelStatus.


        :param model_id: The model_id of this MLModelStatus.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def model_status(self):
        """Gets the model_status of this MLModelStatus.  # noqa: E501


        :return: The model_status of this MLModelStatus.  # noqa: E501
        :rtype: list[MLModelVersionStatus]
        """
        return self._model_status

    @model_status.setter
    def model_status(self, model_status):
        """Sets the model_status of this MLModelStatus.


        :param model_status: The model_status of this MLModelStatus.  # noqa: E501
        :type: list[MLModelVersionStatus]
        """

        self._model_status = model_status

    @property
    def project_id(self):
        """Gets the project_id of this MLModelStatus.  # noqa: E501


        :return: The project_id of this MLModelStatus.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this MLModelStatus.


        :param project_id: The project_id of this MLModelStatus.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this MLModelStatus.  # noqa: E501


        :return: The tenant_id of this MLModelStatus.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this MLModelStatus.


        :param tenant_id: The tenant_id of this MLModelStatus.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def updated_at(self):
        """Gets the updated_at of this MLModelStatus.  # noqa: E501


        :return: The updated_at of this MLModelStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MLModelStatus.


        :param updated_at: The updated_at of this MLModelStatus.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this MLModelStatus.  # noqa: E501


        :return: The version of this MLModelStatus.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this MLModelStatus.


        :param version: The version of this MLModelStatus.  # noqa: E501
        :type: float
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MLModelStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MLModelStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
