# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Features(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'download_and_upgrade': 'bool',
        'high_mem_alert': 'bool',
        'multi_node_aware': 'bool',
        'real_time_logs': 'bool',
        'remote_ssh': 'bool',
        'url_upgrade': 'bool'
    }

    attribute_map = {
        'download_and_upgrade': 'downloadAndUpgrade',
        'high_mem_alert': 'highMemAlert',
        'multi_node_aware': 'multiNodeAware',
        'real_time_logs': 'realTimeLogs',
        'remote_ssh': 'remoteSSH',
        'url_upgrade': 'urlUpgrade'
    }

    def __init__(self, download_and_upgrade=None, high_mem_alert=None, multi_node_aware=None, real_time_logs=None, remote_ssh=None, url_upgrade=None):  # noqa: E501
        """Features - a model defined in Swagger"""  # noqa: E501
        self._download_and_upgrade = None
        self._high_mem_alert = None
        self._multi_node_aware = None
        self._real_time_logs = None
        self._remote_ssh = None
        self._url_upgrade = None
        self.discriminator = None
        if download_and_upgrade is not None:
            self.download_and_upgrade = download_and_upgrade
        if high_mem_alert is not None:
            self.high_mem_alert = high_mem_alert
        if multi_node_aware is not None:
            self.multi_node_aware = multi_node_aware
        if real_time_logs is not None:
            self.real_time_logs = real_time_logs
        if remote_ssh is not None:
            self.remote_ssh = remote_ssh
        if url_upgrade is not None:
            self.url_upgrade = url_upgrade

    @property
    def download_and_upgrade(self):
        """Gets the download_and_upgrade of this Features.  # noqa: E501


        :return: The download_and_upgrade of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._download_and_upgrade

    @download_and_upgrade.setter
    def download_and_upgrade(self, download_and_upgrade):
        """Sets the download_and_upgrade of this Features.


        :param download_and_upgrade: The download_and_upgrade of this Features.  # noqa: E501
        :type: bool
        """

        self._download_and_upgrade = download_and_upgrade

    @property
    def high_mem_alert(self):
        """Gets the high_mem_alert of this Features.  # noqa: E501


        :return: The high_mem_alert of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._high_mem_alert

    @high_mem_alert.setter
    def high_mem_alert(self, high_mem_alert):
        """Sets the high_mem_alert of this Features.


        :param high_mem_alert: The high_mem_alert of this Features.  # noqa: E501
        :type: bool
        """

        self._high_mem_alert = high_mem_alert

    @property
    def multi_node_aware(self):
        """Gets the multi_node_aware of this Features.  # noqa: E501


        :return: The multi_node_aware of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._multi_node_aware

    @multi_node_aware.setter
    def multi_node_aware(self, multi_node_aware):
        """Sets the multi_node_aware of this Features.


        :param multi_node_aware: The multi_node_aware of this Features.  # noqa: E501
        :type: bool
        """

        self._multi_node_aware = multi_node_aware

    @property
    def real_time_logs(self):
        """Gets the real_time_logs of this Features.  # noqa: E501


        :return: The real_time_logs of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._real_time_logs

    @real_time_logs.setter
    def real_time_logs(self, real_time_logs):
        """Sets the real_time_logs of this Features.


        :param real_time_logs: The real_time_logs of this Features.  # noqa: E501
        :type: bool
        """

        self._real_time_logs = real_time_logs

    @property
    def remote_ssh(self):
        """Gets the remote_ssh of this Features.  # noqa: E501


        :return: The remote_ssh of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._remote_ssh

    @remote_ssh.setter
    def remote_ssh(self, remote_ssh):
        """Sets the remote_ssh of this Features.


        :param remote_ssh: The remote_ssh of this Features.  # noqa: E501
        :type: bool
        """

        self._remote_ssh = remote_ssh

    @property
    def url_upgrade(self):
        """Gets the url_upgrade of this Features.  # noqa: E501


        :return: The url_upgrade of this Features.  # noqa: E501
        :rtype: bool
        """
        return self._url_upgrade

    @url_upgrade.setter
    def url_upgrade(self, url_upgrade):
        """Sets the url_upgrade of this Features.


        :param url_upgrade: The url_upgrade of this Features.  # noqa: E501
        :type: bool
        """

        self._url_upgrade = url_upgrade

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Features, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Features):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
