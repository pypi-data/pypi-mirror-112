# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.external_service_info import ExternalServiceInfo  # noqa: F401,E501


class StatusInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_services': 'list[ExternalServiceInfo]',
        'status': 'dict(str, str)',
        'warning_messages': 'list[str]'
    }

    attribute_map = {
        'external_services': 'externalServices',
        'status': 'status',
        'warning_messages': 'warningMessages'
    }

    def __init__(self, external_services=None, status=None, warning_messages=None):  # noqa: E501
        """StatusInfo - a model defined in Swagger"""  # noqa: E501
        self._external_services = None
        self._status = None
        self._warning_messages = None
        self.discriminator = None
        self.external_services = external_services
        self.status = status
        if warning_messages is not None:
            self.warning_messages = warning_messages

    @property
    def external_services(self):
        """Gets the external_services of this StatusInfo.  # noqa: E501

        An array of external services installed  # noqa: E501

        :return: The external_services of this StatusInfo.  # noqa: E501
        :rtype: list[ExternalServiceInfo]
        """
        return self._external_services

    @external_services.setter
    def external_services(self, external_services):
        """Sets the external_services of this StatusInfo.

        An array of external services installed  # noqa: E501

        :param external_services: The external_services of this StatusInfo.  # noqa: E501
        :type: list[ExternalServiceInfo]
        """
        if external_services is None:
            raise ValueError("Invalid value for `external_services`, must not be `None`")  # noqa: E501

        self._external_services = external_services

    @property
    def status(self):
        """Gets the status of this StatusInfo.  # noqa: E501

        The state of Kiali A hash of key,values with versions of Kiali and state  # noqa: E501

        :return: The status of this StatusInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatusInfo.

        The state of Kiali A hash of key,values with versions of Kiali and state  # noqa: E501

        :param status: The status of this StatusInfo.  # noqa: E501
        :type: dict(str, str)
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def warning_messages(self):
        """Gets the warning_messages of this StatusInfo.  # noqa: E501

        An array of warningMessages  # noqa: E501

        :return: The warning_messages of this StatusInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._warning_messages

    @warning_messages.setter
    def warning_messages(self, warning_messages):
        """Sets the warning_messages of this StatusInfo.

        An array of warningMessages  # noqa: E501

        :param warning_messages: The warning_messages of this StatusInfo.  # noqa: E501
        :type: list[str]
        """

        self._warning_messages = warning_messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
