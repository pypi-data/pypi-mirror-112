# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.additional_item import AdditionalItem  # noqa: F401,E501


class WorkloadListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_detail_sample': 'AdditionalItem',
        'app_label': 'bool',
        'created_at': 'str',
        'istio_sidecar': 'bool',
        'labels': 'dict(str, str)',
        'name': 'str',
        'pod_count': 'int',
        'resource_version': 'str',
        'type': 'str',
        'version_label': 'bool'
    }

    attribute_map = {
        'additional_detail_sample': 'additionalDetailSample',
        'app_label': 'appLabel',
        'created_at': 'createdAt',
        'istio_sidecar': 'istioSidecar',
        'labels': 'labels',
        'name': 'name',
        'pod_count': 'podCount',
        'resource_version': 'resourceVersion',
        'type': 'type',
        'version_label': 'versionLabel'
    }

    def __init__(self, additional_detail_sample=None, app_label=None, created_at=None, istio_sidecar=None, labels=None, name=None, pod_count=None, resource_version=None, type=None, version_label=None):  # noqa: E501
        """WorkloadListItem - a model defined in Swagger"""  # noqa: E501
        self._additional_detail_sample = None
        self._app_label = None
        self._created_at = None
        self._istio_sidecar = None
        self._labels = None
        self._name = None
        self._pod_count = None
        self._resource_version = None
        self._type = None
        self._version_label = None
        self.discriminator = None
        if additional_detail_sample is not None:
            self.additional_detail_sample = additional_detail_sample
        self.app_label = app_label
        self.created_at = created_at
        self.istio_sidecar = istio_sidecar
        if labels is not None:
            self.labels = labels
        self.name = name
        self.pod_count = pod_count
        self.resource_version = resource_version
        self.type = type
        self.version_label = version_label

    @property
    def additional_detail_sample(self):
        """Gets the additional_detail_sample of this WorkloadListItem.  # noqa: E501


        :return: The additional_detail_sample of this WorkloadListItem.  # noqa: E501
        :rtype: AdditionalItem
        """
        return self._additional_detail_sample

    @additional_detail_sample.setter
    def additional_detail_sample(self, additional_detail_sample):
        """Sets the additional_detail_sample of this WorkloadListItem.


        :param additional_detail_sample: The additional_detail_sample of this WorkloadListItem.  # noqa: E501
        :type: AdditionalItem
        """

        self._additional_detail_sample = additional_detail_sample

    @property
    def app_label(self):
        """Gets the app_label of this WorkloadListItem.  # noqa: E501

        Define if Pods related to this Workload has the label App  # noqa: E501

        :return: The app_label of this WorkloadListItem.  # noqa: E501
        :rtype: bool
        """
        return self._app_label

    @app_label.setter
    def app_label(self, app_label):
        """Sets the app_label of this WorkloadListItem.

        Define if Pods related to this Workload has the label App  # noqa: E501

        :param app_label: The app_label of this WorkloadListItem.  # noqa: E501
        :type: bool
        """
        if app_label is None:
            raise ValueError("Invalid value for `app_label`, must not be `None`")  # noqa: E501

        self._app_label = app_label

    @property
    def created_at(self):
        """Gets the created_at of this WorkloadListItem.  # noqa: E501

        Creation timestamp (in RFC3339 format)  # noqa: E501

        :return: The created_at of this WorkloadListItem.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WorkloadListItem.

        Creation timestamp (in RFC3339 format)  # noqa: E501

        :param created_at: The created_at of this WorkloadListItem.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def istio_sidecar(self):
        """Gets the istio_sidecar of this WorkloadListItem.  # noqa: E501

        Define if Pods related to this Workload has an IstioSidecar deployed  # noqa: E501

        :return: The istio_sidecar of this WorkloadListItem.  # noqa: E501
        :rtype: bool
        """
        return self._istio_sidecar

    @istio_sidecar.setter
    def istio_sidecar(self, istio_sidecar):
        """Sets the istio_sidecar of this WorkloadListItem.

        Define if Pods related to this Workload has an IstioSidecar deployed  # noqa: E501

        :param istio_sidecar: The istio_sidecar of this WorkloadListItem.  # noqa: E501
        :type: bool
        """
        if istio_sidecar is None:
            raise ValueError("Invalid value for `istio_sidecar`, must not be `None`")  # noqa: E501

        self._istio_sidecar = istio_sidecar

    @property
    def labels(self):
        """Gets the labels of this WorkloadListItem.  # noqa: E501

        Workload labels  # noqa: E501

        :return: The labels of this WorkloadListItem.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this WorkloadListItem.

        Workload labels  # noqa: E501

        :param labels: The labels of this WorkloadListItem.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this WorkloadListItem.  # noqa: E501

        Name of the workload  # noqa: E501

        :return: The name of this WorkloadListItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkloadListItem.

        Name of the workload  # noqa: E501

        :param name: The name of this WorkloadListItem.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def pod_count(self):
        """Gets the pod_count of this WorkloadListItem.  # noqa: E501

        Number of current workload pods  # noqa: E501

        :return: The pod_count of this WorkloadListItem.  # noqa: E501
        :rtype: int
        """
        return self._pod_count

    @pod_count.setter
    def pod_count(self, pod_count):
        """Sets the pod_count of this WorkloadListItem.

        Number of current workload pods  # noqa: E501

        :param pod_count: The pod_count of this WorkloadListItem.  # noqa: E501
        :type: int
        """
        if pod_count is None:
            raise ValueError("Invalid value for `pod_count`, must not be `None`")  # noqa: E501

        self._pod_count = pod_count

    @property
    def resource_version(self):
        """Gets the resource_version of this WorkloadListItem.  # noqa: E501

        Kubernetes ResourceVersion  # noqa: E501

        :return: The resource_version of this WorkloadListItem.  # noqa: E501
        :rtype: str
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version):
        """Sets the resource_version of this WorkloadListItem.

        Kubernetes ResourceVersion  # noqa: E501

        :param resource_version: The resource_version of this WorkloadListItem.  # noqa: E501
        :type: str
        """
        if resource_version is None:
            raise ValueError("Invalid value for `resource_version`, must not be `None`")  # noqa: E501

        self._resource_version = resource_version

    @property
    def type(self):
        """Gets the type of this WorkloadListItem.  # noqa: E501

        Type of the workload  # noqa: E501

        :return: The type of this WorkloadListItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WorkloadListItem.

        Type of the workload  # noqa: E501

        :param type: The type of this WorkloadListItem.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def version_label(self):
        """Gets the version_label of this WorkloadListItem.  # noqa: E501

        Define if Pods related to this Workload has the label Version  # noqa: E501

        :return: The version_label of this WorkloadListItem.  # noqa: E501
        :rtype: bool
        """
        return self._version_label

    @version_label.setter
    def version_label(self, version_label):
        """Sets the version_label of this WorkloadListItem.

        Define if Pods related to this Workload has the label Version  # noqa: E501

        :param version_label: The version_label of this WorkloadListItem.  # noqa: E501
        :type: bool
        """
        if version_label is None:
            raise ValueError("Invalid value for `version_label`, must not be `None`")  # noqa: E501

        self._version_label = version_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkloadListItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkloadListItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
