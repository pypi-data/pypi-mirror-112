# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class WstunPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiration': 'int',
        'port': 'int',
        'private_key': 'str',
        'public_key': 'str',
        'service_domain_id': 'str',
        'tenant_id': 'str'
    }

    attribute_map = {
        'expiration': 'expiration',
        'port': 'port',
        'private_key': 'privateKey',
        'public_key': 'publicKey',
        'service_domain_id': 'serviceDomainId',
        'tenant_id': 'tenantId'
    }

    def __init__(self, expiration=None, port=None, private_key=None, public_key=None, service_domain_id=None, tenant_id=None):  # noqa: E501
        """WstunPayload - a model defined in Swagger"""  # noqa: E501
        self._expiration = None
        self._port = None
        self._private_key = None
        self._public_key = None
        self._service_domain_id = None
        self._tenant_id = None
        self.discriminator = None
        self.expiration = expiration
        self.port = port
        self.private_key = private_key
        self.public_key = public_key
        self.service_domain_id = service_domain_id
        self.tenant_id = tenant_id

    @property
    def expiration(self):
        """Gets the expiration of this WstunPayload.  # noqa: E501


        :return: The expiration of this WstunPayload.  # noqa: E501
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this WstunPayload.


        :param expiration: The expiration of this WstunPayload.  # noqa: E501
        :type: int
        """
        if expiration is None:
            raise ValueError("Invalid value for `expiration`, must not be `None`")  # noqa: E501

        self._expiration = expiration

    @property
    def port(self):
        """Gets the port of this WstunPayload.  # noqa: E501


        :return: The port of this WstunPayload.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this WstunPayload.


        :param port: The port of this WstunPayload.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def private_key(self):
        """Gets the private_key of this WstunPayload.  # noqa: E501


        :return: The private_key of this WstunPayload.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this WstunPayload.


        :param private_key: The private_key of this WstunPayload.  # noqa: E501
        :type: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")  # noqa: E501

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this WstunPayload.  # noqa: E501


        :return: The public_key of this WstunPayload.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this WstunPayload.


        :param public_key: The public_key of this WstunPayload.  # noqa: E501
        :type: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")  # noqa: E501

        self._public_key = public_key

    @property
    def service_domain_id(self):
        """Gets the service_domain_id of this WstunPayload.  # noqa: E501


        :return: The service_domain_id of this WstunPayload.  # noqa: E501
        :rtype: str
        """
        return self._service_domain_id

    @service_domain_id.setter
    def service_domain_id(self, service_domain_id):
        """Sets the service_domain_id of this WstunPayload.


        :param service_domain_id: The service_domain_id of this WstunPayload.  # noqa: E501
        :type: str
        """
        if service_domain_id is None:
            raise ValueError("Invalid value for `service_domain_id`, must not be `None`")  # noqa: E501

        self._service_domain_id = service_domain_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this WstunPayload.  # noqa: E501


        :return: The tenant_id of this WstunPayload.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this WstunPayload.


        :param tenant_id: The tenant_id of this WstunPayload.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WstunPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WstunPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
