# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GCPCredential(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_provider_x509_cert_url': 'str',
        'auth_uri': 'str',
        'client_email': 'str',
        'client_id': 'str',
        'client_x509_cert_url': 'str',
        'private_key': 'str',
        'private_key_id': 'str',
        'project_id': 'str',
        'token_uri': 'str',
        'type': 'str'
    }

    attribute_map = {
        'auth_provider_x509_cert_url': 'auth_provider_x509_cert_url',
        'auth_uri': 'auth_uri',
        'client_email': 'client_email',
        'client_id': 'client_id',
        'client_x509_cert_url': 'client_x509_cert_url',
        'private_key': 'private_key',
        'private_key_id': 'private_key_id',
        'project_id': 'project_id',
        'token_uri': 'token_uri',
        'type': 'type'
    }

    def __init__(self, auth_provider_x509_cert_url=None, auth_uri=None, client_email=None, client_id=None, client_x509_cert_url=None, private_key=None, private_key_id=None, project_id=None, token_uri=None, type=None):  # noqa: E501
        """GCPCredential - a model defined in Swagger"""  # noqa: E501
        self._auth_provider_x509_cert_url = None
        self._auth_uri = None
        self._client_email = None
        self._client_id = None
        self._client_x509_cert_url = None
        self._private_key = None
        self._private_key_id = None
        self._project_id = None
        self._token_uri = None
        self._type = None
        self.discriminator = None
        self.auth_provider_x509_cert_url = auth_provider_x509_cert_url
        self.auth_uri = auth_uri
        self.client_email = client_email
        self.client_id = client_id
        self.client_x509_cert_url = client_x509_cert_url
        self.private_key = private_key
        self.private_key_id = private_key_id
        self.project_id = project_id
        self.token_uri = token_uri
        self.type = type

    @property
    def auth_provider_x509_cert_url(self):
        """Gets the auth_provider_x509_cert_url of this GCPCredential.  # noqa: E501

        Google service account key generated using the gcloud command GCP service account key formats depend on when you use the gcloud command or the REST API/client library to generate the key. The gcloud format is supported in this case. Use the key generated using gcloud command as is, for all field values as follows.  Type is set to 'service_account' when you generate the key using gcloud command  # noqa: E501

        :return: The auth_provider_x509_cert_url of this GCPCredential.  # noqa: E501
        :rtype: str
        """
        return self._auth_provider_x509_cert_url

    @auth_provider_x509_cert_url.setter
    def auth_provider_x509_cert_url(self, auth_provider_x509_cert_url):
        """Sets the auth_provider_x509_cert_url of this GCPCredential.

        Google service account key generated using the gcloud command GCP service account key formats depend on when you use the gcloud command or the REST API/client library to generate the key. The gcloud format is supported in this case. Use the key generated using gcloud command as is, for all field values as follows.  Type is set to 'service_account' when you generate the key using gcloud command  # noqa: E501

        :param auth_provider_x509_cert_url: The auth_provider_x509_cert_url of this GCPCredential.  # noqa: E501
        :type: str
        """
        if auth_provider_x509_cert_url is None:
            raise ValueError("Invalid value for `auth_provider_x509_cert_url`, must not be `None`")  # noqa: E501

        self._auth_provider_x509_cert_url = auth_provider_x509_cert_url

    @property
    def auth_uri(self):
        """Gets the auth_uri of this GCPCredential.  # noqa: E501


        :return: The auth_uri of this GCPCredential.  # noqa: E501
        :rtype: str
        """
        return self._auth_uri

    @auth_uri.setter
    def auth_uri(self, auth_uri):
        """Sets the auth_uri of this GCPCredential.


        :param auth_uri: The auth_uri of this GCPCredential.  # noqa: E501
        :type: str
        """
        if auth_uri is None:
            raise ValueError("Invalid value for `auth_uri`, must not be `None`")  # noqa: E501

        self._auth_uri = auth_uri

    @property
    def client_email(self):
        """Gets the client_email of this GCPCredential.  # noqa: E501


        :return: The client_email of this GCPCredential.  # noqa: E501
        :rtype: str
        """
        return self._client_email

    @client_email.setter
    def client_email(self, client_email):
        """Sets the client_email of this GCPCredential.


        :param client_email: The client_email of this GCPCredential.  # noqa: E501
        :type: str
        """
        if client_email is None:
            raise ValueError("Invalid value for `client_email`, must not be `None`")  # noqa: E501

        self._client_email = client_email

    @property
    def client_id(self):
        """Gets the client_id of this GCPCredential.  # noqa: E501


        :return: The client_id of this GCPCredential.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this GCPCredential.


        :param client_id: The client_id of this GCPCredential.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_x509_cert_url(self):
        """Gets the client_x509_cert_url of this GCPCredential.  # noqa: E501


        :return: The client_x509_cert_url of this GCPCredential.  # noqa: E501
        :rtype: str
        """
        return self._client_x509_cert_url

    @client_x509_cert_url.setter
    def client_x509_cert_url(self, client_x509_cert_url):
        """Sets the client_x509_cert_url of this GCPCredential.


        :param client_x509_cert_url: The client_x509_cert_url of this GCPCredential.  # noqa: E501
        :type: str
        """
        if client_x509_cert_url is None:
            raise ValueError("Invalid value for `client_x509_cert_url`, must not be `None`")  # noqa: E501

        self._client_x509_cert_url = client_x509_cert_url

    @property
    def private_key(self):
        """Gets the private_key of this GCPCredential.  # noqa: E501


        :return: The private_key of this GCPCredential.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this GCPCredential.


        :param private_key: The private_key of this GCPCredential.  # noqa: E501
        :type: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")  # noqa: E501

        self._private_key = private_key

    @property
    def private_key_id(self):
        """Gets the private_key_id of this GCPCredential.  # noqa: E501


        :return: The private_key_id of this GCPCredential.  # noqa: E501
        :rtype: str
        """
        return self._private_key_id

    @private_key_id.setter
    def private_key_id(self, private_key_id):
        """Sets the private_key_id of this GCPCredential.


        :param private_key_id: The private_key_id of this GCPCredential.  # noqa: E501
        :type: str
        """
        if private_key_id is None:
            raise ValueError("Invalid value for `private_key_id`, must not be `None`")  # noqa: E501

        self._private_key_id = private_key_id

    @property
    def project_id(self):
        """Gets the project_id of this GCPCredential.  # noqa: E501

        The project resource is the base-level organizing entity in Google Cloud Platform Specify the unique Id for the project in GCP  # noqa: E501

        :return: The project_id of this GCPCredential.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GCPCredential.

        The project resource is the base-level organizing entity in Google Cloud Platform Specify the unique Id for the project in GCP  # noqa: E501

        :param project_id: The project_id of this GCPCredential.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def token_uri(self):
        """Gets the token_uri of this GCPCredential.  # noqa: E501


        :return: The token_uri of this GCPCredential.  # noqa: E501
        :rtype: str
        """
        return self._token_uri

    @token_uri.setter
    def token_uri(self, token_uri):
        """Sets the token_uri of this GCPCredential.


        :param token_uri: The token_uri of this GCPCredential.  # noqa: E501
        :type: str
        """
        if token_uri is None:
            raise ValueError("Invalid value for `token_uri`, must not be `None`")  # noqa: E501

        self._token_uri = token_uri

    @property
    def type(self):
        """Gets the type of this GCPCredential.  # noqa: E501


        :return: The type of this GCPCredential.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GCPCredential.


        :param type: The type of this GCPCredential.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GCPCredential, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GCPCredential):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
