# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DataPipelineContainersBaseObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_pipeline_id': 'str',
        'edge_id': 'str'
    }

    attribute_map = {
        'data_pipeline_id': 'dataPipelineId',
        'edge_id': 'edgeId'
    }

    def __init__(self, data_pipeline_id=None, edge_id=None):  # noqa: E501
        """DataPipelineContainersBaseObject - a model defined in Swagger"""  # noqa: E501
        self._data_pipeline_id = None
        self._edge_id = None
        self.discriminator = None
        if data_pipeline_id is not None:
            self.data_pipeline_id = data_pipeline_id
        if edge_id is not None:
            self.edge_id = edge_id

    @property
    def data_pipeline_id(self):
        """Gets the data_pipeline_id of this DataPipelineContainersBaseObject.  # noqa: E501


        :return: The data_pipeline_id of this DataPipelineContainersBaseObject.  # noqa: E501
        :rtype: str
        """
        return self._data_pipeline_id

    @data_pipeline_id.setter
    def data_pipeline_id(self, data_pipeline_id):
        """Sets the data_pipeline_id of this DataPipelineContainersBaseObject.


        :param data_pipeline_id: The data_pipeline_id of this DataPipelineContainersBaseObject.  # noqa: E501
        :type: str
        """

        self._data_pipeline_id = data_pipeline_id

    @property
    def edge_id(self):
        """Gets the edge_id of this DataPipelineContainersBaseObject.  # noqa: E501


        :return: The edge_id of this DataPipelineContainersBaseObject.  # noqa: E501
        :rtype: str
        """
        return self._edge_id

    @edge_id.setter
    def edge_id(self, edge_id):
        """Sets the edge_id of this DataPipelineContainersBaseObject.


        :param edge_id: The edge_id of this DataPipelineContainersBaseObject.  # noqa: E501
        :type: str
        """

        self._edge_id = edge_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataPipelineContainersBaseObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataPipelineContainersBaseObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
