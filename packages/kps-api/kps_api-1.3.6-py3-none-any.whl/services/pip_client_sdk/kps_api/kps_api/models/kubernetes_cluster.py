# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class KubernetesCluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chart_version': 'str',
        'connected': 'bool',
        'description': 'str',
        'id': 'str',
        'kube_version': 'str',
        'name': 'str',
        'onboarded': 'bool'
    }

    attribute_map = {
        'chart_version': 'chartVersion',
        'connected': 'connected',
        'description': 'description',
        'id': 'id',
        'kube_version': 'kubeVersion',
        'name': 'name',
        'onboarded': 'onboarded'
    }

    def __init__(self, chart_version=None, connected=None, description=None, id=None, kube_version=None, name=None, onboarded=None):  # noqa: E501
        """KubernetesCluster - a model defined in Swagger"""  # noqa: E501
        self._chart_version = None
        self._connected = None
        self._description = None
        self._id = None
        self._kube_version = None
        self._name = None
        self._onboarded = None
        self.discriminator = None
        if chart_version is not None:
            self.chart_version = chart_version
        if connected is not None:
            self.connected = connected
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if kube_version is not None:
            self.kube_version = kube_version
        self.name = name
        if onboarded is not None:
            self.onboarded = onboarded

    @property
    def chart_version(self):
        """Gets the chart_version of this KubernetesCluster.  # noqa: E501

        Chart version of the current cluster  # noqa: E501

        :return: The chart_version of this KubernetesCluster.  # noqa: E501
        :rtype: str
        """
        return self._chart_version

    @chart_version.setter
    def chart_version(self, chart_version):
        """Sets the chart_version of this KubernetesCluster.

        Chart version of the current cluster  # noqa: E501

        :param chart_version: The chart_version of this KubernetesCluster.  # noqa: E501
        :type: str
        """

        self._chart_version = chart_version

    @property
    def connected(self):
        """Gets the connected of this KubernetesCluster.  # noqa: E501

        Connecting status of the current cluster Either true or false  # noqa: E501

        :return: The connected of this KubernetesCluster.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this KubernetesCluster.

        Connecting status of the current cluster Either true or false  # noqa: E501

        :param connected: The connected of this KubernetesCluster.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def description(self):
        """Gets the description of this KubernetesCluster.  # noqa: E501

        KubernetesCluster description  # noqa: E501

        :return: The description of this KubernetesCluster.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this KubernetesCluster.

        KubernetesCluster description  # noqa: E501

        :param description: The description of this KubernetesCluster.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this KubernetesCluster.  # noqa: E501

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :return: The id of this KubernetesCluster.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KubernetesCluster.

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :param id: The id of this KubernetesCluster.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def kube_version(self):
        """Gets the kube_version of this KubernetesCluster.  # noqa: E501

        Kubernetes version of the current cluster  # noqa: E501

        :return: The kube_version of this KubernetesCluster.  # noqa: E501
        :rtype: str
        """
        return self._kube_version

    @kube_version.setter
    def kube_version(self, kube_version):
        """Sets the kube_version of this KubernetesCluster.

        Kubernetes version of the current cluster  # noqa: E501

        :param kube_version: The kube_version of this KubernetesCluster.  # noqa: E501
        :type: str
        """

        self._kube_version = kube_version

    @property
    def name(self):
        """Gets the name of this KubernetesCluster.  # noqa: E501

        Name of the Kubernetes Cluster. Maximum length of 200 characters.  # noqa: E501

        :return: The name of this KubernetesCluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KubernetesCluster.

        Name of the Kubernetes Cluster. Maximum length of 200 characters.  # noqa: E501

        :param name: The name of this KubernetesCluster.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def onboarded(self):
        """Gets the onboarded of this KubernetesCluster.  # noqa: E501

        Onboarded status of the current cluster Either true or false  # noqa: E501

        :return: The onboarded of this KubernetesCluster.  # noqa: E501
        :rtype: bool
        """
        return self._onboarded

    @onboarded.setter
    def onboarded(self, onboarded):
        """Sets the onboarded of this KubernetesCluster.

        Onboarded status of the current cluster Either true or false  # noqa: E501

        :param onboarded: The onboarded of this KubernetesCluster.  # noqa: E501
        :type: bool
        """

        self._onboarded = onboarded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubernetesCluster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubernetesCluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
