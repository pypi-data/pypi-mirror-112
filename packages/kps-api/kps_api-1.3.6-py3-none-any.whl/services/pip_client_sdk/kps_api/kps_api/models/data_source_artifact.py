# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DataSourceArtifact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'data': 'dict(str, object)',
        'data_source_id': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'data': 'data',
        'data_source_id': 'dataSourceId'
    }

    def __init__(self, created_at=None, data=None, data_source_id=None):  # noqa: E501
        """DataSourceArtifact - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._data = None
        self._data_source_id = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if data is not None:
            self.data = data
        if data_source_id is not None:
            self.data_source_id = data_source_id

    @property
    def created_at(self):
        """Gets the created_at of this DataSourceArtifact.  # noqa: E501


        :return: The created_at of this DataSourceArtifact.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataSourceArtifact.


        :param created_at: The created_at of this DataSourceArtifact.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def data(self):
        """Gets the data of this DataSourceArtifact.  # noqa: E501


        :return: The data of this DataSourceArtifact.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DataSourceArtifact.


        :param data: The data of this DataSourceArtifact.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def data_source_id(self):
        """Gets the data_source_id of this DataSourceArtifact.  # noqa: E501


        :return: The data_source_id of this DataSourceArtifact.  # noqa: E501
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this DataSourceArtifact.


        :param data_source_id: The data_source_id of this DataSourceArtifact.  # noqa: E501
        :type: str
        """

        self._data_source_id = data_source_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataSourceArtifact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSourceArtifact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
