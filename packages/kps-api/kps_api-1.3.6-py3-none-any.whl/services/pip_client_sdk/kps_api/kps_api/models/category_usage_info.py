# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CategoryUsageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_ids': 'list[str]',
        'data_pipeline_ids': 'list[str]',
        'data_source_ids': 'list[str]',
        'edge_ids': 'list[str]',
        'id': 'str',
        'project_ids': 'list[str]'
    }

    attribute_map = {
        'application_ids': 'applicationIds',
        'data_pipeline_ids': 'dataPipelineIds',
        'data_source_ids': 'dataSourceIds',
        'edge_ids': 'edgeIds',
        'id': 'id',
        'project_ids': 'projectIds'
    }

    def __init__(self, application_ids=None, data_pipeline_ids=None, data_source_ids=None, edge_ids=None, id=None, project_ids=None):  # noqa: E501
        """CategoryUsageInfo - a model defined in Swagger"""  # noqa: E501
        self._application_ids = None
        self._data_pipeline_ids = None
        self._data_source_ids = None
        self._edge_ids = None
        self._id = None
        self._project_ids = None
        self.discriminator = None
        self.application_ids = application_ids
        self.data_pipeline_ids = data_pipeline_ids
        self.data_source_ids = data_source_ids
        self.edge_ids = edge_ids
        self.id = id
        self.project_ids = project_ids

    @property
    def application_ids(self):
        """Gets the application_ids of this CategoryUsageInfo.  # noqa: E501

        IDs of applications using this category  # noqa: E501

        :return: The application_ids of this CategoryUsageInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._application_ids

    @application_ids.setter
    def application_ids(self, application_ids):
        """Sets the application_ids of this CategoryUsageInfo.

        IDs of applications using this category  # noqa: E501

        :param application_ids: The application_ids of this CategoryUsageInfo.  # noqa: E501
        :type: list[str]
        """
        if application_ids is None:
            raise ValueError("Invalid value for `application_ids`, must not be `None`")  # noqa: E501

        self._application_ids = application_ids

    @property
    def data_pipeline_ids(self):
        """Gets the data_pipeline_ids of this CategoryUsageInfo.  # noqa: E501

        IDs of data pipelines using this category  # noqa: E501

        :return: The data_pipeline_ids of this CategoryUsageInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_pipeline_ids

    @data_pipeline_ids.setter
    def data_pipeline_ids(self, data_pipeline_ids):
        """Sets the data_pipeline_ids of this CategoryUsageInfo.

        IDs of data pipelines using this category  # noqa: E501

        :param data_pipeline_ids: The data_pipeline_ids of this CategoryUsageInfo.  # noqa: E501
        :type: list[str]
        """
        if data_pipeline_ids is None:
            raise ValueError("Invalid value for `data_pipeline_ids`, must not be `None`")  # noqa: E501

        self._data_pipeline_ids = data_pipeline_ids

    @property
    def data_source_ids(self):
        """Gets the data_source_ids of this CategoryUsageInfo.  # noqa: E501

        IDs of data sources using this category  # noqa: E501

        :return: The data_source_ids of this CategoryUsageInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_source_ids

    @data_source_ids.setter
    def data_source_ids(self, data_source_ids):
        """Sets the data_source_ids of this CategoryUsageInfo.

        IDs of data sources using this category  # noqa: E501

        :param data_source_ids: The data_source_ids of this CategoryUsageInfo.  # noqa: E501
        :type: list[str]
        """
        if data_source_ids is None:
            raise ValueError("Invalid value for `data_source_ids`, must not be `None`")  # noqa: E501

        self._data_source_ids = data_source_ids

    @property
    def edge_ids(self):
        """Gets the edge_ids of this CategoryUsageInfo.  # noqa: E501

        IDs of edges using this category  # noqa: E501

        :return: The edge_ids of this CategoryUsageInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._edge_ids

    @edge_ids.setter
    def edge_ids(self, edge_ids):
        """Sets the edge_ids of this CategoryUsageInfo.

        IDs of edges using this category  # noqa: E501

        :param edge_ids: The edge_ids of this CategoryUsageInfo.  # noqa: E501
        :type: list[str]
        """
        if edge_ids is None:
            raise ValueError("Invalid value for `edge_ids`, must not be `None`")  # noqa: E501

        self._edge_ids = edge_ids

    @property
    def id(self):
        """Gets the id of this CategoryUsageInfo.  # noqa: E501

        ID of the category  # noqa: E501

        :return: The id of this CategoryUsageInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CategoryUsageInfo.

        ID of the category  # noqa: E501

        :param id: The id of this CategoryUsageInfo.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def project_ids(self):
        """Gets the project_ids of this CategoryUsageInfo.  # noqa: E501

        IDs of projects using this category  # noqa: E501

        :return: The project_ids of this CategoryUsageInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this CategoryUsageInfo.

        IDs of projects using this category  # noqa: E501

        :param project_ids: The project_ids of this CategoryUsageInfo.  # noqa: E501
        :type: list[str]
        """
        if project_ids is None:
            raise ValueError("Invalid value for `project_ids`, must not be `None`")  # noqa: E501

        self._project_ids = project_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategoryUsageInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryUsageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
