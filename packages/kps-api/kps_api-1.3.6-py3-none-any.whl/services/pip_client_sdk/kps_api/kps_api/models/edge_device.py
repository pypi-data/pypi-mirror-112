# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.node_role import NodeRole  # noqa: F401,E501


class EdgeDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'description': 'str',
        'gateway': 'str',
        'id': 'str',
        'ip_address': 'str',
        'name': 'str',
        'role': 'NodeRole',
        'serial_number': 'str',
        'subnet': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'description': 'description',
        'gateway': 'gateway',
        'id': 'id',
        'ip_address': 'ipAddress',
        'name': 'name',
        'role': 'role',
        'serial_number': 'serialNumber',
        'subnet': 'subnet'
    }

    def __init__(self, cluster_id=None, description=None, gateway=None, id=None, ip_address=None, name=None, role=None, serial_number=None, subnet=None):  # noqa: E501
        """EdgeDevice - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._description = None
        self._gateway = None
        self._id = None
        self._ip_address = None
        self._name = None
        self._role = None
        self._serial_number = None
        self._subnet = None
        self.discriminator = None
        self.cluster_id = cluster_id
        if description is not None:
            self.description = description
        self.gateway = gateway
        if id is not None:
            self.id = id
        self.ip_address = ip_address
        self.name = name
        if role is not None:
            self.role = role
        self.serial_number = serial_number
        self.subnet = subnet

    @property
    def cluster_id(self):
        """Gets the cluster_id of this EdgeDevice.  # noqa: E501

        ID of the cluster this entity belongs to  # noqa: E501

        :return: The cluster_id of this EdgeDevice.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this EdgeDevice.

        ID of the cluster this entity belongs to  # noqa: E501

        :param cluster_id: The cluster_id of this EdgeDevice.  # noqa: E501
        :type: str
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def description(self):
        """Gets the description of this EdgeDevice.  # noqa: E501

        EdgeDevice description  # noqa: E501

        :return: The description of this EdgeDevice.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EdgeDevice.

        EdgeDevice description  # noqa: E501

        :param description: The description of this EdgeDevice.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def gateway(self):
        """Gets the gateway of this EdgeDevice.  # noqa: E501

        Edge Device Gateway IP address  # noqa: E501

        :return: The gateway of this EdgeDevice.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this EdgeDevice.

        Edge Device Gateway IP address  # noqa: E501

        :param gateway: The gateway of this EdgeDevice.  # noqa: E501
        :type: str
        """
        if gateway is None:
            raise ValueError("Invalid value for `gateway`, must not be `None`")  # noqa: E501

        self._gateway = gateway

    @property
    def id(self):
        """Gets the id of this EdgeDevice.  # noqa: E501

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :return: The id of this EdgeDevice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdgeDevice.

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :param id: The id of this EdgeDevice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this EdgeDevice.  # noqa: E501

        Edge device IP Address  # noqa: E501

        :return: The ip_address of this EdgeDevice.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this EdgeDevice.

        Edge device IP Address  # noqa: E501

        :param ip_address: The ip_address of this EdgeDevice.  # noqa: E501
        :type: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def name(self):
        """Gets the name of this EdgeDevice.  # noqa: E501

        Edge name. Maximum length edge name is determined by kubernetes. Name length limited to 60 as node name is the edge name plus a suffix. https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go  # noqa: E501

        :return: The name of this EdgeDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EdgeDevice.

        Edge name. Maximum length edge name is determined by kubernetes. Name length limited to 60 as node name is the edge name plus a suffix. https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go  # noqa: E501

        :param name: The name of this EdgeDevice.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def role(self):
        """Gets the role of this EdgeDevice.  # noqa: E501


        :return: The role of this EdgeDevice.  # noqa: E501
        :rtype: NodeRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this EdgeDevice.


        :param role: The role of this EdgeDevice.  # noqa: E501
        :type: NodeRole
        """

        self._role = role

    @property
    def serial_number(self):
        """Gets the serial_number of this EdgeDevice.  # noqa: E501

        Edge device serial number  # noqa: E501

        :return: The serial_number of this EdgeDevice.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this EdgeDevice.

        Edge device serial number  # noqa: E501

        :param serial_number: The serial_number of this EdgeDevice.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def subnet(self):
        """Gets the subnet of this EdgeDevice.  # noqa: E501

        Edge subnet mask  # noqa: E501

        :return: The subnet of this EdgeDevice.  # noqa: E501
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this EdgeDevice.

        Edge subnet mask  # noqa: E501

        :param subnet: The subnet of this EdgeDevice.  # noqa: E501
        :type: str
        """
        if subnet is None:
            raise ValueError("Invalid value for `subnet`, must not be `None`")  # noqa: E501

        self._subnet = subnet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeDevice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
