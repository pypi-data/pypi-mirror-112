# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AuditLogV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'modifier_id': 'str',
        'modifier_name': 'str',
        'modifier_role': 'str',
        'operation': 'str',
        'operation_type': 'str',
        'payload': 'str',
        'project_id': 'str',
        'project_name': 'str',
        'resource_id': 'str',
        'resource_name': 'str',
        'resource_type': 'str',
        'scope': 'str',
        'service_domain_id': 'str',
        'service_domain_name': 'str',
        'tenant_id': 'str',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'modifier_id': 'modifierID',
        'modifier_name': 'modifierName',
        'modifier_role': 'modifierRole',
        'operation': 'operation',
        'operation_type': 'operationType',
        'payload': 'payload',
        'project_id': 'projectID',
        'project_name': 'projectName',
        'resource_id': 'resourceID',
        'resource_name': 'resourceName',
        'resource_type': 'resourceType',
        'scope': 'scope',
        'service_domain_id': 'serviceDomainID',
        'service_domain_name': 'serviceDomainName',
        'tenant_id': 'tenantID',
        'timestamp': 'timestamp'
    }

    def __init__(self, modifier_id=None, modifier_name=None, modifier_role=None, operation=None, operation_type=None, payload=None, project_id=None, project_name=None, resource_id=None, resource_name=None, resource_type=None, scope=None, service_domain_id=None, service_domain_name=None, tenant_id=None, timestamp=None):  # noqa: E501
        """AuditLogV2 - a model defined in Swagger"""  # noqa: E501
        self._modifier_id = None
        self._modifier_name = None
        self._modifier_role = None
        self._operation = None
        self._operation_type = None
        self._payload = None
        self._project_id = None
        self._project_name = None
        self._resource_id = None
        self._resource_name = None
        self._resource_type = None
        self._scope = None
        self._service_domain_id = None
        self._service_domain_name = None
        self._tenant_id = None
        self._timestamp = None
        self.discriminator = None
        if modifier_id is not None:
            self.modifier_id = modifier_id
        if modifier_name is not None:
            self.modifier_name = modifier_name
        if modifier_role is not None:
            self.modifier_role = modifier_role
        if operation is not None:
            self.operation = operation
        if operation_type is not None:
            self.operation_type = operation_type
        if payload is not None:
            self.payload = payload
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_type is not None:
            self.resource_type = resource_type
        if scope is not None:
            self.scope = scope
        if service_domain_id is not None:
            self.service_domain_id = service_domain_id
        if service_domain_name is not None:
            self.service_domain_name = service_domain_name
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def modifier_id(self):
        """Gets the modifier_id of this AuditLogV2.  # noqa: E501


        :return: The modifier_id of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._modifier_id

    @modifier_id.setter
    def modifier_id(self, modifier_id):
        """Sets the modifier_id of this AuditLogV2.


        :param modifier_id: The modifier_id of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._modifier_id = modifier_id

    @property
    def modifier_name(self):
        """Gets the modifier_name of this AuditLogV2.  # noqa: E501


        :return: The modifier_name of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._modifier_name

    @modifier_name.setter
    def modifier_name(self, modifier_name):
        """Sets the modifier_name of this AuditLogV2.


        :param modifier_name: The modifier_name of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._modifier_name = modifier_name

    @property
    def modifier_role(self):
        """Gets the modifier_role of this AuditLogV2.  # noqa: E501


        :return: The modifier_role of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._modifier_role

    @modifier_role.setter
    def modifier_role(self, modifier_role):
        """Sets the modifier_role of this AuditLogV2.


        :param modifier_role: The modifier_role of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._modifier_role = modifier_role

    @property
    def operation(self):
        """Gets the operation of this AuditLogV2.  # noqa: E501


        :return: The operation of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this AuditLogV2.


        :param operation: The operation of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def operation_type(self):
        """Gets the operation_type of this AuditLogV2.  # noqa: E501


        :return: The operation_type of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this AuditLogV2.


        :param operation_type: The operation_type of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._operation_type = operation_type

    @property
    def payload(self):
        """Gets the payload of this AuditLogV2.  # noqa: E501


        :return: The payload of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this AuditLogV2.


        :param payload: The payload of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def project_id(self):
        """Gets the project_id of this AuditLogV2.  # noqa: E501


        :return: The project_id of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AuditLogV2.


        :param project_id: The project_id of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this AuditLogV2.  # noqa: E501


        :return: The project_name of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this AuditLogV2.


        :param project_name: The project_name of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def resource_id(self):
        """Gets the resource_id of this AuditLogV2.  # noqa: E501


        :return: The resource_id of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AuditLogV2.


        :param resource_id: The resource_id of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this AuditLogV2.  # noqa: E501


        :return: The resource_name of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this AuditLogV2.


        :param resource_name: The resource_name of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this AuditLogV2.  # noqa: E501


        :return: The resource_type of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this AuditLogV2.


        :param resource_type: The resource_type of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def scope(self):
        """Gets the scope of this AuditLogV2.  # noqa: E501


        :return: The scope of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AuditLogV2.


        :param scope: The scope of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def service_domain_id(self):
        """Gets the service_domain_id of this AuditLogV2.  # noqa: E501


        :return: The service_domain_id of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._service_domain_id

    @service_domain_id.setter
    def service_domain_id(self, service_domain_id):
        """Sets the service_domain_id of this AuditLogV2.


        :param service_domain_id: The service_domain_id of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._service_domain_id = service_domain_id

    @property
    def service_domain_name(self):
        """Gets the service_domain_name of this AuditLogV2.  # noqa: E501


        :return: The service_domain_name of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._service_domain_name

    @service_domain_name.setter
    def service_domain_name(self, service_domain_name):
        """Sets the service_domain_name of this AuditLogV2.


        :param service_domain_name: The service_domain_name of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._service_domain_name = service_domain_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AuditLogV2.  # noqa: E501


        :return: The tenant_id of this AuditLogV2.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AuditLogV2.


        :param tenant_id: The tenant_id of this AuditLogV2.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def timestamp(self):
        """Gets the timestamp of this AuditLogV2.  # noqa: E501


        :return: The timestamp of this AuditLogV2.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AuditLogV2.


        :param timestamp: The timestamp of this AuditLogV2.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditLogV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLogV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
