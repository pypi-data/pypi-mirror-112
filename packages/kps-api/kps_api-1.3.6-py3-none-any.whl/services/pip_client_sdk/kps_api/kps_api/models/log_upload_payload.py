# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LogUploadPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_id': 'str',
        'batch_id': 'str',
        'url': 'str'
    }

    attribute_map = {
        'application_id': 'applicationId',
        'batch_id': 'batchId',
        'url': 'url'
    }

    def __init__(self, application_id=None, batch_id=None, url=None):  # noqa: E501
        """LogUploadPayload - a model defined in Swagger"""  # noqa: E501
        self._application_id = None
        self._batch_id = None
        self._url = None
        self.discriminator = None
        if application_id is not None:
            self.application_id = application_id
        self.batch_id = batch_id
        self.url = url

    @property
    def application_id(self):
        """Gets the application_id of this LogUploadPayload.  # noqa: E501

        Optional ID of the application for which the log will be collected  # noqa: E501

        :return: The application_id of this LogUploadPayload.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this LogUploadPayload.

        Optional ID of the application for which the log will be collected  # noqa: E501

        :param application_id: The application_id of this LogUploadPayload.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def batch_id(self):
        """Gets the batch_id of this LogUploadPayload.  # noqa: E501

        Batch ID of the log upload request  # noqa: E501

        :return: The batch_id of this LogUploadPayload.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this LogUploadPayload.

        Batch ID of the log upload request  # noqa: E501

        :param batch_id: The batch_id of this LogUploadPayload.  # noqa: E501
        :type: str
        """
        if batch_id is None:
            raise ValueError("Invalid value for `batch_id`, must not be `None`")  # noqa: E501

        self._batch_id = batch_id

    @property
    def url(self):
        """Gets the url of this LogUploadPayload.  # noqa: E501

        URL where the log will be uploaded by the edge  # noqa: E501

        :return: The url of this LogUploadPayload.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LogUploadPayload.

        URL where the log will be uploaded by the edge  # noqa: E501

        :param url: The url of this LogUploadPayload.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogUploadPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogUploadPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
