# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.features import Features  # noqa: F401,E501


class ServiceDomainInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifacts': 'dict(str, object)',
        'features': 'Features',
        'id': 'str',
        'svc_domain_id': 'str'
    }

    attribute_map = {
        'artifacts': 'artifacts',
        'features': 'features',
        'id': 'id',
        'svc_domain_id': 'svcDomainId'
    }

    def __init__(self, artifacts=None, features=None, id=None, svc_domain_id=None):  # noqa: E501
        """ServiceDomainInfo - a model defined in Swagger"""  # noqa: E501
        self._artifacts = None
        self._features = None
        self._id = None
        self._svc_domain_id = None
        self.discriminator = None
        if artifacts is not None:
            self.artifacts = artifacts
        if features is not None:
            self.features = features
        if id is not None:
            self.id = id
        self.svc_domain_id = svc_domain_id

    @property
    def artifacts(self):
        """Gets the artifacts of this ServiceDomainInfo.  # noqa: E501


        :return: The artifacts of this ServiceDomainInfo.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this ServiceDomainInfo.


        :param artifacts: The artifacts of this ServiceDomainInfo.  # noqa: E501
        :type: dict(str, object)
        """

        self._artifacts = artifacts

    @property
    def features(self):
        """Gets the features of this ServiceDomainInfo.  # noqa: E501


        :return: The features of this ServiceDomainInfo.  # noqa: E501
        :rtype: Features
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ServiceDomainInfo.


        :param features: The features of this ServiceDomainInfo.  # noqa: E501
        :type: Features
        """

        self._features = features

    @property
    def id(self):
        """Gets the id of this ServiceDomainInfo.  # noqa: E501

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :return: The id of this ServiceDomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceDomainInfo.

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :param id: The id of this ServiceDomainInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def svc_domain_id(self):
        """Gets the svc_domain_id of this ServiceDomainInfo.  # noqa: E501

        ID of the service domain this entity belongs to  # noqa: E501

        :return: The svc_domain_id of this ServiceDomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._svc_domain_id

    @svc_domain_id.setter
    def svc_domain_id(self, svc_domain_id):
        """Sets the svc_domain_id of this ServiceDomainInfo.

        ID of the service domain this entity belongs to  # noqa: E501

        :param svc_domain_id: The svc_domain_id of this ServiceDomainInfo.  # noqa: E501
        :type: str
        """
        if svc_domain_id is None:
            raise ValueError("Invalid value for `svc_domain_id`, must not be `None`")  # noqa: E501

        self._svc_domain_id = svc_domain_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceDomainInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceDomainInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
