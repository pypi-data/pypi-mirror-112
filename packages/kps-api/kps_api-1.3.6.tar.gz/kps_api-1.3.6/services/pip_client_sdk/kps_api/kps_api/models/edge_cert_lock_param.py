# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EdgeCertLockParam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration_seconds': 'int',
        'edge_cluster_id': 'str',
        'locked': 'bool'
    }

    attribute_map = {
        'duration_seconds': 'durationSeconds',
        'edge_cluster_id': 'edgeClusterId',
        'locked': 'locked'
    }

    def __init__(self, duration_seconds=None, edge_cluster_id=None, locked=None):  # noqa: E501
        """EdgeCertLockParam - a model defined in Swagger"""  # noqa: E501
        self._duration_seconds = None
        self._edge_cluster_id = None
        self._locked = None
        self.discriminator = None
        if duration_seconds is not None:
            self.duration_seconds = duration_seconds
        self.edge_cluster_id = edge_cluster_id
        self.locked = locked

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this EdgeCertLockParam.  # noqa: E501

        If Locked is false and DurationSeconds is greater than 0, then first unlock the edge certification, then auto lock it after DurationSeconds seconds.  # noqa: E501

        :return: The duration_seconds of this EdgeCertLockParam.  # noqa: E501
        :rtype: int
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this EdgeCertLockParam.

        If Locked is false and DurationSeconds is greater than 0, then first unlock the edge certification, then auto lock it after DurationSeconds seconds.  # noqa: E501

        :param duration_seconds: The duration_seconds of this EdgeCertLockParam.  # noqa: E501
        :type: int
        """

        self._duration_seconds = duration_seconds

    @property
    def edge_cluster_id(self):
        """Gets the edge_cluster_id of this EdgeCertLockParam.  # noqa: E501


        :return: The edge_cluster_id of this EdgeCertLockParam.  # noqa: E501
        :rtype: str
        """
        return self._edge_cluster_id

    @edge_cluster_id.setter
    def edge_cluster_id(self, edge_cluster_id):
        """Sets the edge_cluster_id of this EdgeCertLockParam.


        :param edge_cluster_id: The edge_cluster_id of this EdgeCertLockParam.  # noqa: E501
        :type: str
        """
        if edge_cluster_id is None:
            raise ValueError("Invalid value for `edge_cluster_id`, must not be `None`")  # noqa: E501

        self._edge_cluster_id = edge_cluster_id

    @property
    def locked(self):
        """Gets the locked of this EdgeCertLockParam.  # noqa: E501


        :return: The locked of this EdgeCertLockParam.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this EdgeCertLockParam.


        :param locked: The locked of this EdgeCertLockParam.  # noqa: E501
        :type: bool
        """
        if locked is None:
            raise ValueError("Invalid value for `locked`, must not be `None`")  # noqa: E501

        self._locked = locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeCertLockParam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeCertLockParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
