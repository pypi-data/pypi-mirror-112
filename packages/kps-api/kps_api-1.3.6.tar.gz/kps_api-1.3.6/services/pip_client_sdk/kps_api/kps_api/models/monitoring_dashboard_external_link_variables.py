# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MonitoringDashboardExternalLinkVariables(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app': 'str',
        'namespace': 'str',
        'service': 'str',
        'version': 'str',
        'workload': 'str'
    }

    attribute_map = {
        'app': 'app',
        'namespace': 'namespace',
        'service': 'service',
        'version': 'version',
        'workload': 'workload'
    }

    def __init__(self, app=None, namespace=None, service=None, version=None, workload=None):  # noqa: E501
        """MonitoringDashboardExternalLinkVariables - a model defined in Swagger"""  # noqa: E501
        self._app = None
        self._namespace = None
        self._service = None
        self._version = None
        self._workload = None
        self.discriminator = None
        if app is not None:
            self.app = app
        if namespace is not None:
            self.namespace = namespace
        if service is not None:
            self.service = service
        if version is not None:
            self.version = version
        if workload is not None:
            self.workload = workload

    @property
    def app(self):
        """Gets the app of this MonitoringDashboardExternalLinkVariables.  # noqa: E501


        :return: The app of this MonitoringDashboardExternalLinkVariables.  # noqa: E501
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this MonitoringDashboardExternalLinkVariables.


        :param app: The app of this MonitoringDashboardExternalLinkVariables.  # noqa: E501
        :type: str
        """

        self._app = app

    @property
    def namespace(self):
        """Gets the namespace of this MonitoringDashboardExternalLinkVariables.  # noqa: E501


        :return: The namespace of this MonitoringDashboardExternalLinkVariables.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this MonitoringDashboardExternalLinkVariables.


        :param namespace: The namespace of this MonitoringDashboardExternalLinkVariables.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def service(self):
        """Gets the service of this MonitoringDashboardExternalLinkVariables.  # noqa: E501


        :return: The service of this MonitoringDashboardExternalLinkVariables.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this MonitoringDashboardExternalLinkVariables.


        :param service: The service of this MonitoringDashboardExternalLinkVariables.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def version(self):
        """Gets the version of this MonitoringDashboardExternalLinkVariables.  # noqa: E501


        :return: The version of this MonitoringDashboardExternalLinkVariables.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this MonitoringDashboardExternalLinkVariables.


        :param version: The version of this MonitoringDashboardExternalLinkVariables.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def workload(self):
        """Gets the workload of this MonitoringDashboardExternalLinkVariables.  # noqa: E501


        :return: The workload of this MonitoringDashboardExternalLinkVariables.  # noqa: E501
        :rtype: str
        """
        return self._workload

    @workload.setter
    def workload(self, workload):
        """Sets the workload of this MonitoringDashboardExternalLinkVariables.


        :param workload: The workload of this MonitoringDashboardExternalLinkVariables.  # noqa: E501
        :type: str
        """

        self._workload = workload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitoringDashboardExternalLinkVariables, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitoringDashboardExternalLinkVariables):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
