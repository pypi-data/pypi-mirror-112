# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.category_info import CategoryInfo  # noqa: F401,E501
from kps_api.models.service_domain_profile import ServiceDomainProfile  # noqa: F401,E501


class ServiceDomain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'env': 'str',
        'id': 'str',
        'labels': 'list[CategoryInfo]',
        'name': 'str',
        'profile': 'ServiceDomainProfile',
        'virtual_ip': 'str'
    }

    attribute_map = {
        'description': 'description',
        'env': 'env',
        'id': 'id',
        'labels': 'labels',
        'name': 'name',
        'profile': 'profile',
        'virtual_ip': 'virtualIp'
    }

    def __init__(self, description=None, env=None, id=None, labels=None, name=None, profile=None, virtual_ip=None):  # noqa: E501
        """ServiceDomain - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._env = None
        self._id = None
        self._labels = None
        self._name = None
        self._profile = None
        self._virtual_ip = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if env is not None:
            self.env = env
        if id is not None:
            self.id = id
        if labels is not None:
            self.labels = labels
        self.name = name
        if profile is not None:
            self.profile = profile
        if virtual_ip is not None:
            self.virtual_ip = virtual_ip

    @property
    def description(self):
        """Gets the description of this ServiceDomain.  # noqa: E501

        EdgeCluster description  # noqa: E501

        :return: The description of this ServiceDomain.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceDomain.

        EdgeCluster description  # noqa: E501

        :param description: The description of this ServiceDomain.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def env(self):
        """Gets the env of this ServiceDomain.  # noqa: E501


        :return: The env of this ServiceDomain.  # noqa: E501
        :rtype: str
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this ServiceDomain.


        :param env: The env of this ServiceDomain.  # noqa: E501
        :type: str
        """

        self._env = env

    @property
    def id(self):
        """Gets the id of this ServiceDomain.  # noqa: E501

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :return: The id of this ServiceDomain.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceDomain.

        ID of the entity Maximum character length is 64 for project, category, and runtime environment, 36 for other entity types.  # noqa: E501

        :param id: The id of this ServiceDomain.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this ServiceDomain.  # noqa: E501

        A list of Category labels for this service domain.  # noqa: E501

        :return: The labels of this ServiceDomain.  # noqa: E501
        :rtype: list[CategoryInfo]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ServiceDomain.

        A list of Category labels for this service domain.  # noqa: E501

        :param labels: The labels of this ServiceDomain.  # noqa: E501
        :type: list[CategoryInfo]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ServiceDomain.  # noqa: E501

        Service domain name. Maximum length is limited to 60 characters which must satisfy https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go  # noqa: E501

        :return: The name of this ServiceDomain.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceDomain.

        Service domain name. Maximum length is limited to 60 characters which must satisfy https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go  # noqa: E501

        :param name: The name of this ServiceDomain.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def profile(self):
        """Gets the profile of this ServiceDomain.  # noqa: E501


        :return: The profile of this ServiceDomain.  # noqa: E501
        :rtype: ServiceDomainProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this ServiceDomain.


        :param profile: The profile of this ServiceDomain.  # noqa: E501
        :type: ServiceDomainProfile
        """

        self._profile = profile

    @property
    def virtual_ip(self):
        """Gets the virtual_ip of this ServiceDomain.  # noqa: E501

        Virtual IP  # noqa: E501

        :return: The virtual_ip of this ServiceDomain.  # noqa: E501
        :rtype: str
        """
        return self._virtual_ip

    @virtual_ip.setter
    def virtual_ip(self, virtual_ip):
        """Sets the virtual_ip of this ServiceDomain.

        Virtual IP  # noqa: E501

        :param virtual_ip: The virtual_ip of this ServiceDomain.  # noqa: E501
        :type: str
        """

        self._virtual_ip = virtual_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceDomain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceDomain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
