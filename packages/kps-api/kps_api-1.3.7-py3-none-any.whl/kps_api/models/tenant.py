# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.tenant_profile import TenantProfile  # noqa: F401,E501


class Tenant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'external_id': 'str',
        'id': 'str',
        'name': 'str',
        'profile': 'TenantProfile',
        'token': 'str',
        'version': 'float'
    }

    attribute_map = {
        'description': 'description',
        'external_id': 'externalId',
        'id': 'id',
        'name': 'name',
        'profile': 'profile',
        'token': 'token',
        'version': 'version'
    }

    def __init__(self, description=None, external_id=None, id=None, name=None, profile=None, token=None, version=None):  # noqa: E501
        """Tenant - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._external_id = None
        self._id = None
        self._name = None
        self._profile = None
        self._token = None
        self._version = None
        self.discriminator = None
        if description is not None:
            self.description = description
        self.external_id = external_id
        self.id = id
        self.name = name
        if profile is not None:
            self.profile = profile
        self.token = token
        if version is not None:
            self.version = version

    @property
    def description(self):
        """Gets the description of this Tenant.  # noqa: E501

        Tenant description. Up to 200 characters.  # noqa: E501

        :return: The description of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Tenant.

        Tenant description. Up to 200 characters.  # noqa: E501

        :param description: The description of this Tenant.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def external_id(self):
        """Gets the external_id of this Tenant.  # noqa: E501

        Unique tenant ID returned by my.nutanix.com.  # noqa: E501

        :return: The external_id of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Tenant.

        Unique tenant ID returned by my.nutanix.com.  # noqa: E501

        :param external_id: The external_id of this Tenant.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this Tenant.  # noqa: E501

        Unique ID to identify the tenant, which. can be supplied during create or DB generated. For Nice we will have fixed tenant id such as tenant-id-waldot tenant-id-rocket-blue  # noqa: E501

        :return: The id of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tenant.

        Unique ID to identify the tenant, which. can be supplied during create or DB generated. For Nice we will have fixed tenant id such as tenant-id-waldot tenant-id-rocket-blue  # noqa: E501

        :param id: The id of this Tenant.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Tenant.  # noqa: E501

        Tenant name. For example, WalDot, Rocket Blue, and so on. Up to 200 characters.  # noqa: E501

        :return: The name of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tenant.

        Tenant name. For example, WalDot, Rocket Blue, and so on. Up to 200 characters.  # noqa: E501

        :param name: The name of this Tenant.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def profile(self):
        """Gets the profile of this Tenant.  # noqa: E501


        :return: The profile of this Tenant.  # noqa: E501
        :rtype: TenantProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Tenant.


        :param profile: The profile of this Tenant.  # noqa: E501
        :type: TenantProfile
        """

        self._profile = profile

    @property
    def token(self):
        """Gets the token of this Tenant.  # noqa: E501

        Unique token for a tenant. Used in authentication.  # noqa: E501

        :return: The token of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Tenant.

        Unique token for a tenant. Used in authentication.  # noqa: E501

        :param token: The token of this Tenant.  # noqa: E501
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def version(self):
        """Gets the version of this Tenant.  # noqa: E501

        Version number of object maintained by DB. Not currently used.  # noqa: E501

        :return: The version of this Tenant.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Tenant.

        Version number of object maintained by DB. Not currently used.  # noqa: E501

        :param version: The version of this Tenant.  # noqa: E501
        :type: float
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tenant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tenant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
