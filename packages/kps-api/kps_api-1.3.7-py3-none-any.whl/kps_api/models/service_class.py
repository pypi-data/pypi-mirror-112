# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.service_class_schemas import ServiceClassSchemas  # noqa: F401,E501
from kps_api.models.service_class_scope_type import ServiceClassScopeType  # noqa: F401,E501
from kps_api.models.service_class_state_type import ServiceClassStateType  # noqa: F401,E501
from kps_api.models.service_class_tag import ServiceClassTag  # noqa: F401,E501


class ServiceClass(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bindable': 'bool',
        'created_at': 'datetime',
        'description': 'str',
        'id': 'str',
        'min_svc_domain_version': 'str',
        'name': 'str',
        'schemas': 'ServiceClassSchemas',
        'scope': 'ServiceClassScopeType',
        'state': 'ServiceClassStateType',
        'svc_version': 'str',
        'tags': 'list[ServiceClassTag]',
        'type': 'str',
        'updated_at': 'datetime',
        'version': 'float'
    }

    attribute_map = {
        'bindable': 'bindable',
        'created_at': 'createdAt',
        'description': 'description',
        'id': 'id',
        'min_svc_domain_version': 'minSvcDomainVersion',
        'name': 'name',
        'schemas': 'schemas',
        'scope': 'scope',
        'state': 'state',
        'svc_version': 'svcVersion',
        'tags': 'tags',
        'type': 'type',
        'updated_at': 'updatedAt',
        'version': 'version'
    }

    def __init__(self, bindable=None, created_at=None, description=None, id=None, min_svc_domain_version=None, name=None, schemas=None, scope=None, state=None, svc_version=None, tags=None, type=None, updated_at=None, version=None):  # noqa: E501
        """ServiceClass - a model defined in Swagger"""  # noqa: E501
        self._bindable = None
        self._created_at = None
        self._description = None
        self._id = None
        self._min_svc_domain_version = None
        self._name = None
        self._schemas = None
        self._scope = None
        self._state = None
        self._svc_version = None
        self._tags = None
        self._type = None
        self._updated_at = None
        self._version = None
        self.discriminator = None
        self.bindable = bindable
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        self.min_svc_domain_version = min_svc_domain_version
        self.name = name
        if schemas is not None:
            self.schemas = schemas
        self.scope = scope
        self.state = state
        self.svc_version = svc_version
        if tags is not None:
            self.tags = tags
        self.type = type
        if updated_at is not None:
            self.updated_at = updated_at
        if version is not None:
            self.version = version

    @property
    def bindable(self):
        """Gets the bindable of this ServiceClass.  # noqa: E501

        Flag to specify if service binding is supported  # noqa: E501

        :return: The bindable of this ServiceClass.  # noqa: E501
        :rtype: bool
        """
        return self._bindable

    @bindable.setter
    def bindable(self, bindable):
        """Sets the bindable of this ServiceClass.

        Flag to specify if service binding is supported  # noqa: E501

        :param bindable: The bindable of this ServiceClass.  # noqa: E501
        :type: bool
        """
        if bindable is None:
            raise ValueError("Invalid value for `bindable`, must not be `None`")  # noqa: E501

        self._bindable = bindable

    @property
    def created_at(self):
        """Gets the created_at of this ServiceClass.  # noqa: E501


        :return: The created_at of this ServiceClass.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ServiceClass.


        :param created_at: The created_at of this ServiceClass.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this ServiceClass.  # noqa: E501


        :return: The description of this ServiceClass.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceClass.


        :param description: The description of this ServiceClass.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ServiceClass.  # noqa: E501


        :return: The id of this ServiceClass.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceClass.


        :param id: The id of this ServiceClass.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def min_svc_domain_version(self):
        """Gets the min_svc_domain_version of this ServiceClass.  # noqa: E501

        Minimum version of the Service Domain supporting this Service Class  # noqa: E501

        :return: The min_svc_domain_version of this ServiceClass.  # noqa: E501
        :rtype: str
        """
        return self._min_svc_domain_version

    @min_svc_domain_version.setter
    def min_svc_domain_version(self, min_svc_domain_version):
        """Sets the min_svc_domain_version of this ServiceClass.

        Minimum version of the Service Domain supporting this Service Class  # noqa: E501

        :param min_svc_domain_version: The min_svc_domain_version of this ServiceClass.  # noqa: E501
        :type: str
        """
        if min_svc_domain_version is None:
            raise ValueError("Invalid value for `min_svc_domain_version`, must not be `None`")  # noqa: E501

        self._min_svc_domain_version = min_svc_domain_version

    @property
    def name(self):
        """Gets the name of this ServiceClass.  # noqa: E501


        :return: The name of this ServiceClass.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceClass.


        :param name: The name of this ServiceClass.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def schemas(self):
        """Gets the schemas of this ServiceClass.  # noqa: E501


        :return: The schemas of this ServiceClass.  # noqa: E501
        :rtype: ServiceClassSchemas
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this ServiceClass.


        :param schemas: The schemas of this ServiceClass.  # noqa: E501
        :type: ServiceClassSchemas
        """

        self._schemas = schemas

    @property
    def scope(self):
        """Gets the scope of this ServiceClass.  # noqa: E501


        :return: The scope of this ServiceClass.  # noqa: E501
        :rtype: ServiceClassScopeType
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ServiceClass.


        :param scope: The scope of this ServiceClass.  # noqa: E501
        :type: ServiceClassScopeType
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def state(self):
        """Gets the state of this ServiceClass.  # noqa: E501


        :return: The state of this ServiceClass.  # noqa: E501
        :rtype: ServiceClassStateType
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ServiceClass.


        :param state: The state of this ServiceClass.  # noqa: E501
        :type: ServiceClassStateType
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def svc_version(self):
        """Gets the svc_version of this ServiceClass.  # noqa: E501

        Version of the Service Class type  # noqa: E501

        :return: The svc_version of this ServiceClass.  # noqa: E501
        :rtype: str
        """
        return self._svc_version

    @svc_version.setter
    def svc_version(self, svc_version):
        """Sets the svc_version of this ServiceClass.

        Version of the Service Class type  # noqa: E501

        :param svc_version: The svc_version of this ServiceClass.  # noqa: E501
        :type: str
        """
        if svc_version is None:
            raise ValueError("Invalid value for `svc_version`, must not be `None`")  # noqa: E501

        self._svc_version = svc_version

    @property
    def tags(self):
        """Gets the tags of this ServiceClass.  # noqa: E501

        Tag name can be repeated to hold multiple values. Tags essential = yes/no and category = some category are required  # noqa: E501

        :return: The tags of this ServiceClass.  # noqa: E501
        :rtype: list[ServiceClassTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ServiceClass.

        Tag name can be repeated to hold multiple values. Tags essential = yes/no and category = some category are required  # noqa: E501

        :param tags: The tags of this ServiceClass.  # noqa: E501
        :type: list[ServiceClassTag]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this ServiceClass.  # noqa: E501

        Type of the Service Class e.g Kafka  # noqa: E501

        :return: The type of this ServiceClass.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceClass.

        Type of the Service Class e.g Kafka  # noqa: E501

        :param type: The type of this ServiceClass.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this ServiceClass.  # noqa: E501


        :return: The updated_at of this ServiceClass.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ServiceClass.


        :param updated_at: The updated_at of this ServiceClass.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this ServiceClass.  # noqa: E501


        :return: The version of this ServiceClass.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceClass.


        :param version: The version of this ServiceClass.  # noqa: E501
        :type: float
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceClass, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
