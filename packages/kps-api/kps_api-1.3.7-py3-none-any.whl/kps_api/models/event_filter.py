# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EventFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_time': 'datetime',
        'keys': 'dict(str, str)',
        'path': 'str',
        'size': 'int',
        'start': 'int',
        'start_time': 'datetime'
    }

    attribute_map = {
        'end_time': 'endTime',
        'keys': 'keys',
        'path': 'path',
        'size': 'size',
        'start': 'start',
        'start_time': 'startTime'
    }

    def __init__(self, end_time=None, keys=None, path=None, size=None, start=None, start_time=None):  # noqa: E501
        """EventFilter - a model defined in Swagger"""  # noqa: E501
        self._end_time = None
        self._keys = None
        self._path = None
        self._size = None
        self._start = None
        self._start_time = None
        self.discriminator = None
        if end_time is not None:
            self.end_time = end_time
        if keys is not None:
            self.keys = keys
        self.path = path
        if size is not None:
            self.size = size
        if start is not None:
            self.start = start
        if start_time is not None:
            self.start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this EventFilter.  # noqa: E501


        :return: The end_time of this EventFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this EventFilter.


        :param end_time: The end_time of this EventFilter.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def keys(self):
        """Gets the keys of this EventFilter.  # noqa: E501


        :return: The keys of this EventFilter.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this EventFilter.


        :param keys: The keys of this EventFilter.  # noqa: E501
        :type: dict(str, str)
        """

        self._keys = keys

    @property
    def path(self):
        """Gets the path of this EventFilter.  # noqa: E501


        :return: The path of this EventFilter.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this EventFilter.


        :param path: The path of this EventFilter.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def size(self):
        """Gets the size of this EventFilter.  # noqa: E501


        :return: The size of this EventFilter.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this EventFilter.


        :param size: The size of this EventFilter.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def start(self):
        """Gets the start of this EventFilter.  # noqa: E501


        :return: The start of this EventFilter.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this EventFilter.


        :param start: The start of this EventFilter.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def start_time(self):
        """Gets the start_time of this EventFilter.  # noqa: E501


        :return: The start_time of this EventFilter.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this EventFilter.


        :param start_time: The start_time of this EventFilter.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
