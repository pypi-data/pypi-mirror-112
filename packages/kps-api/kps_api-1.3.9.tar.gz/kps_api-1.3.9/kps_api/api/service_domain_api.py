# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from kps_api.api_client import ApiClient


class ServiceDomainApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def project_get_service_domains(self, project_id, authorization, **kwargs):  # noqa: E501
        """Get all service domains associated with a project by project ID.  # noqa: E501

        Retrieves all service domains for a project by project ID {projectId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_service_domains(project_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: ID for the project (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :return: ServiceDomainListPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.project_get_service_domains_with_http_info(project_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.project_get_service_domains_with_http_info(project_id, authorization, **kwargs)  # noqa: E501
            return data

    def project_get_service_domains_with_http_info(self, project_id, authorization, **kwargs):  # noqa: E501
        """Get all service domains associated with a project by project ID.  # noqa: E501

        Retrieves all service domains for a project by project ID {projectId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_get_service_domains_with_http_info(project_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: ID for the project (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :return: ServiceDomainListPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'authorization', 'page_index', 'page_size', 'order_by', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_get_service_domains" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `project_get_service_domains`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `project_get_service_domains`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
            collection_formats['orderBy'] = 'csv'  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/projects/{projectId}/servicedomains', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceDomainListPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_domain_create(self, body, authorization, **kwargs):  # noqa: E501
        """Create service domain.  # noqa: E501

        Create a service domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_create(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceDomain body: Parameters and values used when creating a service domain (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: CreateDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_domain_create_with_http_info(body, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.service_domain_create_with_http_info(body, authorization, **kwargs)  # noqa: E501
            return data

    def service_domain_create_with_http_info(self, body, authorization, **kwargs):  # noqa: E501
        """Create service domain.  # noqa: E501

        Create a service domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_create_with_http_info(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceDomain body: Parameters and values used when creating a service domain (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: CreateDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_domain_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_domain_create`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `service_domain_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/servicedomains', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateDocumentResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_domain_delete(self, svc_domain_id, authorization, **kwargs):  # noqa: E501
        """Delete a service domain as specified by its ID.  # noqa: E501

        Deletes the service domain with the given ID  {svcDomainId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_delete(svc_domain_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str svc_domain_id: ID for the service domain (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: DeleteDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_domain_delete_with_http_info(svc_domain_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.service_domain_delete_with_http_info(svc_domain_id, authorization, **kwargs)  # noqa: E501
            return data

    def service_domain_delete_with_http_info(self, svc_domain_id, authorization, **kwargs):  # noqa: E501
        """Delete a service domain as specified by its ID.  # noqa: E501

        Deletes the service domain with the given ID  {svcDomainId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_delete_with_http_info(svc_domain_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str svc_domain_id: ID for the service domain (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: DeleteDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['svc_domain_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_domain_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'svc_domain_id' is set
        if ('svc_domain_id' not in params or
                params['svc_domain_id'] is None):
            raise ValueError("Missing the required parameter `svc_domain_id` when calling `service_domain_delete`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `service_domain_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'svc_domain_id' in params:
            path_params['svcDomainId'] = params['svc_domain_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/servicedomains/{svcDomainId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteDocumentResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_domain_get(self, svc_domain_id, authorization, **kwargs):  # noqa: E501
        """Get a service domain by its ID.  # noqa: E501

        Retrieves the service domain with the given ID {svcDomainId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_get(svc_domain_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str svc_domain_id: ID for the service domain (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: ServiceDomain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_domain_get_with_http_info(svc_domain_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.service_domain_get_with_http_info(svc_domain_id, authorization, **kwargs)  # noqa: E501
            return data

    def service_domain_get_with_http_info(self, svc_domain_id, authorization, **kwargs):  # noqa: E501
        """Get a service domain by its ID.  # noqa: E501

        Retrieves the service domain with the given ID {svcDomainId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_get_with_http_info(svc_domain_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str svc_domain_id: ID for the service domain (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: ServiceDomain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['svc_domain_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_domain_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'svc_domain_id' is set
        if ('svc_domain_id' not in params or
                params['svc_domain_id'] is None):
            raise ValueError("Missing the required parameter `svc_domain_id` when calling `service_domain_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `service_domain_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'svc_domain_id' in params:
            path_params['svcDomainId'] = params['svc_domain_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/servicedomains/{svcDomainId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceDomain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_domain_get_effective_profile(self, svc_domain_id, authorization, **kwargs):  # noqa: E501
        """Get a service domain effective profile by ID.  # noqa: E501

        Retrieves the service domain effective profile with the given ID {svcDomainId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_get_effective_profile(svc_domain_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str svc_domain_id: ID for the service domain (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: ServiceDomainProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_domain_get_effective_profile_with_http_info(svc_domain_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.service_domain_get_effective_profile_with_http_info(svc_domain_id, authorization, **kwargs)  # noqa: E501
            return data

    def service_domain_get_effective_profile_with_http_info(self, svc_domain_id, authorization, **kwargs):  # noqa: E501
        """Get a service domain effective profile by ID.  # noqa: E501

        Retrieves the service domain effective profile with the given ID {svcDomainId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_get_effective_profile_with_http_info(svc_domain_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str svc_domain_id: ID for the service domain (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :return: ServiceDomainProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['svc_domain_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_domain_get_effective_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'svc_domain_id' is set
        if ('svc_domain_id' not in params or
                params['svc_domain_id'] is None):
            raise ValueError("Missing the required parameter `svc_domain_id` when calling `service_domain_get_effective_profile`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `service_domain_get_effective_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'svc_domain_id' in params:
            path_params['svcDomainId'] = params['svc_domain_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/servicedomains/{svcDomainId}/effectiveprofile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceDomainProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_domain_get_nodes(self, svc_domain_id, authorization, **kwargs):  # noqa: E501
        """Retrieves all nodes for a service domain by service domain ID {svcDomainId}.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_get_nodes(svc_domain_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str svc_domain_id: ID for the service domain (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :return: NodeListPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_domain_get_nodes_with_http_info(svc_domain_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.service_domain_get_nodes_with_http_info(svc_domain_id, authorization, **kwargs)  # noqa: E501
            return data

    def service_domain_get_nodes_with_http_info(self, svc_domain_id, authorization, **kwargs):  # noqa: E501
        """Retrieves all nodes for a service domain by service domain ID {svcDomainId}.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_get_nodes_with_http_info(svc_domain_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str svc_domain_id: ID for the service domain (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :return: NodeListPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['svc_domain_id', 'authorization', 'page_index', 'page_size', 'order_by', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_domain_get_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'svc_domain_id' is set
        if ('svc_domain_id' not in params or
                params['svc_domain_id'] is None):
            raise ValueError("Missing the required parameter `svc_domain_id` when calling `service_domain_get_nodes`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `service_domain_get_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'svc_domain_id' in params:
            path_params['svcDomainId'] = params['svc_domain_id']  # noqa: E501

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
            collection_formats['orderBy'] = 'csv'  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/servicedomains/{svcDomainId}/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeListPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_domain_get_nodes_info(self, svc_domain_id, authorization, **kwargs):  # noqa: E501
        """Get nodes info for a service domain by service domain ID.  # noqa: E501

        Retrieves all nodes info for a service domain by service domain ID {svcDomainId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_get_nodes_info(svc_domain_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str svc_domain_id: ID for the service domain (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :return: NodeInfoListPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_domain_get_nodes_info_with_http_info(svc_domain_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.service_domain_get_nodes_info_with_http_info(svc_domain_id, authorization, **kwargs)  # noqa: E501
            return data

    def service_domain_get_nodes_info_with_http_info(self, svc_domain_id, authorization, **kwargs):  # noqa: E501
        """Get nodes info for a service domain by service domain ID.  # noqa: E501

        Retrieves all nodes info for a service domain by service domain ID {svcDomainId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_get_nodes_info_with_http_info(svc_domain_id, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str svc_domain_id: ID for the service domain (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :return: NodeInfoListPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['svc_domain_id', 'authorization', 'page_index', 'page_size', 'order_by', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_domain_get_nodes_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'svc_domain_id' is set
        if ('svc_domain_id' not in params or
                params['svc_domain_id'] is None):
            raise ValueError("Missing the required parameter `svc_domain_id` when calling `service_domain_get_nodes_info`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `service_domain_get_nodes_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'svc_domain_id' in params:
            path_params['svcDomainId'] = params['svc_domain_id']  # noqa: E501

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
            collection_formats['orderBy'] = 'csv'  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/servicedomains/{svcDomainId}/nodesinfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInfoListPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_domain_list(self, authorization, **kwargs):  # noqa: E501
        """Get service domains.  # noqa: E501

        Retrieves all service domains associated with your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_list(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :return: ServiceDomainListPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_domain_list_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.service_domain_list_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def service_domain_list_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Get service domains.  # noqa: E501

        Retrieves all service domains associated with your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_list_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param int page_index: 0-based index of the page to fetch results.
        :param int page_size: Item count of each page.
        :param list[str] order_by: Specify result order. Zero or more entries with format: &ltkey> [desc] where orderByKeys lists allowed keys in each response.
        :param str filter: Specify result filter. Format is similar to a SQL WHERE clause. For example, to filter object by name with prefix foo, use: name LIKE 'foo%'. Supported filter keys are the same as order by keys.
        :return: ServiceDomainListPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'page_index', 'page_size', 'order_by', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_domain_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `service_domain_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
            collection_formats['orderBy'] = 'csv'  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/servicedomains', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceDomainListPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_domain_update(self, body, authorization, svc_domain_id, **kwargs):  # noqa: E501
        """Update a service domain by its ID.  # noqa: E501

        Updates a service domain by its ID {svcDomainId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_update(body, authorization, svc_domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceDomain body: (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param str svc_domain_id: ID for the service domain (required)
        :return: UpdateDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_domain_update_with_http_info(body, authorization, svc_domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_domain_update_with_http_info(body, authorization, svc_domain_id, **kwargs)  # noqa: E501
            return data

    def service_domain_update_with_http_info(self, body, authorization, svc_domain_id, **kwargs):  # noqa: E501
        """Update a service domain by its ID.  # noqa: E501

        Updates a service domain by its ID {svcDomainId}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_domain_update_with_http_info(body, authorization, svc_domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ServiceDomain body: (required)
        :param str authorization: Format: Bearer <token>, with <token> from login API response. (required)
        :param str svc_domain_id: ID for the service domain (required)
        :return: UpdateDocumentResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'svc_domain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_domain_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_domain_update`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `service_domain_update`")  # noqa: E501
        # verify the required parameter 'svc_domain_id' is set
        if ('svc_domain_id' not in params or
                params['svc_domain_id'] is None):
            raise ValueError("Missing the required parameter `svc_domain_id` when calling `service_domain_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'svc_domain_id' in params:
            path_params['svcDomainId'] = params['svc_domain_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/v1.0/servicedomains/{svcDomainId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateDocumentResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
