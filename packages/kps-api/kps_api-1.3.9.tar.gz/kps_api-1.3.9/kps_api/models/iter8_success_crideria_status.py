# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Iter8SuccessCrideriaStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'abort_experiment': 'bool',
        'conclusions': 'list[str]',
        'success_criterion_met': 'bool'
    }

    attribute_map = {
        'abort_experiment': 'abort_experiment',
        'conclusions': 'conclusions',
        'success_criterion_met': 'success_criterion_met'
    }

    def __init__(self, abort_experiment=None, conclusions=None, success_criterion_met=None):  # noqa: E501
        """Iter8SuccessCrideriaStatus - a model defined in Swagger"""  # noqa: E501
        self._abort_experiment = None
        self._conclusions = None
        self._success_criterion_met = None
        self.discriminator = None
        if abort_experiment is not None:
            self.abort_experiment = abort_experiment
        if conclusions is not None:
            self.conclusions = conclusions
        if success_criterion_met is not None:
            self.success_criterion_met = success_criterion_met

    @property
    def abort_experiment(self):
        """Gets the abort_experiment of this Iter8SuccessCrideriaStatus.  # noqa: E501


        :return: The abort_experiment of this Iter8SuccessCrideriaStatus.  # noqa: E501
        :rtype: bool
        """
        return self._abort_experiment

    @abort_experiment.setter
    def abort_experiment(self, abort_experiment):
        """Sets the abort_experiment of this Iter8SuccessCrideriaStatus.


        :param abort_experiment: The abort_experiment of this Iter8SuccessCrideriaStatus.  # noqa: E501
        :type: bool
        """

        self._abort_experiment = abort_experiment

    @property
    def conclusions(self):
        """Gets the conclusions of this Iter8SuccessCrideriaStatus.  # noqa: E501


        :return: The conclusions of this Iter8SuccessCrideriaStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._conclusions

    @conclusions.setter
    def conclusions(self, conclusions):
        """Sets the conclusions of this Iter8SuccessCrideriaStatus.


        :param conclusions: The conclusions of this Iter8SuccessCrideriaStatus.  # noqa: E501
        :type: list[str]
        """

        self._conclusions = conclusions

    @property
    def success_criterion_met(self):
        """Gets the success_criterion_met of this Iter8SuccessCrideriaStatus.  # noqa: E501


        :return: The success_criterion_met of this Iter8SuccessCrideriaStatus.  # noqa: E501
        :rtype: bool
        """
        return self._success_criterion_met

    @success_criterion_met.setter
    def success_criterion_met(self, success_criterion_met):
        """Sets the success_criterion_met of this Iter8SuccessCrideriaStatus.


        :param success_criterion_met: The success_criterion_met of this Iter8SuccessCrideriaStatus.  # noqa: E501
        :type: bool
        """

        self._success_criterion_met = success_criterion_met

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Iter8SuccessCrideriaStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Iter8SuccessCrideriaStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
