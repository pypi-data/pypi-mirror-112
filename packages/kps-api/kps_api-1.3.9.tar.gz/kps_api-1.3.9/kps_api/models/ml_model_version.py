# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MLModelVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'model_size_bytes': 'int',
        'model_version': 'int'
    }

    attribute_map = {
        'description': 'description',
        'model_size_bytes': 'modelSizeBytes',
        'model_version': 'modelVersion'
    }

    def __init__(self, description=None, model_size_bytes=None, model_version=None):  # noqa: E501
        """MLModelVersion - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._model_size_bytes = None
        self._model_version = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if model_size_bytes is not None:
            self.model_size_bytes = model_size_bytes
        if model_version is not None:
            self.model_version = model_version

    @property
    def description(self):
        """Gets the description of this MLModelVersion.  # noqa: E501

        A description of the ML model version  # noqa: E501

        :return: The description of this MLModelVersion.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MLModelVersion.

        A description of the ML model version  # noqa: E501

        :param description: The description of this MLModelVersion.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def model_size_bytes(self):
        """Gets the model_size_bytes of this MLModelVersion.  # noqa: E501

        Size in bytes of the model version binary  # noqa: E501

        :return: The model_size_bytes of this MLModelVersion.  # noqa: E501
        :rtype: int
        """
        return self._model_size_bytes

    @model_size_bytes.setter
    def model_size_bytes(self, model_size_bytes):
        """Sets the model_size_bytes of this MLModelVersion.

        Size in bytes of the model version binary  # noqa: E501

        :param model_size_bytes: The model_size_bytes of this MLModelVersion.  # noqa: E501
        :type: int
        """

        self._model_size_bytes = model_size_bytes

    @property
    def model_version(self):
        """Gets the model_version of this MLModelVersion.  # noqa: E501

        User entered version of the ML model  # noqa: E501

        :return: The model_version of this MLModelVersion.  # noqa: E501
        :rtype: int
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this MLModelVersion.

        User entered version of the ML model  # noqa: E501

        :param model_version: The model_version of this MLModelVersion.  # noqa: E501
        :type: int
        """

        self._model_version = model_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MLModelVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MLModelVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
