# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.iter8_criteria import Iter8Criteria  # noqa: F401,E501
from kps_api.models.iter8_metric import Iter8Metric  # noqa: F401,E501
from kps_api.models.iter8_success_crideria_status import Iter8SuccessCrideriaStatus  # noqa: F401,E501


class Iter8CriteriaDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'criteria': 'Iter8Criteria',
        'metric': 'Iter8Metric',
        'name': 'str',
        'status': 'Iter8SuccessCrideriaStatus'
    }

    attribute_map = {
        'criteria': 'criteria',
        'metric': 'metric',
        'name': 'name',
        'status': 'status'
    }

    def __init__(self, criteria=None, metric=None, name=None, status=None):  # noqa: E501
        """Iter8CriteriaDetail - a model defined in Swagger"""  # noqa: E501
        self._criteria = None
        self._metric = None
        self._name = None
        self._status = None
        self.discriminator = None
        if criteria is not None:
            self.criteria = criteria
        if metric is not None:
            self.metric = metric
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status

    @property
    def criteria(self):
        """Gets the criteria of this Iter8CriteriaDetail.  # noqa: E501


        :return: The criteria of this Iter8CriteriaDetail.  # noqa: E501
        :rtype: Iter8Criteria
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this Iter8CriteriaDetail.


        :param criteria: The criteria of this Iter8CriteriaDetail.  # noqa: E501
        :type: Iter8Criteria
        """

        self._criteria = criteria

    @property
    def metric(self):
        """Gets the metric of this Iter8CriteriaDetail.  # noqa: E501


        :return: The metric of this Iter8CriteriaDetail.  # noqa: E501
        :rtype: Iter8Metric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Iter8CriteriaDetail.


        :param metric: The metric of this Iter8CriteriaDetail.  # noqa: E501
        :type: Iter8Metric
        """

        self._metric = metric

    @property
    def name(self):
        """Gets the name of this Iter8CriteriaDetail.  # noqa: E501


        :return: The name of this Iter8CriteriaDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Iter8CriteriaDetail.


        :param name: The name of this Iter8CriteriaDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Iter8CriteriaDetail.  # noqa: E501


        :return: The status of this Iter8CriteriaDetail.  # noqa: E501
        :rtype: Iter8SuccessCrideriaStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Iter8CriteriaDetail.


        :param status: The status of this Iter8CriteriaDetail.  # noqa: E501
        :type: Iter8SuccessCrideriaStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Iter8CriteriaDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Iter8CriteriaDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
