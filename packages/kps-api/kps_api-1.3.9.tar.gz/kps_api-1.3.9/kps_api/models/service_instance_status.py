# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.service_instance_state_type import ServiceInstanceStateType  # noqa: F401,E501


class ServiceInstanceStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'description': 'str',
        'properties': 'dict(str, object)',
        'state': 'ServiceInstanceStateType',
        'svc_domain_id': 'str',
        'svc_instance_id': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'description': 'description',
        'properties': 'properties',
        'state': 'state',
        'svc_domain_id': 'svcDomainId',
        'svc_instance_id': 'svcInstanceId',
        'updated_at': 'updatedAt'
    }

    def __init__(self, created_at=None, description=None, properties=None, state=None, svc_domain_id=None, svc_instance_id=None, updated_at=None):  # noqa: E501
        """ServiceInstanceStatus - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._description = None
        self._properties = None
        self._state = None
        self._svc_domain_id = None
        self._svc_instance_id = None
        self._updated_at = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if properties is not None:
            self.properties = properties
        self.state = state
        self.svc_domain_id = svc_domain_id
        self.svc_instance_id = svc_instance_id
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this ServiceInstanceStatus.  # noqa: E501


        :return: The created_at of this ServiceInstanceStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ServiceInstanceStatus.


        :param created_at: The created_at of this ServiceInstanceStatus.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this ServiceInstanceStatus.  # noqa: E501


        :return: The description of this ServiceInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceInstanceStatus.


        :param description: The description of this ServiceInstanceStatus.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def properties(self):
        """Gets the properties of this ServiceInstanceStatus.  # noqa: E501

        Properties emitted by the instance  # noqa: E501

        :return: The properties of this ServiceInstanceStatus.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ServiceInstanceStatus.

        Properties emitted by the instance  # noqa: E501

        :param properties: The properties of this ServiceInstanceStatus.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def state(self):
        """Gets the state of this ServiceInstanceStatus.  # noqa: E501


        :return: The state of this ServiceInstanceStatus.  # noqa: E501
        :rtype: ServiceInstanceStateType
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ServiceInstanceStatus.


        :param state: The state of this ServiceInstanceStatus.  # noqa: E501
        :type: ServiceInstanceStateType
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def svc_domain_id(self):
        """Gets the svc_domain_id of this ServiceInstanceStatus.  # noqa: E501


        :return: The svc_domain_id of this ServiceInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._svc_domain_id

    @svc_domain_id.setter
    def svc_domain_id(self, svc_domain_id):
        """Sets the svc_domain_id of this ServiceInstanceStatus.


        :param svc_domain_id: The svc_domain_id of this ServiceInstanceStatus.  # noqa: E501
        :type: str
        """
        if svc_domain_id is None:
            raise ValueError("Invalid value for `svc_domain_id`, must not be `None`")  # noqa: E501

        self._svc_domain_id = svc_domain_id

    @property
    def svc_instance_id(self):
        """Gets the svc_instance_id of this ServiceInstanceStatus.  # noqa: E501


        :return: The svc_instance_id of this ServiceInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._svc_instance_id

    @svc_instance_id.setter
    def svc_instance_id(self, svc_instance_id):
        """Sets the svc_instance_id of this ServiceInstanceStatus.


        :param svc_instance_id: The svc_instance_id of this ServiceInstanceStatus.  # noqa: E501
        :type: str
        """
        if svc_instance_id is None:
            raise ValueError("Invalid value for `svc_instance_id`, must not be `None`")  # noqa: E501

        self._svc_instance_id = svc_instance_id

    @property
    def updated_at(self):
        """Gets the updated_at of this ServiceInstanceStatus.  # noqa: E501


        :return: The updated_at of this ServiceInstanceStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ServiceInstanceStatus.


        :param updated_at: The updated_at of this ServiceInstanceStatus.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceInstanceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceInstanceStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
