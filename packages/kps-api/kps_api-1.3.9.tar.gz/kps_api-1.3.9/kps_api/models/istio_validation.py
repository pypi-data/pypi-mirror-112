# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from kps_api.models.istio_check import IstioCheck  # noqa: F401,E501
from kps_api.models.istio_validation_key import IstioValidationKey  # noqa: F401,E501


class IstioValidation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'checks': 'list[IstioCheck]',
        'name': 'str',
        'object_type': 'str',
        'references': 'list[IstioValidationKey]',
        'valid': 'bool'
    }

    attribute_map = {
        'checks': 'checks',
        'name': 'name',
        'object_type': 'objectType',
        'references': 'references',
        'valid': 'valid'
    }

    def __init__(self, checks=None, name=None, object_type=None, references=None, valid=None):  # noqa: E501
        """IstioValidation - a model defined in Swagger"""  # noqa: E501
        self._checks = None
        self._name = None
        self._object_type = None
        self._references = None
        self._valid = None
        self.discriminator = None
        if checks is not None:
            self.checks = checks
        self.name = name
        self.object_type = object_type
        if references is not None:
            self.references = references
        self.valid = valid

    @property
    def checks(self):
        """Gets the checks of this IstioValidation.  # noqa: E501

        Array of checks. It might be empty.  # noqa: E501

        :return: The checks of this IstioValidation.  # noqa: E501
        :rtype: list[IstioCheck]
        """
        return self._checks

    @checks.setter
    def checks(self, checks):
        """Sets the checks of this IstioValidation.

        Array of checks. It might be empty.  # noqa: E501

        :param checks: The checks of this IstioValidation.  # noqa: E501
        :type: list[IstioCheck]
        """

        self._checks = checks

    @property
    def name(self):
        """Gets the name of this IstioValidation.  # noqa: E501

        Name of the object itself  # noqa: E501

        :return: The name of this IstioValidation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IstioValidation.

        Name of the object itself  # noqa: E501

        :param name: The name of this IstioValidation.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def object_type(self):
        """Gets the object_type of this IstioValidation.  # noqa: E501

        Type of the object  # noqa: E501

        :return: The object_type of this IstioValidation.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this IstioValidation.

        Type of the object  # noqa: E501

        :param object_type: The object_type of this IstioValidation.  # noqa: E501
        :type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")  # noqa: E501

        self._object_type = object_type

    @property
    def references(self):
        """Gets the references of this IstioValidation.  # noqa: E501

        Related objects (only validation errors)  # noqa: E501

        :return: The references of this IstioValidation.  # noqa: E501
        :rtype: list[IstioValidationKey]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this IstioValidation.

        Related objects (only validation errors)  # noqa: E501

        :param references: The references of this IstioValidation.  # noqa: E501
        :type: list[IstioValidationKey]
        """

        self._references = references

    @property
    def valid(self):
        """Gets the valid of this IstioValidation.  # noqa: E501

        Represents validity of the object: in case of warning, validity remains as true  # noqa: E501

        :return: The valid of this IstioValidation.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this IstioValidation.

        Represents validity of the object: in case of warning, validity remains as true  # noqa: E501

        :param valid: The valid of this IstioValidation.  # noqa: E501
        :type: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")  # noqa: E501

        self._valid = valid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IstioValidation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioValidation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
