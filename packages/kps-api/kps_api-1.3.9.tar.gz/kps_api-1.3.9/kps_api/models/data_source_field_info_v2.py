# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DataSourceFieldInfoV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'topic': 'str'
    }

    attribute_map = {
        'name': 'name',
        'topic': 'topic'
    }

    def __init__(self, name=None, topic=None):  # noqa: E501
        """DataSourceFieldInfoV2 - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._topic = None
        self.discriminator = None
        self.name = name
        self.topic = topic

    @property
    def name(self):
        """Gets the name of this DataSourceFieldInfoV2.  # noqa: E501

        Name of the field. A unique name within the the data source.  # noqa: E501

        :return: The name of this DataSourceFieldInfoV2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSourceFieldInfoV2.

        Name of the field. A unique name within the the data source.  # noqa: E501

        :param name: The name of this DataSourceFieldInfoV2.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def topic(self):
        """Gets the topic of this DataSourceFieldInfoV2.  # noqa: E501

        topic for the field The topic specified depends on the protocol in the data source. Specify the mqqtTopic for the MQTT protocol. For the RTSP protocol, the topic is the server endpoint or named protocol stream in the RSTP URL.  # noqa: E501

        :return: The topic of this DataSourceFieldInfoV2.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this DataSourceFieldInfoV2.

        topic for the field The topic specified depends on the protocol in the data source. Specify the mqqtTopic for the MQTT protocol. For the RTSP protocol, the topic is the server endpoint or named protocol stream in the RSTP URL.  # noqa: E501

        :param topic: The topic of this DataSourceFieldInfoV2.  # noqa: E501
        :type: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")  # noqa: E501

        self._topic = topic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataSourceFieldInfoV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSourceFieldInfoV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
