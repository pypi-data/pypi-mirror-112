# coding: utf-8

"""
    Karbon Platform Services API reference.

    OpenAPI documentation for public facing Karbon Platform Services API  This API documentation is generated from source code using go-swagger. Do not edit the generated kps_api.json directly!  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: karbon-platform-services-api@nutanix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AuditLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'edge_ids': 'str',
        'hostname': 'str',
        'request_header': 'str',
        'request_id': 'str',
        'request_method': 'str',
        'request_payload': 'str',
        'request_url': 'str',
        'response_code': 'int',
        'response_length': 'int',
        'response_message': 'str',
        'started_at': 'datetime',
        'tenant_id': 'str',
        'time_ms': 'float',
        'user_email': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'edge_ids': 'edgeIds',
        'hostname': 'hostname',
        'request_header': 'requestHeader',
        'request_id': 'requestId',
        'request_method': 'requestMethod',
        'request_payload': 'requestPayload',
        'request_url': 'requestUrl',
        'response_code': 'responseCode',
        'response_length': 'responseLength',
        'response_message': 'responseMessage',
        'started_at': 'startedAt',
        'tenant_id': 'tenantId',
        'time_ms': 'timeMs',
        'user_email': 'userEmail'
    }

    def __init__(self, created_at=None, edge_ids=None, hostname=None, request_header=None, request_id=None, request_method=None, request_payload=None, request_url=None, response_code=None, response_length=None, response_message=None, started_at=None, tenant_id=None, time_ms=None, user_email=None):  # noqa: E501
        """AuditLog - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._edge_ids = None
        self._hostname = None
        self._request_header = None
        self._request_id = None
        self._request_method = None
        self._request_payload = None
        self._request_url = None
        self._response_code = None
        self._response_length = None
        self._response_message = None
        self._started_at = None
        self._tenant_id = None
        self._time_ms = None
        self._user_email = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if edge_ids is not None:
            self.edge_ids = edge_ids
        if hostname is not None:
            self.hostname = hostname
        if request_header is not None:
            self.request_header = request_header
        if request_id is not None:
            self.request_id = request_id
        if request_method is not None:
            self.request_method = request_method
        if request_payload is not None:
            self.request_payload = request_payload
        if request_url is not None:
            self.request_url = request_url
        if response_code is not None:
            self.response_code = response_code
        if response_length is not None:
            self.response_length = response_length
        if response_message is not None:
            self.response_message = response_message
        if started_at is not None:
            self.started_at = started_at
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if time_ms is not None:
            self.time_ms = time_ms
        if user_email is not None:
            self.user_email = user_email

    @property
    def created_at(self):
        """Gets the created_at of this AuditLog.  # noqa: E501


        :return: The created_at of this AuditLog.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuditLog.


        :param created_at: The created_at of this AuditLog.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def edge_ids(self):
        """Gets the edge_ids of this AuditLog.  # noqa: E501


        :return: The edge_ids of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._edge_ids

    @edge_ids.setter
    def edge_ids(self, edge_ids):
        """Sets the edge_ids of this AuditLog.


        :param edge_ids: The edge_ids of this AuditLog.  # noqa: E501
        :type: str
        """

        self._edge_ids = edge_ids

    @property
    def hostname(self):
        """Gets the hostname of this AuditLog.  # noqa: E501


        :return: The hostname of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AuditLog.


        :param hostname: The hostname of this AuditLog.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def request_header(self):
        """Gets the request_header of this AuditLog.  # noqa: E501


        :return: The request_header of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._request_header

    @request_header.setter
    def request_header(self, request_header):
        """Sets the request_header of this AuditLog.


        :param request_header: The request_header of this AuditLog.  # noqa: E501
        :type: str
        """

        self._request_header = request_header

    @property
    def request_id(self):
        """Gets the request_id of this AuditLog.  # noqa: E501


        :return: The request_id of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this AuditLog.


        :param request_id: The request_id of this AuditLog.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def request_method(self):
        """Gets the request_method of this AuditLog.  # noqa: E501


        :return: The request_method of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._request_method

    @request_method.setter
    def request_method(self, request_method):
        """Sets the request_method of this AuditLog.


        :param request_method: The request_method of this AuditLog.  # noqa: E501
        :type: str
        """

        self._request_method = request_method

    @property
    def request_payload(self):
        """Gets the request_payload of this AuditLog.  # noqa: E501


        :return: The request_payload of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._request_payload

    @request_payload.setter
    def request_payload(self, request_payload):
        """Sets the request_payload of this AuditLog.


        :param request_payload: The request_payload of this AuditLog.  # noqa: E501
        :type: str
        """

        self._request_payload = request_payload

    @property
    def request_url(self):
        """Gets the request_url of this AuditLog.  # noqa: E501


        :return: The request_url of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._request_url

    @request_url.setter
    def request_url(self, request_url):
        """Sets the request_url of this AuditLog.


        :param request_url: The request_url of this AuditLog.  # noqa: E501
        :type: str
        """

        self._request_url = request_url

    @property
    def response_code(self):
        """Gets the response_code of this AuditLog.  # noqa: E501


        :return: The response_code of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this AuditLog.


        :param response_code: The response_code of this AuditLog.  # noqa: E501
        :type: int
        """

        self._response_code = response_code

    @property
    def response_length(self):
        """Gets the response_length of this AuditLog.  # noqa: E501


        :return: The response_length of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._response_length

    @response_length.setter
    def response_length(self, response_length):
        """Sets the response_length of this AuditLog.


        :param response_length: The response_length of this AuditLog.  # noqa: E501
        :type: int
        """

        self._response_length = response_length

    @property
    def response_message(self):
        """Gets the response_message of this AuditLog.  # noqa: E501


        :return: The response_message of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._response_message

    @response_message.setter
    def response_message(self, response_message):
        """Sets the response_message of this AuditLog.


        :param response_message: The response_message of this AuditLog.  # noqa: E501
        :type: str
        """

        self._response_message = response_message

    @property
    def started_at(self):
        """Gets the started_at of this AuditLog.  # noqa: E501


        :return: The started_at of this AuditLog.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this AuditLog.


        :param started_at: The started_at of this AuditLog.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AuditLog.  # noqa: E501


        :return: The tenant_id of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AuditLog.


        :param tenant_id: The tenant_id of this AuditLog.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def time_ms(self):
        """Gets the time_ms of this AuditLog.  # noqa: E501


        :return: The time_ms of this AuditLog.  # noqa: E501
        :rtype: float
        """
        return self._time_ms

    @time_ms.setter
    def time_ms(self, time_ms):
        """Sets the time_ms of this AuditLog.


        :param time_ms: The time_ms of this AuditLog.  # noqa: E501
        :type: float
        """

        self._time_ms = time_ms

    @property
    def user_email(self):
        """Gets the user_email of this AuditLog.  # noqa: E501


        :return: The user_email of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this AuditLog.


        :param user_email: The user_email of this AuditLog.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
