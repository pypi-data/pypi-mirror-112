Metadata-Version: 2.1
Name: GoogleScholarReport
Version: 0.1.4
Summary: Bibliographic capture system for non-scrapping data sources
Home-page: https://github.com/readingwritingcode/google-scholar-report
Author: Colav
Author-email: grupocolav@udea.edu.co
License: BSD
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Description-Content-Type: text/markdown
Requires-Dist: beautifulsoup4
Requires-Dist: bibtexparser
Requires-Dist: bs4
Requires-Dist: et-xmlfile
Requires-Dist: future
Requires-Dist: fuzzywuzzy
Requires-Dist: helium
Requires-Dist: lxml
Requires-Dist: numpy
Requires-Dist: openpyxl
Requires-Dist: pandas
Requires-Dist: pyparsing
Requires-Dist: python-dateutil
Requires-Dist: python-Levenshtein
Requires-Dist: pytz
Requires-Dist: selenium
Requires-Dist: six
Requires-Dist: soupsieve
Requires-Dist: Unidecode
Requires-Dist: urllib3

# Google Scholar Report
<center><img src="https://raw.githubusercontent.com/colav/colav.github.io/master/img/Logo.png"/></center>

# Description
Google scholar report is a tool for collect data from google scholar profiles and store it with metadata for each scientific paper. This tool have three main forms of use: generic, authenticated and admin; which difer in amount and cuality of metadata results. Default output is xlsx.

## Usage from python-cli

## Installation Package
`$pip install GoogleScholarReport`

For the firts option of use (generic), issue: 

```python
>>> from GoogleScholarReport import collector
>>> collector.gsr('url_to_google_scholar_profile', ouput='json')

```
For the second option of use (user authenticate):
```python
>>> from GoogleScholarReport import collector
>>> collector.gsr('url_to_google_scholar_profile',email='user_email_google_scholar',password='pass_user_gs',' ouput='json')

```

Finally, for admin mode, issue: 
```python
>>> from GoogleScholarReport import collector
>>> collector.gsr('url_to_google_scholar_profile',email='user_email_google_scholar',password='pass_user_gs', ouput='some_ouput(csv,json)',admin=True)

```

# Usage from comman-line 
From comman line, this tool have three main forms of use: generic, authenticated and admin; which difer in amount and cuality of metadata results.

For the firts option of use (generic), issue: 

```bash
collector "url_for_the_google_scholar_profile"
```
The above option return one xlsx file report in the current working directory with the following metadata:

'title', 'author', 'journal', 'volume', 'number','pages', 'year', 'cite_id', 'cites', 'TitleU'.

If you want the output in csv or json format agregate the bellow flag and the desire ouput format, for instance:

```bash
collector "url_for_the_google_scholar_profile" --output csv
```

For the second option of use (user authenticate):

```bash
collector "url_for_the_google_scholar_profile" --email <email> --password <password>
```

This return one xlsx file report in the current working directory with the following metadata:

'cite_id', 'cites', 'publisher', 'year', 'pages', 'number', 'volume', 'journal', 'author', 'title','ENTRYTYPE', 'ID', 'school', 'booktitle', 'organization', 'note','month', 'institution'

 Finally, for admin mode, issue: 

 ```bash
collector "url_for_the_google_scholar_profile" --email <email> --password <password> --admin
```

This return by default an xlsx file with the same metadata that option two plus one fiedl 'bibtex'.

In general this commanline tool have the following form:

```bash
collector "url_for_the_google_scholar_profile" --email <user_email> --password <password> --output <format> --admin
```


