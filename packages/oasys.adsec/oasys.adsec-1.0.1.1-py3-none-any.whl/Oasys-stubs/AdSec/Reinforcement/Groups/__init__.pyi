#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta
from Oasys.AdSec import IWarning
from Oasys.AdSec.Reinforcement import IBarBundle
from Oasys.AdSec.Reinforcement.Layers import ILayer
from Oasys.AdSec.Reinforcement.Preloads import IPreload
from Oasys.Collections import IList
from Oasys.Profiles import IPoint
from UnitsNet import Angle, Length


# noinspection PyPep8Naming
class IGroup(metaclass=ABCMeta):
    """Defines a group of reinforcement.
    
    See "~/articles/glossary.md#groupgroup""Glossary/see
    """

    @abstractmethod
    def Validate(self) -> IList[IWarning]:
        """Checks that the definition of the group is consistent.
        A group must be valid for its containing section to be analysed.

        :return: Warnings observed from the reinforcement group definition.
        :rtype: IList[IWarning]
        """
        pass


# noinspection PyPep8Naming
class ILongitudinalGroup(IGroup, metaclass=ABCMeta):
    """Defines a group of longitudinal reinforcement.
    """

    @property
    def Preload(self) -> IPreload:
        """The preload for the reinforcement group.
        It can be applied to bars as a force, a stress or a strain.
        """
        pass

    @Preload.setter
    def Preload(self, value: IPreload) -> None: ...


# noinspection PyPep8Naming
class IArcGroup(ILongitudinalGroup, IGroup, metaclass=ABCMeta):
    """An arc reinforcement group.
    """

    @property
    def Layer(self) -> ILayer:
        """The layer of reinforcement to be positioned along the arc.
        """
        pass

    @Layer.setter
    def Layer(self, value: ILayer) -> None: ...

    @property
    def SweepAngle(self) -> Angle:
        """The angle sweeped by the arc from its start angle.<br />
        Positive angle is considered anti-clockwise.
        """
        pass

    @SweepAngle.setter
    def SweepAngle(self, value: Angle) -> None: ...

    @property
    def StartAngle(self) -> Angle:
        """The start angle of the arc.<br />
        Positive angle is considered anti-clockwise.
        """
        pass

    @StartAngle.setter
    def StartAngle(self, value: Angle) -> None: ...

    @property
    def Radius(self) -> Length:
        """The radius of the arc.
        """
        pass

    @Radius.setter
    def Radius(self, value: Length) -> None: ...

    @property
    def Centre(self) -> IPoint:
        """The centre of the arc.
        """
        pass

    @Centre.setter
    def Centre(self, value: IPoint) -> None: ...

    @staticmethod
    def Create(centre: IPoint, radius: Length, startAngle: Angle, sweepAngle: Angle, layer: ILayer) -> IArcGroup:
        """Creates a new "IArcGroup" reinforcement group from its
        "Property Centre",
        "Property Radius",
        "Property StartAngle",
        "Property SweepAngle" and
        "Property Layer".

        :param centre: Defines the arc's centre.
        :type centre: IPoint
        :param radius: Defines the arc's radius.
        :type radius: Length
        :param startAngle: Defines the arc's start angle.
Positive angle is considered anti-clockwise.
        :type startAngle: Angle
        :param sweepAngle: Defines the arc's sweep angle.
Positive angle is considered anti-clockwise.
        :type sweepAngle: Angle
        :param layer: Defines the bar (or bar bundles) that will be positioned along the arc.
        :type layer: ILayer
        :return: A new arc reinforcement group.
        :rtype: IArcGroup
        """
        pass


# noinspection PyPep8Naming
class ICircleGroup(ILongitudinalGroup, IGroup, metaclass=ABCMeta):
    """A circular reinforcement group.
    """

    @property
    def Layer(self) -> ILayer:
        """The layer of reinforcement to be positioned around the circle.
        """
        pass

    @Layer.setter
    def Layer(self, value: ILayer) -> None: ...

    @property
    def StartAngle(self) -> Angle:
        """The start angle of the circle.<br />
        Positive angle is considered anti-clockwise.
        """
        pass

    @StartAngle.setter
    def StartAngle(self, value: Angle) -> None: ...

    @property
    def Radius(self) -> Length:
        """The radius of the circle.
        """
        pass

    @Radius.setter
    def Radius(self, value: Length) -> None: ...

    @property
    def Centre(self) -> IPoint:
        """The centre of the circle.
        """
        pass

    @Centre.setter
    def Centre(self, value: IPoint) -> None: ...

    @staticmethod
    def Create(centre: IPoint, radius: Length, startAngle: Angle, layer: ILayer) -> ICircleGroup:
        """Creates a new "ICircleGroup" reinforcement group from its
        "Property Centre",
        "Property Radius",
        "Property StartAngle" and
        "Property Layer".

        :param centre: Defines the circle's centre.
        :type centre: IPoint
        :param radius: Defines the circle's radius.
        :type radius: Length
        :param startAngle: Defines the circle's start angle.
Positive angle is considered anti-clockwise.
        :type startAngle: Angle
        :param layer: Defines the bar (or bar bundles) that will be positioned around the circle.
        :type layer: ILayer
        :return: A new circular reinforcement group.
        :rtype: ICircleGroup
        """
        pass


# noinspection PyPep8Naming
class ILineGroup(ILongitudinalGroup, IGroup, metaclass=ABCMeta):
    """A linear reinforcement group that contains one or more parallel
    layers of reinforcement bars or bundles of bars arranged in straight lines.
    """

    @property
    def Layer(self) -> ILayer:
        """The layer of reinforcement to be positioned along the line.
        """
        pass

    @Layer.setter
    def Layer(self, value: ILayer) -> None: ...

    @property
    def LastBarPosition(self) -> IPoint:
        """Position of the centre of the last reinforcement bar or bundle of bars,
        in the local coordinate system of the containing "None !:ISection".
        """
        pass

    @LastBarPosition.setter
    def LastBarPosition(self, value: IPoint) -> None: ...

    @property
    def FirstBarPosition(self) -> IPoint:
        """Position of the centre of the first reinforcement bar or bundle of bars,
        in the local coordinate system of the containing "None !:ISection".
        """
        pass

    @FirstBarPosition.setter
    def FirstBarPosition(self, value: IPoint) -> None: ...

    @staticmethod
    def Create(firstBarPosition: IPoint, lastBarPosition: IPoint, layer: ILayer) -> ILineGroup:
        """Creates a new "ILineGroup" reinforcement group from its
        "Property FirstBarPosition",
        "Property LastBarPosition" and
        "Property Layer".

        :param firstBarPosition: Defines the position of the first reinforcement bar in the line group.
        :type firstBarPosition: IPoint
        :param lastBarPosition: Defines the position of the last reinforcement bar in the line group.
        :type lastBarPosition: IPoint
        :param layer: Defines the bar (or bar bundles) that will be positioned along the line.
        :type layer: ILayer
        :return: A new line reinforcement group.
        :rtype: ILineGroup
        """
        pass


# noinspection PyPep8Naming
class ISingleBars(ILongitudinalGroup, IGroup, metaclass=ABCMeta):
    """A reinforcement group contains a singe bar bundle located on the profile at one or more positions.
    """

    @property
    def BarBundle(self) -> IBarBundle:
        """The bar (or bundle of bars) that will be placed at each position.
        """
        pass

    @BarBundle.setter
    def BarBundle(self, value: IBarBundle) -> None: ...

    @property
    def Positions(self) -> IList[IPoint]:
        """The positions for the "Property BarBundle"s.
        """
        pass

    @Positions.setter
    def Positions(self, value: IList[IPoint]) -> None: ...

    @staticmethod
    def Create(barBundle: IBarBundle) -> ISingleBars:
        """Creates a new "ISingleBars" reinforcement group from its "Property BarBundle".

        :param barBundle: Defines the bar (or bundle of bars) that will be placed at each position.
        :type barBundle: IBarBundle
        :return: Reinforcement group with empty list of .
Reinforcement bars are added to the group on adding positions.
        :rtype: ISingleBars
        """
        pass
