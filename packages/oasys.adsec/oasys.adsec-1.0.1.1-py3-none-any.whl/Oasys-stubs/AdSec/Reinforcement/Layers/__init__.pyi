#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta
from Oasys.AdSec.Reinforcement import IBarBundle
from UnitsNet import Length


# noinspection PyPep8Naming
class ILayer(metaclass=ABCMeta):
    """A reinforcement layer.
    
    See "~/articles/glossary.md#layerlayer""Glossary/see
    """

    @property
    def BarBundle(self) -> IBarBundle:
        """The bar (or bundle of bars) that will be placed at each position.
        """
        pass

    @BarBundle.setter
    def BarBundle(self, value: IBarBundle) -> None: ...


# noinspection PyPep8Naming
class ILayerByBarCount(ILayer, metaclass=ABCMeta):
    """A reinforcement layer defined by the number of bundles or single bars in the layer.
    """

    @property
    def Count(self) -> int:
        """The number of bars in the layer.
        """
        pass

    @Count.setter
    def Count(self, value: int) -> None: ...

    @staticmethod
    def Create(count: int, barBundle: IBarBundle) -> ILayerByBarCount:
        """Creates a new "ILayerByBarCount" from the position
        count and bar (or bundle of bars) to be placed at each position.

        :param count: Defines the number of bars in the layer.
        :type count: int
        :param barBundle: Defines the bar (or bundle of bars) that will be placed at each position.
        :type barBundle: IBarBundle
        :return: Reinforcement layer with the specified bar count and bar bundle.
        :rtype: ILayerByBarCount
        """
        pass


# noinspection PyPep8Naming
class ILayerByBarPitch(ILayer, metaclass=ABCMeta):
    """A reinforcement layer defined by the bar pitch.
    The number of bars is calculated based on the available length and the given bar pitch.
    The bar pitch is re-calculated to place the bars at equal spacing, with a maximum final pitch of the given value.
    Example: If the available length for the bars is 1000mm and the given bar pitch is 300mm,
    then the number of spacings that can fit in the available length is calculated as 1000 / 300 i.e. 3.333.
    The number of spacings is rounded up (3.333 rounds up to 4) and the bar pitch re-calculated (1000mm / 4), resulting in a final pitch of 250mm.
    """

    @property
    def Pitch(self) -> Length:
        """The pitch is the maximum centre-to-centre spacing of the bundles or single bars.
        """
        pass

    @Pitch.setter
    def Pitch(self, value: Length) -> None: ...

    @staticmethod
    def Create(barBundle: IBarBundle, pitch: Length) -> ILayerByBarPitch:
        """Creates a new "ILayerByBarPitch" from the centre-to-centre
        spacing (pitch) and bar (or bundle of bars) to be placed.

        :param barBundle: Defines the bar (or bundle of bars) that will be placed at each position.
        :type barBundle: IBarBundle
        :param pitch: Defines the centre-to-centre spacing of bar bundles in the layer.
        :type pitch: Length
        :return: Reinforcement layer with the specified bar bundle and pitch.
        :rtype: ILayerByBarPitch
        """
        pass
