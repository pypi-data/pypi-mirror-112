#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta
from Oasys.AdSec.DesignCode import IDesignCode
from Oasys.AdSec.Materials import IMaterial
from Oasys.AdSec.Mesh import ILoadCurve, ILoadSurface
from Oasys.AdSec.Reinforcement.Groups import IGroup
from Oasys.Collections import IList
from Oasys.Profiles import IPoint, IProfile
from Oasys.Units import AxialStiffness, BendingStiffness, Curvature, Moment, Strain
from System import DateTime
from UnitsNet import Angle, Force, Length, Ratio


# noinspection PyPep8Naming
class IAdSec(metaclass=ABCMeta):
    """An AdSec application instance. It allows to set a "None IDesignCode".
    The design code is used to analyse a "ISection".
    """

    @property
    def DesignCode(self) -> IDesignCode:
        """The design code to be considered for analysis.
        """
        pass

    @DesignCode.setter
    def DesignCode(self, value: IDesignCode) -> None: ...

    @staticmethod
    def Create(designCode: IDesignCode) -> IAdSec:
        """Creates a new "IAdSec" application instance.

        :param designCode: The design code to be considered for analysis.
        :type designCode: IDesignCode
        :return: AdSec application instance with the specified design code.
        :rtype: IAdSec
        """
        pass

    @abstractmethod
    def Analyse(self, section: ISection) -> ISolution:
        """Analyses a "ISection" for a "ISolution".
        
        See "~/articles/glossary.md#results""Glossary/see

        :param section: The section to be analysed.
        :type section: ISection
        :return: Solution for the specified section.
        :rtype: ISolution
        """
        pass


# noinspection PyPep8Naming
class ISection(metaclass=ABCMeta):
    """Represents a cross-section through a structural member of the specified material which
    can contain reinforcement. A section has a profile that describes its shape, size and orientation.
    
    See "~/articles/glossary.md#sectionsection""Glossary/see
    """

    @property
    def SubComponents(self) -> IList[ISubComponent]:
        """The sub-components contained within the section
        
        See "~/articles/glossary.md#sub-componentsub-component""Glossary/see
        """
        pass

    @SubComponents.setter
    def SubComponents(self, value: IList[ISubComponent]) -> None: ...

    @property
    def ReinforcementGroups(self) -> IList[IGroup]:
        """The groups of reinforcement in the section (applicable for only concrete material).
        
        See "~/articles/glossary.md#reinforcementreinforcement""Glossary/see
        """
        pass

    @ReinforcementGroups.setter
    def ReinforcementGroups(self, value: IList[IGroup]) -> None: ...

    @property
    def Material(self) -> IMaterial:
        """The material used for the "Property Profile".
        
        See "~/articles/glossary.md#materialmaterial""Glossary/see
        """
        pass

    @Material.setter
    def Material(self, value: IMaterial) -> None: ...

    @property
    def Profile(self) -> IProfile:
        """The profile that describes the section's shape, size and orientation.
        
        See "~/articles/glossary.md#profileprofile""Glossary/see
        """
        pass

    @Profile.setter
    def Profile(self, value: IProfile) -> None: ...

    @staticmethod
    def Create(profile: IProfile, material: IMaterial) -> ISection:
        """Creates a new "ISection".

        :param profile: Defines the section's shape, size and orientation.
        :type profile: IProfile
        :param material: Defines the section's material.
        :type material: IMaterial
        :return: Section with the specified profile and material.
        :rtype: ISection
        """
        pass


# noinspection PyPep8Naming
class ISolution(metaclass=ABCMeta):
    """Solution for a section.
    
    See "~/articles/glossary.md#results""Glossary/see
    """

    @property
    def Warnings(self) -> IList[IWarning]:
        """Warnings observed during the analysis.
        """
        pass

    @property
    def Serviceability(self) -> IServiceability:
        """Serviceability allows to check serviceability results.
        """
        pass

    @property
    def Strength(self) -> IStrength:
        """Strength allows to check strength results.
        """
        pass


# noinspection PyPep8Naming
class ISubComponent(metaclass=ABCMeta):
    """A sub-component defines a section with an offset
    relative to its containing section. Sub-components can be added to "None SubComponents".
    
    See "~/articles/glossary.md#sub-componentsub-component""Glossary/see
    """

    @property
    def Section(self) -> ISection:
        """The section definition for the sub-component.
        """
        pass

    @property
    def Offset(self) -> IPoint:
        """Offset is applied between origins of containing section and sub-component.
        The offset of the profile is in the containing section's Profile Coordinate System.
        Any rotation applied to the containing section's profile will be applied to its sub-components.
        Sub-components can also have an additional rotation for their profiles.
        """
        pass

    @staticmethod
    def Create(section: ISection, offset: IPoint) -> ISubComponent:
        """Creates a new sub-component from its section definition and
        offset relative to the containing section.
        """
        pass


# noinspection PyPep8Naming
class IServiceability(metaclass=ABCMeta):
    """Performs serviceability analysis (SLS), for a given "ILoad" or "IDeformation".
    
    See "~/articles/glossary.md#serviceability-resultserviceability-result""Glossary/see
    """

    @abstractmethod
    @typing.overload
    def Check(self, deformation: IDeformation) -> IServiceabilityResult:
        """Calculates serviceability results.

        :param deformation: The deformation for which
the serviceability results are to be calculated.
        :type deformation: IDeformation
        :return: Serviceability results for the specified deformation.
        :rtype: IServiceabilityResult
        """
        pass

    @abstractmethod
    @typing.overload
    def Check(self, load: ILoad) -> IServiceabilityResult:
        """Calculates serviceability results.

        :param load: The load for which the serviceability results are to be calculated.
        :type load: ILoad
        :return: Serviceability results for the specified load.
        :rtype: IServiceabilityResult
        """
        pass


# noinspection PyPep8Naming
class IStrength(metaclass=ABCMeta):
    """Performs strength analysis (ULS), for a given "ILoad" or "IDeformation".
    
    See "~/articles/glossary.md#strength-resultstrength-result""Glossary/see
    """

    @abstractmethod
    @typing.overload
    def Check(self, deformation: IDeformation) -> IStrengthResult:
        """Calculates strength results.

        :param deformation: The deformation for which the strength results are to be calculated.
        :type deformation: IDeformation
        :return: Strength results for the specified deformation.
        :rtype: IStrengthResult
        """
        pass

    @abstractmethod
    @typing.overload
    def Check(self, load: ILoad) -> IStrengthResult:
        """Calculates strength results.

        :param load: The load for which the strength results are to be calculated.
        :type load: ILoad
        :return: Strength results for the specified load.
        :rtype: IStrengthResult
        """
        pass

    @abstractmethod
    def GetFailureSurface(self) -> ILoadSurface:
        """Generates the strength failure surface.<br /><center><img src="../images/FailureSurface.PNG" /></center>

        :return: The failure surface, .
        :rtype: ILoadSurface
        """
        pass

    @abstractmethod
    def GetForceMomentInteractionCurve(self, momentAngle: Angle) -> IList[ILoadCurve]:
        """Calculates a force-moment interaction curve.<br /><center><img src="../images/ForceMomentCurve.PNG" /></center>

        :param momentAngle: The moment angle, which must be in the range -180 degrees to +180 degrees.
        :type momentAngle: Angle
        :return: The force-moment interaction curve, .
        :rtype: IList[ILoadCurve]
        """
        pass

    @abstractmethod
    def GetMomentMomentInteractionCurve(self, axialForce: Force) -> IList[ILoadCurve]:
        """Calculates a moment-moment interaction curve.<br /><center><img src="../images/MomentMomentCurve.PNG" /></center>

        :param axialForce: The axial force.
        :type axialForce: Force
        :return: The force-moment interaction curve, .
        :rtype: IList[ILoadCurve]
        """
        pass


# noinspection PyPep8Naming
class IWarning(metaclass=ABCMeta):
    """A notification with information about any unusual observation.
    """

    @property
    def RecordTime(self) -> DateTime:
        """Time in UTC at which the observation was recorded.
        """
        pass

    @property
    def Description(self) -> str:
        """Describes the observation.
        """
        pass


# noinspection PyPep8Naming
class IDeformation(metaclass=ABCMeta):
    """A deformation.
    
    See "~/articles/glossary.md#deformationdeformation""Glossary/see
    """

    @property
    def ZZ(self) -> Curvature:
        """The curvature about local z-axis. It follows the
        <a href="https://en.wikipedia.org/wiki/Right-hand_rule">right hand grip rule</a>
        about the axis. Positive ZZ is anti-clockwise curvature about local z-axis.
        """
        pass

    @ZZ.setter
    def ZZ(self, value: Curvature) -> None: ...

    @property
    def YY(self) -> Curvature:
        """The curvature about local y-axis. It follows the
        <a href="https://en.wikipedia.org/wiki/Right-hand_rule">right hand grip rule</a>
        about the axis. Positive YY is anti-clockwise curvature about local y-axis.
        """
        pass

    @YY.setter
    def YY(self, value: Curvature) -> None: ...

    @property
    def X(self) -> Strain:
        """The axial strain. Positive X indicates tension.
        """
        pass

    @X.setter
    def X(self, value: Strain) -> None: ...

    @staticmethod
    def Create(x: Strain, yy: Curvature, zz: Curvature) -> IDeformation:
        """Creates a new "IDeformation" from its
        "Property X",
        "Property YY" and
        "Property ZZ" components.

        :param x: The axial strain.
Positive x indicates tension.
        :type x: Strain
        :param yy: The curvature about local y-axis.
Positive yy is anti-clockwise curvature about local y-axis.
        :type yy: Curvature
        :param zz: The curvature about local z-axis.
Positive zz is anti-clockwise curvature about local z-axis.
        :type zz: Curvature
        :return: Deformation with the specified axial strain and curvature about local y and z axes.
        :rtype: IDeformation
        """
        pass


# noinspection PyPep8Naming
class ILoad(metaclass=ABCMeta):
    """Defines an axial force and bending about the local y-axis and z-axis.
    
    See "~/articles/glossary.md#loadload""Glossary/see
    """

    @property
    def ZZ(self) -> Moment:
        """The moment about the local z-axis. It follows the
        <a href="https://en.wikipedia.org/wiki/Right-hand_rule">right hand grip rule</a>
        about the axis. Positive value is anti-clockwise about the local z-axis.
        """
        pass

    @ZZ.setter
    def ZZ(self, value: Moment) -> None: ...

    @property
    def YY(self) -> Moment:
        """The moment about the local y-axis. It follows the
        <a href="https://en.wikipedia.org/wiki/Right-hand_rule">right hand grip rule</a>
        about the axis. Positive value is anti-clockwise about the local y-axis.
        """
        pass

    @YY.setter
    def YY(self, value: Moment) -> None: ...

    @property
    def X(self) -> Force:
        """The axial force.
        Tension is represented by a positive value, compression by a negative value.
        """
        pass

    @X.setter
    def X(self, value: Force) -> None: ...

    @staticmethod
    def Create(x: Force, yy: Moment, zz: Moment) -> ILoad:
        """Creates a new "ILoad" from its
        "Property X",
        "Property YY" and
        "Property ZZ" components.

        :param x: The axial force.
Positive x is tension.
        :type x: Force
        :param yy: The moment about local y-axis.
Positive yy is anti-clockwise moment about local y-axis.
        :type yy: Moment
        :param zz: The moment about local z-axis.
Positive zz is anti-clockwise moment about local z-axis.
        :type zz: Moment
        :return: Load with the specified axial force and moments about local y and z axes.
        :rtype: ILoad
        """
        pass


# noinspection PyPep8Naming
class IVersion(metaclass=ABCMeta):

    @staticmethod
    def Api() -> str:
        """The version of the API.
        """
        pass


# noinspection PyPep8Naming
class ICrack(metaclass=ABCMeta):
    """A crack result. Refer to "IServiceabilityResult"
See "~/articles/glossary.md#crackcrack""Glossary/see
    """

    @property
    def Position(self) -> IPoint:
        """The crack position.
        """
        pass

    @property
    def Width(self) -> Length:
        """The crack width.
        """
        pass


# noinspection PyPep8Naming
class IMomentRange(metaclass=ABCMeta):
    """A pair of moments representing the start and end of a range.
    
    See "~/articles/glossary.md#moment-rangesmoment-range""Glossary/see
    """

    @property
    def Max(self) -> Moment:
        """The end of the range
        """
        pass

    @property
    def Min(self) -> Moment:
        """The start of the range
        """
        pass

    @abstractmethod
    def Contains(self, moment: Moment) -> bool:
        """Checks if a given moment is within (or on the boundary of) the range.

        :param moment: The moment to check
        :type moment: Moment
        """
        pass


# noinspection PyPep8Naming
class IServiceabilityResult(metaclass=ABCMeta):
    """The result of serviceability analysis (SLS) calculated by "IServiceability".
    """

    @property
    def Warnings(self) -> IList[IWarning]:
        """Warnings observed after the analysis.
        """
        pass

    @property
    def Cracks(self) -> IList[ICrack]:
        """Crack results are calculated at bar positions or section surfaces depending
        on the "None IDesignCode""Design Code/see specifications.
        """
        pass

    @property
    def MaximumWidthCrack(self) -> ICrack:
        """The crack result from "Property Cracks" that corresponds to the maximum crack width.
        """
        pass

    @property
    def CrackingUtilisation(self) -> Ratio:
        """The ratio of the applied load (moment and axial) to the load (moment and axial)
        in the same direction that would cause the section to crack. Ratio &gt; 1 means section is cracked.
        """
        pass

    @property
    def SecantStiffness(self) -> IStiffness:
        """The secant stiffness under the applied action.
        <center><svg width="500" height="300"><line x1="20" y1="300" x2="20" y2="20" /><text x="-160" y="10" class="text" transform="rotate(270)">Load</text><line x1="0" y1="280" x2="380" y2="280" /><text x="160" y="300" class="text">Deformation</text><polyline points="20,280 40,238 60,201 80,167 100,139 120,115 140,96 160,80 180,69 200,63 220,61 240,62 250,63 280,69 300,75" class="curve" /><line x1="20" y1="280" x2="200" y2="63" stroke-dasharray="4" /><line x1="50" y1="98" x2="350" y2="25" stroke-dasharray="4" /><text x="-10" y="220" class="text" transform="rotate(310)" text-anchor="end">Secant stiffness</text><text x="220" y="88" class="text" transform="rotate(347)" text-anchor="end">Tangent stiffness</text><style>
        .text { font: 14px sans-serif; }
        .curve {stroke:#41a2e0; stroke-width:3; fill:none;}
        line {stroke:#666;}
        circle {stroke:black; stroke-width:1; fill:none;}
        </style></svg></center>
        """
        pass

    @property
    def UncrackedMomentRanges(self) -> IList[IMomentRange]:
        """The range of moments (in the direction of the applied moment,
        assuming constant axial force) over which the section remains uncracked.
        """
        pass

    @property
    def Deformation(self) -> IDeformation:
        """The section deformation under the applied action.
        """
        pass

    @property
    def Load(self) -> ILoad:
        """The section load under the applied action.
        """
        pass


# noinspection PyPep8Naming
class IStiffness(metaclass=ABCMeta):
    """Defines an axial stiffness, bending stiffness about local y-axis and bending
    stiffness about local z-axis.
    
    See "~/articles/glossary.md#stiffnessstiffness""Glossary/see
    """

    @property
    def ZZ(self) -> BendingStiffness:
        """The bending stiffness about the z-axis in the local coordinate system.
        """
        pass

    @property
    def YY(self) -> BendingStiffness:
        """The bending stiffness about the y-axis in the local coordinate system.
        """
        pass

    @property
    def X(self) -> AxialStiffness:
        """The axial stiffness.
        """
        pass


# noinspection PyPep8Naming
class IStrengthResult(metaclass=ABCMeta):
    """The result of strength analysis (ULS) calculated by "IStrength".
    """

    @property
    def DeformationUtilisation(self) -> Ratio:
        """The strength deformation utilisation is the ratio of the applied deformation to the deformation
        in the same direction that would cause the section to reach its capacity.
        Utilisation &gt; 1 means capacity has been exceeded.
        """
        pass

    @property
    def LoadUtilisation(self) -> Ratio:
        """The strength load utilisation is the ratio of the applied load to the load
        in the same direction that would cause the section to reach its capacity.
        Utilisation &gt; 1 means the applied load exceeds the section capacity.
        """
        pass

    @property
    def MomentRanges(self) -> IList[IMomentRange]:
        """The range of moments (in the direction of the applied moment,
        assuming constant axial force) that are within the section's capacity.
        """
        pass

    @property
    def Deformation(self) -> IDeformation:
        """The section deformation under the applied action.
        """
        pass

    @property
    def Load(self) -> ILoad:
        """The section load under the applied action.
        """
        pass
