# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AggregationCrossSeriesReducer',
    'AggregationPerSeriesAligner',
    'AxisScale',
    'ChartOptionsMode',
    'DataSetPlotType',
    'PickTimeSeriesFilterDirection',
    'PickTimeSeriesFilterRankingMethod',
    'SparkChartViewSparkChartType',
    'TextFormat',
    'ThresholdColor',
    'ThresholdDirection',
]


class AggregationCrossSeriesReducer(str, Enum):
    """
    The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.Not all reducer operations can be applied to all time series. The valid choices depend on the metric_kind and the value_type of the original time series. Reduction can yield a time series with a different metric_kind or value_type than the input time series.Time series data must first be aligned (see per_series_aligner) in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified, and must not be ALIGN_NONE. An alignment_period must also be specified; otherwise, an error is returned.
    """
    REDUCE_NONE = "REDUCE_NONE"
    REDUCE_MEAN = "REDUCE_MEAN"
    REDUCE_MIN = "REDUCE_MIN"
    REDUCE_MAX = "REDUCE_MAX"
    REDUCE_SUM = "REDUCE_SUM"
    REDUCE_STDDEV = "REDUCE_STDDEV"
    REDUCE_COUNT = "REDUCE_COUNT"
    REDUCE_COUNT_TRUE = "REDUCE_COUNT_TRUE"
    REDUCE_COUNT_FALSE = "REDUCE_COUNT_FALSE"
    REDUCE_FRACTION_TRUE = "REDUCE_FRACTION_TRUE"
    REDUCE_PERCENTILE99 = "REDUCE_PERCENTILE_99"
    REDUCE_PERCENTILE95 = "REDUCE_PERCENTILE_95"
    REDUCE_PERCENTILE50 = "REDUCE_PERCENTILE_50"
    REDUCE_PERCENTILE05 = "REDUCE_PERCENTILE_05"


class AggregationPerSeriesAligner(str, Enum):
    """
    An Aligner describes how to bring the data points in a single time series into temporal alignment. Except for ALIGN_NONE, all alignments cause all the data points in an alignment_period to be mathematically grouped together, resulting in a single data point for each alignment_period with end timestamp at the end of the period.Not all alignment operations may be applied to all time series. The valid choices depend on the metric_kind and value_type of the original time series. Alignment can change the metric_kind or the value_type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified and not equal to ALIGN_NONE and alignment_period must be specified; otherwise, an error is returned.
    """
    ALIGN_NONE = "ALIGN_NONE"
    ALIGN_DELTA = "ALIGN_DELTA"
    ALIGN_RATE = "ALIGN_RATE"
    ALIGN_INTERPOLATE = "ALIGN_INTERPOLATE"
    ALIGN_NEXT_OLDER = "ALIGN_NEXT_OLDER"
    ALIGN_MIN = "ALIGN_MIN"
    ALIGN_MAX = "ALIGN_MAX"
    ALIGN_MEAN = "ALIGN_MEAN"
    ALIGN_COUNT = "ALIGN_COUNT"
    ALIGN_SUM = "ALIGN_SUM"
    ALIGN_STDDEV = "ALIGN_STDDEV"
    ALIGN_COUNT_TRUE = "ALIGN_COUNT_TRUE"
    ALIGN_COUNT_FALSE = "ALIGN_COUNT_FALSE"
    ALIGN_FRACTION_TRUE = "ALIGN_FRACTION_TRUE"
    ALIGN_PERCENTILE99 = "ALIGN_PERCENTILE_99"
    ALIGN_PERCENTILE95 = "ALIGN_PERCENTILE_95"
    ALIGN_PERCENTILE50 = "ALIGN_PERCENTILE_50"
    ALIGN_PERCENTILE05 = "ALIGN_PERCENTILE_05"
    ALIGN_PERCENT_CHANGE = "ALIGN_PERCENT_CHANGE"


class AxisScale(str, Enum):
    """
    The axis scale. By default, a linear scale is used.
    """
    SCALE_UNSPECIFIED = "SCALE_UNSPECIFIED"
    LINEAR = "LINEAR"
    LOG10 = "LOG10"


class ChartOptionsMode(str, Enum):
    """
    The chart mode.
    """
    MODE_UNSPECIFIED = "MODE_UNSPECIFIED"
    COLOR = "COLOR"
    X_RAY = "X_RAY"
    STATS = "STATS"


class DataSetPlotType(str, Enum):
    """
    How this data should be plotted on the chart.
    """
    PLOT_TYPE_UNSPECIFIED = "PLOT_TYPE_UNSPECIFIED"
    LINE = "LINE"
    STACKED_AREA = "STACKED_AREA"
    STACKED_BAR = "STACKED_BAR"
    HEATMAP = "HEATMAP"


class PickTimeSeriesFilterDirection(str, Enum):
    """
    How to use the ranking to select time series that pass through the filter.
    """
    DIRECTION_UNSPECIFIED = "DIRECTION_UNSPECIFIED"
    TOP = "TOP"
    BOTTOM = "BOTTOM"


class PickTimeSeriesFilterRankingMethod(str, Enum):
    """
    ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
    """
    METHOD_UNSPECIFIED = "METHOD_UNSPECIFIED"
    METHOD_MEAN = "METHOD_MEAN"
    METHOD_MAX = "METHOD_MAX"
    METHOD_MIN = "METHOD_MIN"
    METHOD_SUM = "METHOD_SUM"
    METHOD_LATEST = "METHOD_LATEST"


class SparkChartViewSparkChartType(str, Enum):
    """
    Required. The type of sparkchart to show in this chartView.
    """
    SPARK_CHART_TYPE_UNSPECIFIED = "SPARK_CHART_TYPE_UNSPECIFIED"
    SPARK_LINE = "SPARK_LINE"
    SPARK_BAR = "SPARK_BAR"


class TextFormat(str, Enum):
    """
    How the text content is formatted.
    """
    FORMAT_UNSPECIFIED = "FORMAT_UNSPECIFIED"
    MARKDOWN = "MARKDOWN"
    RAW = "RAW"


class ThresholdColor(str, Enum):
    """
    The state color for this threshold. Color is not allowed in a XyChart.
    """
    COLOR_UNSPECIFIED = "COLOR_UNSPECIFIED"
    YELLOW = "YELLOW"
    RED = "RED"


class ThresholdDirection(str, Enum):
    """
    The direction for the current threshold. Direction is not allowed in a XyChart.
    """
    DIRECTION_UNSPECIFIED = "DIRECTION_UNSPECIFIED"
    ABOVE = "ABOVE"
    BELOW = "BELOW"
