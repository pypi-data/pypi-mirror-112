# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'BasicPerfSampleSeriesPerfMetricType',
    'BasicPerfSampleSeriesPerfUnit',
    'BasicPerfSampleSeriesSampleSeriesLabel',
    'ExecutionState',
    'HistoryTestPlatform',
    'IndividualOutcomeOutcomeSummary',
    'OutcomeSummary',
    'PrimaryStepRollUp',
    'StepState',
    'TestIssueCategory',
    'TestIssueSeverity',
    'TestIssueType',
]


class BasicPerfSampleSeriesPerfMetricType(str, Enum):
    PERF_METRIC_TYPE_UNSPECIFIED = "perfMetricTypeUnspecified"
    MEMORY = "memory"
    CPU = "cpu"
    NETWORK = "network"
    GRAPHICS = "graphics"


class BasicPerfSampleSeriesPerfUnit(str, Enum):
    PERF_UNIT_UNSPECIFIED = "perfUnitUnspecified"
    KIBIBYTE = "kibibyte"
    PERCENT = "percent"
    BYTES_PER_SECOND = "bytesPerSecond"
    FRAMES_PER_SECOND = "framesPerSecond"
    BYTE = "byte"


class BasicPerfSampleSeriesSampleSeriesLabel(str, Enum):
    SAMPLE_SERIES_TYPE_UNSPECIFIED = "sampleSeriesTypeUnspecified"
    MEMORY_RSS_PRIVATE = "memoryRssPrivate"
    MEMORY_RSS_SHARED = "memoryRssShared"
    MEMORY_RSS_TOTAL = "memoryRssTotal"
    MEMORY_TOTAL = "memoryTotal"
    CPU_USER = "cpuUser"
    CPU_KERNEL = "cpuKernel"
    CPU_TOTAL = "cpuTotal"
    NT_BYTES_TRANSFERRED = "ntBytesTransferred"
    NT_BYTES_RECEIVED = "ntBytesReceived"
    NETWORK_SENT = "networkSent"
    NETWORK_RECEIVED = "networkReceived"
    GRAPHICS_FRAME_RATE = "graphicsFrameRate"


class ExecutionState(str, Enum):
    """
    The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
    """
    UNKNOWN_STATE = "unknownState"
    PENDING = "pending"
    IN_PROGRESS = "inProgress"
    COMPLETE = "complete"


class HistoryTestPlatform(str, Enum):
    """
    The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown.
    """
    UNKNOWN_PLATFORM = "unknownPlatform"
    ANDROID = "android"
    IOS = "ios"


class IndividualOutcomeOutcomeSummary(str, Enum):
    UNSET = "unset"
    SUCCESS = "success"
    FAILURE = "failure"
    INCONCLUSIVE = "inconclusive"
    SKIPPED = "skipped"
    FLAKY = "flaky"


class OutcomeSummary(str, Enum):
    """
    The simplest way to interpret a result. Required
    """
    UNSET = "unset"
    SUCCESS = "success"
    FAILURE = "failure"
    INCONCLUSIVE = "inconclusive"
    SKIPPED = "skipped"
    FLAKY = "flaky"


class PrimaryStepRollUp(str, Enum):
    """
    Rollup test status of multiple steps that were run with the same configuration as a group.
    """
    UNSET = "unset"
    SUCCESS = "success"
    FAILURE = "failure"
    INCONCLUSIVE = "inconclusive"
    SKIPPED = "skipped"
    FLAKY = "flaky"


class StepState(str, Enum):
    """
    The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -> COMPLETE A PRECONDITION_FAILED will be returned if an invalid transition is requested. It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times. - In response: always set - In create/update request: optional
    """
    UNKNOWN_STATE = "unknownState"
    PENDING = "pending"
    IN_PROGRESS = "inProgress"
    COMPLETE = "complete"


class TestIssueCategory(str, Enum):
    """
    Category of issue. Required.
    """
    UNSPECIFIED_CATEGORY = "unspecifiedCategory"
    COMMON = "common"
    ROBO = "robo"


class TestIssueSeverity(str, Enum):
    """
    Severity of issue. Required.
    """
    UNSPECIFIED_SEVERITY = "unspecifiedSeverity"
    INFO = "info"
    SUGGESTION = "suggestion"
    WARNING = "warning"
    SEVERE = "severe"


class TestIssueType(str, Enum):
    """
    Type of issue. Required.
    """
    UNSPECIFIED_TYPE = "unspecifiedType"
    FATAL_EXCEPTION = "fatalException"
    NATIVE_CRASH = "nativeCrash"
    ANR = "anr"
    UNUSED_ROBO_DIRECTIVE = "unusedRoboDirective"
    COMPATIBLE_WITH_ORCHESTRATOR = "compatibleWithOrchestrator"
    LAUNCHER_ACTIVITY_NOT_FOUND = "launcherActivityNotFound"
    START_ACTIVITY_NOT_FOUND = "startActivityNotFound"
    INCOMPLETE_ROBO_SCRIPT_EXECUTION = "incompleteRoboScriptExecution"
    COMPLETE_ROBO_SCRIPT_EXECUTION = "completeRoboScriptExecution"
    FAILED_TO_INSTALL = "failedToInstall"
    AVAILABLE_DEEP_LINKS = "availableDeepLinks"
    NON_SDK_API_USAGE_VIOLATION = "nonSdkApiUsageViolation"
    NON_SDK_API_USAGE_REPORT = "nonSdkApiUsageReport"
    ENCOUNTERED_NON_ANDROID_UI_WIDGET_SCREEN = "encounteredNonAndroidUiWidgetScreen"
    ENCOUNTERED_LOGIN_SCREEN = "encounteredLoginScreen"
    PERFORMED_GOOGLE_LOGIN = "performedGoogleLogin"
    IOS_EXCEPTION = "iosException"
    IOS_CRASH = "iosCrash"
    PERFORMED_MONKEY_ACTIONS = "performedMonkeyActions"
    USED_ROBO_DIRECTIVE = "usedRoboDirective"
    USED_ROBO_IGNORE_DIRECTIVE = "usedRoboIgnoreDirective"
    INSUFFICIENT_COVERAGE = "insufficientCoverage"
    IN_APP_PURCHASES = "inAppPurchases"
    CRASH_DIALOG_ERROR = "crashDialogError"
    UI_ELEMENTS_TOO_DEEP = "uiElementsTooDeep"
    BLANK_SCREEN = "blankScreen"
    OVERLAPPING_UI_ELEMENTS = "overlappingUiElements"
    UNITY_EXCEPTION = "unityException"
    DEVICE_OUT_OF_MEMORY = "deviceOutOfMemory"
    LOGCAT_COLLECTION_ERROR = "logcatCollectionError"
