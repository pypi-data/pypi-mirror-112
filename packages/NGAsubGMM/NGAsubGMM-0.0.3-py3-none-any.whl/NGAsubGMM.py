def getCSVFileData():
    CSVFileData = {}
    CSVFileData['NGAsubGMM_KBCG20_coefficients'] = 'NGAsubGMM_KBCG20_coefficients.csv'
    CSVFileData['NGAsubGMM_KBCG20_params_Z_ALL_allregca_attn3_corrreg_cs_dmb'] = 'NGAsubGMM_KBCG20_params_Z_ALL_allregca_attn3_corrreg_cs_dmb.csv'
    CSVFileData['posterior_coefficients_KBCG20_T_1pt00'] = 'posterior_coefficients_KBCG20_T-1.00.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt00'] = 'posterior_coefficients_KBCG20_T00.00.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt01'] = 'posterior_coefficients_KBCG20_T00.01.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt02'] = 'posterior_coefficients_KBCG20_T00.02.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt03'] = 'posterior_coefficients_KBCG20_T00.03.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt05'] = 'posterior_coefficients_KBCG20_T00.05.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt07'] = 'posterior_coefficients_KBCG20_T00.07.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt10'] = 'posterior_coefficients_KBCG20_T00.10.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt15'] = 'posterior_coefficients_KBCG20_T00.15.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt20'] = 'posterior_coefficients_KBCG20_T00.20.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt25'] = 'posterior_coefficients_KBCG20_T00.25.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt30'] = 'posterior_coefficients_KBCG20_T00.30.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt40'] = 'posterior_coefficients_KBCG20_T00.40.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt50'] = 'posterior_coefficients_KBCG20_T00.50.csv'
    CSVFileData['posterior_coefficients_KBCG20_T00pt75'] = 'posterior_coefficients_KBCG20_T00.75.csv'
    CSVFileData['posterior_coefficients_KBCG20_T01pt00'] = 'posterior_coefficients_KBCG20_T01.00.csv'
    CSVFileData['posterior_coefficients_KBCG20_T01pt50'] = 'posterior_coefficients_KBCG20_T01.50.csv'
    CSVFileData['posterior_coefficients_KBCG20_T02pt00'] = 'posterior_coefficients_KBCG20_T02.00.csv'
    CSVFileData['posterior_coefficients_KBCG20_T03pt00'] = 'posterior_coefficients_KBCG20_T03.00.csv'
    CSVFileData['posterior_coefficients_KBCG20_T04pt00'] = 'posterior_coefficients_KBCG20_T04.00.csv'
    CSVFileData['posterior_coefficients_KBCG20_T05pt00'] = 'posterior_coefficients_KBCG20_T05.00.csv'
    CSVFileData['posterior_coefficients_KBCG20_T07pt50'] = 'posterior_coefficients_KBCG20_T07.50.csv'
    CSVFileData['posterior_coefficients_KBCG20_T10pt00'] = 'posterior_coefficients_KBCG20_T10.00.csv'
    CSVFileData['PSHAB20_EpistemicModelCoefficients_Interface'] = 'PSHAB20_EpistemicModelCoefficients_Interface.csv'
    CSVFileData['PSHAB20_EpistemicModelCoefficients_Slab'] = 'PSHAB20_EpistemicModelCoefficients_Slab.csv'
    CSVFileData['PSHAB20_Table_E1_Interface_Coefficients_OneRowHeader'] = 'PSHAB20_Table_E1_Interface_Coefficients_OneRowHeader.csv'
    CSVFileData['PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader'] = 'PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader.csv'
    CSVFileData['PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader'] = 'PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader.csv'
    CSVFileData['NGAsubGMM_KBCG20_coefficients.csv'] = 'NGAsubGMM_KBCG20_coefficients'
    CSVFileData['NGAsubGMM_KBCG20_params_Z_ALL_allregca_attn3_corrreg_cs_dmb.csv'] = 'NGAsubGMM_KBCG20_params_Z_ALL_allregca_attn3_corrreg_cs_dmb'
    CSVFileData['posterior_coefficients_KBCG20_T-1.00.csv'] = 'posterior_coefficients_KBCG20_T_1pt00'
    CSVFileData['posterior_coefficients_KBCG20_T00.00.csv'] = 'posterior_coefficients_KBCG20_T00pt00'
    CSVFileData['posterior_coefficients_KBCG20_T00.01.csv'] = 'posterior_coefficients_KBCG20_T00pt01'
    CSVFileData['posterior_coefficients_KBCG20_T00.02.csv'] = 'posterior_coefficients_KBCG20_T00pt02'
    CSVFileData['posterior_coefficients_KBCG20_T00.03.csv'] = 'posterior_coefficients_KBCG20_T00pt03'
    CSVFileData['posterior_coefficients_KBCG20_T00.05.csv'] = 'posterior_coefficients_KBCG20_T00pt05'
    CSVFileData['posterior_coefficients_KBCG20_T00.07.csv'] = 'posterior_coefficients_KBCG20_T00pt07'
    CSVFileData['posterior_coefficients_KBCG20_T00.10.csv'] = 'posterior_coefficients_KBCG20_T00pt10'
    CSVFileData['posterior_coefficients_KBCG20_T00.15.csv'] = 'posterior_coefficients_KBCG20_T00pt15'
    CSVFileData['posterior_coefficients_KBCG20_T00.20.csv'] = 'posterior_coefficients_KBCG20_T00pt20'
    CSVFileData['posterior_coefficients_KBCG20_T00.25.csv'] = 'posterior_coefficients_KBCG20_T00pt25'
    CSVFileData['posterior_coefficients_KBCG20_T00.30.csv'] = 'posterior_coefficients_KBCG20_T00pt30'
    CSVFileData['posterior_coefficients_KBCG20_T00.40.csv'] = 'posterior_coefficients_KBCG20_T00pt40'
    CSVFileData['posterior_coefficients_KBCG20_T00.50.csv'] = 'posterior_coefficients_KBCG20_T00pt50'
    CSVFileData['posterior_coefficients_KBCG20_T00.75.csv'] = 'posterior_coefficients_KBCG20_T00pt75'
    CSVFileData['posterior_coefficients_KBCG20_T01.00.csv'] = 'posterior_coefficients_KBCG20_T01pt00'
    CSVFileData['posterior_coefficients_KBCG20_T01.50.csv'] = 'posterior_coefficients_KBCG20_T01pt50'
    CSVFileData['posterior_coefficients_KBCG20_T02.00.csv'] = 'posterior_coefficients_KBCG20_T02pt00'
    CSVFileData['posterior_coefficients_KBCG20_T03.00.csv'] = 'posterior_coefficients_KBCG20_T03pt00'
    CSVFileData['posterior_coefficients_KBCG20_T04.00.csv'] = 'posterior_coefficients_KBCG20_T04pt00'
    CSVFileData['posterior_coefficients_KBCG20_T05.00.csv'] = 'posterior_coefficients_KBCG20_T05pt00'
    CSVFileData['posterior_coefficients_KBCG20_T07.50.csv'] = 'posterior_coefficients_KBCG20_T07pt50'
    CSVFileData['posterior_coefficients_KBCG20_T10.00.csv'] = 'posterior_coefficients_KBCG20_T10pt00'
    CSVFileData['PSHAB20_EpistemicModelCoefficients_Interface.csv'] = 'PSHAB20_EpistemicModelCoefficients_Interface'
    CSVFileData['PSHAB20_EpistemicModelCoefficients_Slab.csv'] = 'PSHAB20_EpistemicModelCoefficients_Slab'
    CSVFileData['PSHAB20_Table_E1_Interface_Coefficients_OneRowHeader.csv'] = 'PSHAB20_Table_E1_Interface_Coefficients_OneRowHeader'
    CSVFileData['PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader.csv'] = 'PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader'
    CSVFileData['PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader.csv'] = 'PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader'
    return CSVFileData

def getNGAsubGMM_KBCG20_coefficients():
    import pandas as pd
    TableNames = ['T','mu_theta_1_if','mu_theta_1_slab','theta_2_if','theta_2_slab','theta_3','theta_4_if','theta_4_slab','theta_5','mu_theta_6','mu_theta_6b','mu_theta_7','theta_9_if','theta_9_slab','theta_6xc','theta_1_slab_Ca_smallM','theta_1_if_reg_Al','theta_1_if_reg_Ca','theta_1_if_reg_CAM','theta_1_if_reg_Ja','theta_1_if_reg_NZ','theta_1_if_reg_SA','theta_1_if_reg_Tw','theta_1_slab_reg_Al','theta_1_slab_reg_Ca','theta_1_slab_reg_CAM','theta_1_slab_reg_Ja','theta_1_slab_reg_NZ','theta_1_slab_reg_SA','theta_1_slab_reg_Tw','theta7_reg_Al','theta7_reg_Ca','theta7_reg_CAM','theta7_reg_Ja','theta7_reg_NZ','theta7_reg_SA','theta7_reg_Tw','theta_6_x1_reg_Al','theta_6_x1_reg_Ca','theta_6_x1_reg_CAM','theta_6_x1_reg_Ja','theta_6_x1_reg_NZ','theta_6_x1_reg_SA','theta_6_x1_reg_Tw','theta_6_x2_reg_Al','theta_6_x2_reg_Ca','theta_6_x2_reg_CAM','theta_6_x2_reg_Ja','theta_6_x2_reg_NZ','theta_6_x2_reg_SA','theta_6_x2_reg_Tw','theta_6_x3_reg_Al','theta_6_x3_reg_Ca','theta_6_x3_reg_CAM','theta_6_x3_reg_Ja','theta_6_x3_reg_NZ','theta_6_x3_reg_SA','theta_6_x3_reg_Tw','theta_6_1_reg_Al','theta_6_1_reg_Ca','theta_6_1_reg_CAM','theta_6_1_reg_Ja','theta_6_1_reg_NZ','theta_6_1_reg_SA','theta_6_1_reg_Tw','theta_6_2_reg_Al','theta_6_2_reg_Ca','theta_6_2_reg_CAM','theta_6_2_reg_Ja','theta_6_2_reg_NZ','theta_6_2_reg_SA','theta_6_2_reg_Tw','theta_6_3_reg_Al','theta_6_3_reg_Ca','theta_6_3_reg_CAM','theta_6_3_reg_Ja','theta_6_3_reg_NZ','theta_6_3_reg_SA','theta_6_3_reg_Tw','dzb_if','dzb_slab','nft_1','nft_2','phi','tau']
    TableValues = [-1.0,6.433542675,9.435733162499998,-2.217436025,-2.6695061375,0.127884495,1.01448334875,1.307578125,0.12371600461297501,-0.0013477201187500002,-0.0023421202125000003,1.6876749999999998,0.0161513984125,0.01552129485,-0.33514998375000005,8.753912575,6.371803387499999,6.433417675,6.411284350000001,6.505275662500001,6.4604516625,6.43999505,6.434487062500001,9.528993137500002,9.441570825000001,9.40842905,9.561716712499999,9.442426775,9.3663111875,9.337387874999997,1.3314463875000002,1.558876525,1.8517744749999998,1.5395240749999999,1.7860845874999995,2.098709,1.6724855624999997,-0.002803274817375,-0.002615386732,-0.002560737675,-0.00415861125,-0.0022703159207,-0.00132798377125,-0.0023720429983750003,-0.002712377209,-0.0024398248824625,-0.00059487418835,-0.0011802279337500001,-0.0022380444203375,-0.00128344270125,-0.002401389783125,-0.0021150484192125002,-0.0023644512905,-0.0022658104608375,-0.00038528547593750004,-0.0025404325703625,-0.00259092430935,-0.00230819018605,-0.00224741945095,-0.0023476844081250004,-0.0025506108178750004,-0.0022208024163624996,-0.0025700890168750003,-0.0029289557,-0.0023757659661249996,-0.0015922115875,-0.0013097045162499999,-0.000982671697875,-0.00196072425,-0.0005497135315625,-0.0011235178575,-0.001854813975,-0.0026544124308749994,-0.0025171352156874998,-0.0024471918766375,-0.004160706962499999,-0.002220410521725,-0.00209458482325,-0.0024443099403125,12.566094730125,-13.35906592125,0.9363792187500001,0.21094257624999999,0.5114864862499999,0.4509846125],\
        [0.0,3.7153066515060793,4.7890803589414785,-2.460896365568182,-2.4380993832954547,0.10393058013863637,0.9521874005681819,1.1050115503977271,0.12815098434904088,-0.002634759030578068,-0.005253883441193182,0.8876787495561363,0.0254806551404375,0.022385168500998857,-0.6041659755402045,3.5782434908173295,3.356030291794318,3.6003048742965915,3.6964209737486247,4.008987257470569,3.9433378875758693,4.051210372388011,3.4468710547982946,4.54871542212858,4.486160214133068,5.041801410631818,5.360940740375,4.822427116311795,5.079648822115284,4.391529843928239,0.5601354058715908,0.6625270686534093,1.1474467335396479,0.8697257402695908,1.005782505686477,1.1313044744119887,0.9336880390744319,-0.005573952289791477,-0.005540690212645398,-0.006286379536829545,-0.008737000362045454,-0.0050122032200130675,-0.003629292162204375,-0.004813493488539206,-0.006504695142100567,-0.006748306175604601,-0.0005429720152486932,-0.0020419245794772727,-0.004533563519359213,-0.002734494377961818,-0.005830319913371079,-0.005413336071462501,-0.005270162012439773,-0.005316293881648125,-0.005587185338775,-0.005359348069487046,-0.005335343005188126,-0.005177102161766477,-0.004744988288435851,-0.004892125592290472,-0.005721447255331251,-0.0055435645145295465,-0.005701998190761932,-0.007037723685671819,-0.005130715768072729,-0.002899566613829545,-0.0037887197641959087,-0.001378837982273352,-0.002811630352631477,-0.0019843515947511364,-0.002095369607352841,-0.0030467170332933004,-0.00517814048075284,-0.004983299338452842,-0.005920355254369659,-0.008306568702175002,-0.005360944683122102,-0.005847905072314375,-0.0047099377017215905,16.816057562551343,-15.841253445180625,0.8945888824647727,0.1988513046256364,0.5957552781542046,0.4887447436408862],\
        [0.01,3.5756533640060795,4.559571983941478,-2.428916739318182,-2.3950280545454548,0.10431805850113637,0.945373983068182,1.108606759147727,0.12914600933054213,-0.002699423958430568,-0.005283727433693182,0.8924379821261363,0.0250581984443125,0.02196359730099886,-0.5919981367902045,3.3940715908173296,3.1950176042943186,3.4803349242965917,3.5216640987486247,3.7863277824705683,3.8103254375758695,3.935535147388012,3.311994279798295,4.30777193462858,4.309173564133068,4.809797423131818,5.048204202875,4.653637453811796,4.840730747115284,4.203531293928239,0.5710206767840909,0.6670828315284093,1.109680890639148,0.8709234834440909,1.012431679203977,1.1470773215494887,0.9108595212531819,-0.005972885659666478,-0.005746107531395398,-0.006377485853079545,-0.008752212562045454,-0.005024678442638068,-0.0035965786943293753,-0.0049649770099142055,-0.006405164573350566,-0.006703279894354601,-0.0004299139271611932,-0.0020495563239772726,-0.004560259924859212,-0.002728715648110818,-0.005885199453371078,-0.005305646718962501,-0.005312351493189774,-0.005427250019148126,-0.005492010249625,-0.005333401111987046,-0.0052960376614381265,-0.005372186825516477,-0.004753694657005851,-0.005063236336290472,-0.0057682411415812505,-0.005460461794654546,-0.005705623492011932,-0.006883925930671818,-0.005364683166822729,-0.002918168377204545,-0.003919402661490909,-0.0013252900125171022,-0.002915695695535227,-0.0019390502629173865,-0.002071797568451591,-0.0031281059203674753,-0.00521725426625284,-0.005212202802202842,-0.005897477383119659,-0.008357835139675002,-0.005519879063122101,-0.0057705299385643755,-0.004758048025096591,16.823813100051343,-16.125060732680623,0.8964235208522728,0.1990918023161364,0.5995956091828171,0.4942297306981362],\
        [0.02,3.7164886140060793,4.808206646441478,-2.459748358068182,-2.4432242045454546,0.10471132908863637,0.9588235868181819,1.1162359578977272,0.13240695270902839,-0.002614211243565568,-0.005323801958693182,0.9302614690286364,0.027178223284312502,0.02327710565099886,-0.6197721430402046,3.5848319908173294,3.381819066794318,3.6015018617965913,3.6840868112486245,3.9664154324705683,3.9126584375758693,4.057270272388012,3.436770629798295,4.58599093462858,4.492272226633068,5.138580210631818,5.356057890375,4.860414466311795,5.154175934615283,4.388374743928239,0.6071540491215909,0.7072180242784093,1.161897312272898,0.9129438119149659,1.056041081096102,1.2082086235494887,0.953422087000307,-0.005948932490916478,-0.005742527571395398,-0.006272635830579545,-0.008641131549545454,-0.005120753008388068,-0.0036115836180793752,-0.0049362181324142055,-0.006442565934600567,-0.006943528199354601,-0.00043915439591119313,-0.0019843950052272725,-0.004701539123109212,-0.002810551503286818,-0.006107624837121078,-0.005315728678962501,-0.0053770358194397735,-0.005471303204148125,-0.0054346047416375,-0.005327744360737046,-0.0053940413301881256,-0.005463416420516478,-0.004839254658080851,-0.005006601590040472,-0.005957850005331251,-0.005697934420904546,-0.005745986967011931,-0.0071506755306718186,-0.005306207784322729,-0.002924819228579545,-0.0037875750115021587,-0.0013291805911983521,-0.0028889186170852265,-0.0018953213214636365,-0.002033545176031591,-0.0029163517634920506,-0.00523829532500284,-0.005291150599702842,-0.00595529475686966,-0.008231301239675002,-0.005456831023122101,-0.005809742203564375,-0.004864514128846591,16.662189075051344,-16.284032145180625,0.8971684072272728,0.1991506307186364,0.5924150602567047,0.5054583984445112],\
        [0.03,4.019203939006079,5.167197596441477,-2.513834311818182,-2.496444857045455,0.10453127425113637,0.9730964743181819,1.1092684541477271,0.13484283459690338,-0.002548148750198318,-0.005441872468693182,1.0127528904973864,0.029343849204312503,0.024539430425998862,-0.6549934405402045,3.878638865817329,3.7004381167943183,3.881527524296591,4.0096467112486245,4.3462560074705685,4.214684000075869,4.35431213488801,3.6982306047982947,4.94799602212858,4.780066176633067,5.547287960631818,5.823778527875,5.176631041311795,5.577609309615284,4.666983818928239,0.7074229267740908,0.7827662957284093,1.247418989819148,1.0115073455715908,1.141592745807277,1.2764732809548636,1.033921126090307,-0.005875063843416478,-0.005766063665145397,-0.006266255210579545,-0.008824994762045455,-0.005277072128388068,-0.0037260432243293755,-0.004931584122414206,-0.006591157208350566,-0.0072107644243546015,-0.0005150562471611932,-0.0019518831214772729,-0.004850618323109212,-0.002908857003314318,-0.006339612400871078,-0.005432824293962501,-0.005498267591939773,-0.005576675862898125,-0.005581771886875,-0.0054490725207370465,-0.005569964316438126,-0.005546311471766477,-0.004966598577455851,-0.005036433253790472,-0.00616354003158125,-0.0060020885459045464,-0.005866721132011932,-0.007533127705671818,-0.0052977708255727285,-0.0029366930073295447,-0.003683176622034659,-0.0013757703527046022,-0.0028374615491602267,-0.0019107741843911365,-0.002045657120279091,-0.0026875563294695504,-0.0052997092750028405,-0.005346174378452842,-0.00609075629186966,-0.008231568264675002,-0.005537020384372101,-0.005971231664814375,-0.0049673958900965905,17.181660975051344,-16.314490007680625,0.8964051709772728,0.1989097350998864,0.6044302265497546,0.5116676788877612],\
        [0.05,4.544768776506079,5.640302621441478,-2.589450354318182,-2.5410666332954546,0.10337604955113637,0.991235338068182,1.0905133078977272,0.13730139025940338,-0.002550058892736818,-0.005676356537443182,1.1880131000261365,0.0319114324418125,0.025759949575998857,-0.6925659555402046,4.288455978317329,4.217633179294318,4.387812561796592,4.549220573748625,4.964188257470568,4.77202663757587,4.888842359888011,4.161201529798294,5.40489633462858,5.191630101633067,6.041135235631818,6.424629515375001,5.6189990538117955,6.114167272115283,5.054938068928239,0.9699221956590909,0.9593535129171593,1.3683675912478979,1.2576638109090907,1.2967239543352271,1.3670204966082387,1.187023224318182,-0.005885017747166477,-0.005847701941395398,-0.006436015604329545,-0.009374769212045456,-0.005583775109638068,-0.003981447659329375,-0.005016215493664206,-0.006858253845850567,-0.007564484774354601,-0.0006876310759111932,-0.001972598858977273,-0.005074974971859212,-0.003080665844894318,-0.006675755259621078,-0.005677563742712501,-0.005732610501939773,-0.005815338265398125,-0.006002480794375,-0.005711518749487046,-0.005880044328938126,-0.005673896145516478,-0.005218316949955851,-0.005195539840040472,-0.006475766094081251,-0.006429077592154546,-0.0061194442445119315,-0.008092701068171818,-0.005395673928072728,-0.0030058567348295448,-0.003680303415462159,-0.001486615457029602,-0.002794009298597727,-0.0020213418538473863,-0.002130903676970341,-0.0024537762890570504,-0.00549839798375284,-0.005495659275952842,-0.00632011468186966,-0.008430237014675001,-0.005797248836872101,-0.006278170084814375,-0.005124679382596591,18.320744937551346,-16.300176307680623,0.8934801713522728,0.1982098773016864,0.6380188910454546,0.5157928553473862],\
        [0.075,4.9209431890060795,5.8482378964414785,-2.619896356818182,-2.5255555182954548,0.10154598815113637,1.000331099318182,1.0785323941477272,0.13791527682190338,-0.002672773000583068,-0.005933342239943183,1.3722738960261363,0.0328225749293125,0.025791579950998858,-0.6954633917902046,4.49733641581733,4.577887504294318,4.768796999296592,4.916524961248625,5.361936169970568,5.180892762575869,5.274643422388011,4.512719929798295,5.59934680962858,5.409688439133068,6.2148686481318185,6.654075590374999,5.8355897288117955,6.322656259615284,5.2549627939282395,1.2283096012840908,1.1833666992784093,1.4940592194853979,1.490282659659091,1.462358148460227,1.4692490311244886,1.357870349943182,-0.006040430449666478,-0.005970889925145398,-0.006747231083079545,-0.009925684249545454,-0.005871304908388068,-0.004229327971829375,-0.005202136664914206,-0.007083734695850566,-0.007761530124354602,-0.0008740174773486933,-0.002086358108352273,-0.005267497730609213,-0.003241214227969318,-0.006914640097121078,-0.005931879711462501,-0.005995068601939773,-0.006062209165398125,-0.006451701453125,-0.0060060135407370464,-0.0061494725414381265,-0.0058502985417664775,-0.005462721153705851,-0.0054487916587904715,-0.006706598144081251,-0.006711553992154546,-0.006362475782011932,-0.008416107493171818,-0.005619506961822729,-0.003104868114829545,-0.0038837771218659086,-0.0016089641430141021,-0.002831023316368977,-0.0021935215658023116,-0.002262678932034091,-0.0024695065056820507,-0.00573893646375284,-0.005721124324702842,-0.006546510000619659,-0.008744428602175003,-0.006113537915622101,-0.006531253259814376,-0.00530959485884659,18.923698762551346,-16.240071107680624,0.8894339151772728,0.19737532504321015,0.6661195944204545,0.5148726858696362],\
        [0.1,5.073489776506079,5.8308542589414785,-2.608322790568182,-2.4778788632954547,0.09978816871951136,1.001912666818182,1.0787293591477272,0.13733085404690337,-0.002820768455431818,-0.006073458102443182,1.5314235272761363,0.0324478976668125,0.02508070895099886,-0.6764828755402046,4.519119653317329,4.726850416794317,4.937742036796592,5.053960298748625,5.488463607470569,5.346631512575869,5.42539294738801,4.676007204798295,5.582708634628579,5.437210651633068,6.146773935631818,6.587999377875001,5.839812216311795,6.2682436096152845,5.277204731428239,1.3871163325340907,1.3821176505284092,1.643536027610398,1.630928724659091,1.625128474710227,1.6069358224119887,1.520788001193182,-0.006226574220916477,-0.0060750321751453975,-0.007025260158079545,-0.010221157562045455,-0.006029470745888068,-0.004378894183079376,-0.005355143442414206,-0.007160772920850567,-0.007793964686854601,-0.0010243981154286932,-0.002205582495389773,-0.005363147835609212,-0.003348435685469318,-0.0070033079846210785,-0.006107633561462501,-0.006154046426939773,-0.006217909827898126,-0.006750695028125,-0.006175571340737046,-0.006294983666438126,-0.005944075391766477,-0.005625426238705851,-0.005646796952540472,-0.006780335019081251,-0.0067984691421545465,-0.006486098494511932,-0.008487617680671817,-0.005783700285572728,-0.003185671628579545,-0.0041389132544909085,-0.0017033301927338396,-0.0028863604906477266,-0.0023473365723548864,-0.002366816435784091,-0.0026418256945408007,-0.00591743018250284,-0.005858627464702842,-0.006677180250619659,-0.009000679877175002,-0.006305699515622101,-0.006642785809814375,-0.0054249585825965905,18.758649337551343,-16.147276607680624,0.8857566383272728,0.1966979701786364,0.6783689035454545,0.5119746911504237],\
        [0.15,5.02599052650608,5.531066721441478,-2.531737908068182,-2.3612831582954548,0.09688566471217387,0.9971735155681819,1.0994275541477272,0.13497344205940337,-0.003084744403181818,-0.006177342214943182,1.8009406110261366,0.0302257141293125,0.02299559832599886,-0.6202663830402045,4.32885655331733,4.700169179294319,4.927519436796591,4.981228686248625,5.350477144970569,5.289008400075868,5.350816772388011,4.689841929798295,5.30880445962858,5.242301201633067,5.751216648131818,6.135932665375,5.579030903811795,5.866441859615284,5.092471831428239,1.5505748825340908,1.6824510367784093,1.9732408938603978,1.7869761984090908,1.9243118109602269,1.9454851174119887,1.816593858693182,-0.006507891754666478,-0.006199796500145398,-0.007406117345579545,-0.010370960587045454,-0.006160168158388068,-0.004489188170579375,-0.0055409044036642055,-0.007130833058350567,-0.007654980061854602,-0.0012367280351618182,-0.002384389875945523,-0.005422103739359213,-0.003464948180469318,-0.007001044884621078,-0.006223021748962501,-0.006282821089439773,-0.006334696440398125,-0.007033779290625,-0.006317054203237046,-0.006364533541438126,-0.006022205929266477,-0.005772765048705851,-0.005871582576290472,-0.006752476031581251,-0.006729394767154546,-0.006540885082011932,-0.008282951430671818,-0.005971231621822728,-0.003281170579829545,-0.004589887180740909,-0.0018258006953433522,-0.0030447501947727267,-0.0025751180896386363,-0.0025069825095340907,-0.0031118053979570506,-0.00615060908250284,-0.006030878389702842,-0.006785844025619659,-0.009307764052175002,-0.006455377415622101,-0.006639914934814375,-0.0055571262563465906,17.286575000051343,-15.877666082680623,0.8799033715077615,0.1957654464761364,0.6777399611704547,0.5055153710315112],\
        [0.2,4.76966060150608,5.132677533941478,-2.434298891818182,-2.2529630907954545,0.09474540373863637,0.9909418718181819,1.1315467403977273,0.13235534276090338,-0.003273107961931818,-0.006152490527443182,2.0154821110261363,0.027520137054312502,0.02084771957599886,-0.5637937667902045,4.0388198283173296,4.481014879294317,4.702098799296592,4.710481311248625,5.005995044970568,5.00210692507587,5.05429395988801,4.504351367298295,4.94776815962858,4.932354901633067,5.279849460631818,5.591939102875,5.203979691311796,5.371816747115284,4.803260306428239,1.6510865425340908,1.8895907430284091,2.261112937610398,1.8967494471590909,2.157452819710227,2.2740559386619887,2.057558467443182,-0.006651193729666478,-0.006195822150145398,-0.007598445158079545,-0.010205121899545457,-0.0061596313833880674,-0.004465433295579375,-0.005624785978664205,-0.006968831233350567,-0.007424345661854601,-0.0013756259560086931,-0.0025046190642772728,-0.005392305686859213,-0.0035025720379693176,-0.006876002172121079,-0.006216435686462501,-0.006275947614439773,-0.006318829965398125,-0.007088951678125,-0.006304283790737046,-0.006297929553938125,-0.006017321254266478,-0.00581479193620585,-0.005951363488790472,-0.0065974353815812506,-0.006539955179654546,-0.006456156107011932,-0.007916091130671817,-0.0060388045968227284,-0.003330196743579545,-0.004916117980740909,-0.0018918137350358523,-0.0031730641210227267,-0.0027222287671386366,-0.0025647278382840907,-0.0035632240703070504,-0.006263816532502841,-0.006080594264702842,-0.00677273263811966,-0.009406313377175003,-0.006446867490622101,-0.006483661734814374,-0.0055933638350965905,15.321677412551344,-15.526637782680623,0.8756910262147728,0.1952202792761364,0.6646542176704546,0.5000763452497612],\
        [0.25,4.4413475640060796,4.737976746441478,-2.338216333068182,-2.162150320182955,0.09317722411363637,0.986668855568182,1.166600357897727,0.1299453097422434,-0.003413419215681818,-0.006065152339943182,2.1825276085261365,0.024917220636812502,0.01890656771349886,-0.5137662805402046,3.73869885331733,4.192964429294318,4.396801049296592,4.375634036248625,4.606384294970569,4.63871950007587,4.6839241598880115,4.239805029798295,4.59072147212858,4.604524401633068,4.832425535631818,5.079309140375001,4.820203141311795,4.898129984615284,4.497810356428238,1.7421631962840909,2.0419450917784094,2.4761158988603977,1.9956131209090908,2.324779489710227,2.542924493661989,2.2425672961931817,-0.0066876167671664774,-0.006125931925145397,-0.007674482508079545,-0.009922768262045455,-0.006086443608388068,-0.004392417470579375,-0.005640521316164206,-0.006759609808350567,-0.007177766711854602,-0.0014773796451111932,-0.0026169578784772727,-0.005338374764359213,-0.0035122039992193177,-0.006707498484621079,-0.006158247311462501,-0.006199441339439773,-0.006239514327898125,-0.007029024328124999,-0.006215553640737045,-0.006171729091438125,-0.005958427816766478,-0.005803782811205851,-0.005941564151290471,-0.006413386469081251,-0.006337372517154546,-0.006327194557011931,-0.007513806293171818,-0.006006028559322728,-0.003360033049829545,-0.005140046943240909,-0.0019373431119108521,-0.0032883825472727266,-0.0028184114858886365,-0.002590677103284091,-0.003945292724057051,-0.00627250990750284,-0.006060393777202842,-0.006692531550619659,-0.009367790627175,-0.006349487803122101,-0.006278744472314374,-0.005596769272596591,13.374937162551344,-15.126412857680624,0.8726358149272728,0.1949164952136364,0.6495278240454546,0.49584638383943624],\
        [0.3,4.09596001400608,4.374731033941478,-2.250204786818182,-2.0880322451829545,0.09203187253863637,0.9850561055681819,1.201257776647727,0.1278459801307771,-0.003508116200681818,-0.005954338014943182,2.3073423335261367,0.0225751902238625,0.01720678816349886,-0.47036754679020454,3.4555090783173297,3.8856816667943184,4.068026236796592,4.028587898748625,4.206322057470569,4.25972783757587,4.299052909888012,3.947873554798295,4.26166739712858,4.290405089133067,4.431417660631817,4.6248388653750006,4.459910303811796,4.472628647115284,4.204567281428239,1.826955681284091,2.1561548542784092,2.621750748860398,2.0812119921590906,2.438066214710227,2.7425129561619888,2.376440146193182,-0.006653790154666478,-0.006032466325145398,-0.007688229095579545,-0.009600476062045456,-0.005987830170888068,-0.004291150946829375,-0.005631850691164206,-0.006534140883350566,-0.006943305261854602,-0.0015586993484074433,-0.002683637175227273,-0.005270468240609213,-0.0035018644167193183,-0.006533762909621078,-0.006056005673962501,-0.006095953289439774,-0.006135460965398125,-0.006911999490625,-0.006086434728237046,-0.006019604941438126,-0.005874369929266477,-0.005758556398705851,-0.005905353788790472,-0.006211645244081251,-0.006133508029654546,-0.006177474144511932,-0.007116636793171818,-0.005957190621822728,-0.003363046498579545,-0.005276241530740909,-0.0019595774834108523,-0.0033600693460227268,-0.0028819021458886367,-0.002587560760784091,-0.0042499167003070505,-0.00623462104500284,-0.005989049164702842,-0.0065887566131196595,-0.009257199539675002,-0.006232854565622101,-0.006069260876064375,-0.005578392135096591,11.613497250051344,-14.699405282680623,0.8703988288522728,0.1947656777386364,0.6357872376704546,0.4926091882576362],\
        [0.4,3.4334491515060797,3.757219946441478,-2.102934571763182,-1.9793171682954547,0.09058377252613636,0.989150136818182,1.2650490200227271,0.12450528699076588,-0.003620243313181818,-0.005709976851193182,2.4440393835261363,0.018723050216525,0.01444628567949886,-0.3991653242902045,2.9620780645673292,3.2870355167943184,3.425683136796591,3.3701735987486248,3.4724050449705683,3.5410181000758687,3.5701402973880114,3.364050704798295,3.6991863508785796,3.7344403591330675,3.7674582556318175,3.8854184316250002,3.8358267425617956,3.769547817115284,3.682760571428239,1.949962280034091,2.2879700042784092,2.748278586360398,2.186512067159091,2.5407373772102266,2.9559718186619888,2.511422896193182,-0.006485158154666478,-0.005820935808895398,-0.007569558245579545,-0.008950162887045456,-0.0057557054546380675,-0.004089901358079375,-0.005518413602414206,-0.006101763358350567,-0.006504134245604602,-0.0016685413222861933,-0.0027779542614772726,-0.0051058967418592125,-0.003456678209219318,-0.006192394898371078,-0.005842770748962501,-0.005839516688189774,-0.005895166877898125,-0.006622204965625,-0.005826790653237046,-0.005734038253938126,-0.005691576224266477,-0.005603244778705851,-0.005731535435040472,-0.00583500540533125,-0.005768528798404546,-0.005857369143261931,-0.0064002310194218185,-0.005763089775572728,-0.003363172083579545,-0.005410199180740909,-0.0019836794426608523,-0.003454099679772727,-0.0029360092483886368,-0.002556041120784091,-0.004668448711557051,-0.006100664907502841,-0.005822854927202842,-0.006351968188119659,-0.008914865114675001,-0.005927057440622101,-0.005656490407314375,-0.005470063411346591,8.768199934701345,-13.818272882680624,0.8675433833397728,0.1947264624261364,0.6153148660279546,0.48821461121113624],\
        [0.5,2.8464350077560794,3.265243755191478,-1.989991219318182,-1.9078710907954548,0.08984832868863638,1.000679554318182,1.3201261683977272,0.12209205174940338,-0.003627500939431818,-0.005454085849943182,2.4516737335261363,0.0158226931255625,0.01234473566773636,-0.3422722375402045,2.5591223120673297,2.7473319980443183,2.8484001355465915,2.7910791149986247,2.8471014237205683,2.9129436000758693,2.933255539888011,2.8274433260482947,3.24623091587858,3.2740776416330677,3.2517940022568177,3.3244069567500003,3.3306622963117953,3.227338929615284,3.246846382678239,1.9844212300340907,2.302687729278409,2.718123161360398,2.1879206546590906,2.519785177210227,2.9803011561619885,2.502295571193182,-0.006235353650916478,-0.005580153857645397,-0.007356776745579545,-0.008356114947045456,-0.005503266714638068,-0.003889393151829375,-0.005352717247414205,-0.005720332912100567,-0.006120295649354601,-0.0017364030027861932,-0.0028293414514772726,-0.004929728865609212,-0.003384199081719318,-0.005876910329621079,-0.0055910028402125014,-0.005573130058189773,-0.0056326786191481255,-0.006313296519375,-0.005552485951987046,-0.005428767345188126,-0.005465900798016478,-0.005416137639955851,-0.005518606227540471,-0.005509646455331251,-0.005469321955904546,-0.005558675394511932,-0.005796713178171819,-0.005533202263072728,-0.003302661561079545,-0.005393396868240909,-0.001975795915660852,-0.003481557118522727,-0.0029243493821386364,-0.002491534830784091,-0.00487766851155705,-0.005887667798752841,-0.005601325665952842,-0.006062640078119659,-0.008491613777175002,-0.005620909119372101,-0.005297989921064375,-0.005318997165096591,6.728119050051344,-12.947978607680625,0.8660174587272728,0.1948760219761364,0.6032629576288296,0.4856069831882987],\
        [0.75,1.7016395675060794,2.3988365926914783,-1.811384538068182,-1.8189657482954549,0.08951754850113637,1.0473207555681818,1.426015162510227,0.11861392077190337,-0.003470123491931818,-0.004891927182443182,2.0964803247761363,0.011351668316812502,0.00882091095099886,-0.23391511454020453,1.8276135165673295,1.6693915471305683,1.7089374497965915,1.6664334957486246,1.6738745362205685,1.7120030213258692,1.7154699698880114,1.73991336701342,2.4311235125035795,2.4299172467580674,2.368038755631818,2.3943746966250004,2.4305718350617953,2.313242355865284,2.4349377048032386,1.732147436284091,1.969235669278409,2.279570522610398,1.8373234696590908,2.140886775960227,2.590644506161989,2.089379764943182,-0.0055764976609164775,-0.0050198752601453974,-0.006699649519329545,-0.007177655757544205,-0.004932100182138068,-0.0034360078577043754,-0.004927680322414206,-0.004963376177276817,-0.005354701141778351,-0.001822072462661193,-0.002874398450227273,-0.004510375424359212,-0.003184465754219318,-0.005216730000883578,-0.005026607120212501,-0.0049741160226897735,-0.005048516309148125,-0.005618388081875,-0.0049334104622370464,-0.004800901838438126,-0.0049616195292664774,-0.004946655501205851,-0.005004542911290472,-0.004836216711925001,-0.004886840635104546,-0.0049177591070256816,-0.004646829048546818,-0.004989715450572728,-0.003076147994829545,-0.005048777568240908,-0.001915739268235852,-0.003410604973522727,-0.0027872769958886363,-0.002310983011909091,-0.00493419534905705,-0.00533183025750284,-0.005063222974702842,-0.005419105293119659,-0.007420672245925002,-0.004986781533747101,-0.0045907035287281244,-0.004903207986346591,3.964759787551345,-10.953227341048123,0.8649825931022728,0.1955197455386364,0.5947733308204546,0.48285861548926123],\
        [1.0,0.8904917827560794,1.8296162876914783,-1.7199929580681819,-1.7914805432954548,0.09009553510113637,1.1038137570681819,1.5009260991477271,0.11715700763440337,-0.003218289260681818,-0.004405009499845682,1.5163817235261363,0.0091680652418125,0.00664453260099886,-0.15085226554020453,1.3300421195673295,0.8839991417943183,0.8948497617965915,0.8697681612486245,0.8685233824705685,0.8809147613258692,0.8736619973880111,0.941448589798295,1.8778996908785797,1.8557671378830674,1.8013569468818178,1.819634315375,1.8378878425617955,1.7421386096152842,1.870986278928239,1.2458079737840908,1.4003614980284094,1.664982298860398,1.2648537471590908,1.572665625960227,1.9808341724119887,1.4606647274431819,-0.004961813546515228,-0.004537164310229148,-0.006053660041829545,-0.0063204363795454545,-0.004447483526141818,-0.003084123860251875,-0.004506544896164206,-0.004400442409600566,-0.004768746758104602,-0.001846833687411193,-0.002814881690227273,-0.004134685269799212,-0.002972923424431818,-0.004688892168746078,-0.004537242459007501,-0.004462307257539773,-0.004545029675029375,-0.005065315541861249,-0.004428857691762046,-0.004296341912238126,-0.0045062929182811025,-0.004518380613973351,-0.004531513180172972,-0.004302642834081251,-0.004448280813404546,-0.004405189287386931,-0.0038420696219218188,-0.004520148962103478,-0.002835919431829545,-0.004564926079490909,-0.0018375886594108521,-0.0032298351385227266,-0.0026073314527636365,-0.002133191146111591,-0.00467426971155705,-0.00479572472778409,-0.004592403386354092,-0.00485018259127091,-0.006464206591668752,-0.0044568747466946015,-0.004080482986064375,-0.004490929152496591,2.9983958500513443,-9.255852251430625,0.8655961596022728,0.1962269138961364,0.5989700398990796,0.4823293133293862],\
        [1.5,-0.1750967234939209,1.090154171441478,-1.652688213068182,-1.7978040095454546,0.09189675148863637,1.215946726555682,1.6007564503977272,0.11677325594690337,-0.002747866144156818,-0.003683758422443182,0.4598444047761364,0.0078153097418125,0.0040203034259988606,-0.023749964290204484,0.6617610158173295,-0.17611853320568183,-0.1776331257034085,-0.18083952625137534,-0.17262931752943134,-0.18611718742413075,-0.20316840261198843,-0.13547669520170502,1.1330126721285794,1.0974271516330671,1.0744410606318175,1.099619740375,1.0772219913117955,1.029526247115284,1.1101818689282386,0.3103035425340908,0.3565499517784092,0.5927456401103979,0.22421584090909075,0.5444690134602271,0.9133467686619886,0.34695871994318195,-0.004027506199666478,-0.003784769451395398,-0.004994633438079545,-0.005171807574545455,-0.003699567753388068,-0.0025671726180793754,-0.0038445059836642054,-0.003637582795850567,-0.003923030386854601,-0.0018448942341611932,-0.0027400698677272728,-0.0035453599318592127,-0.002612301271952693,-0.0039034020396210784,-0.003790394445212501,-0.003709189138189773,-0.0037797944116481253,-0.0042741264393749995,-0.003689734209487046,-0.003552356745188126,-0.0037981605630164773,-0.003828128551205851,-0.003795475087540472,-0.003585332139081251,-0.003828782579654546,-0.003642573472011932,-0.0027964509181718183,-0.003789956110572728,-0.002409094228942045,-0.003666812807332159,-0.001701139211520852,-0.002861705080596477,-0.0022684164058023866,-0.0018753517218815909,-0.00393929560030705,-0.00395001465250284,-0.003827348519702842,-0.0039653554881196595,-0.004954947327175002,-0.003702731553122101,-0.0034094216235643748,-0.0037951141775965907,2.958589637551344,-6.600574520180624,0.8680358092397727,0.1974585807768739,0.6115462705974921,0.48284955178851124],\
        [2.0,-0.8542266859939207,0.5865932964414782,-1.646034911818182,-1.8250301757954546,0.09368431981363637,1.313705228068182,1.6663195353977271,0.11765090205940337,-0.002339633456681818,-0.003172367664943182,-0.1760242664738636,0.008069538641812502,0.0023981082634988594,0.06932271195979545,0.19429627831732943,-0.8664305332056821,-0.8598832882034084,-0.854612751251375,-0.8365191800294318,-0.8541593999241304,-0.8728710401119883,-0.8321537702017052,0.6120128471285793,0.5823273766330677,0.5793016606318178,0.6102000028750001,0.5700443913117961,0.5523504596152842,0.585690968928239,-0.28125104496590914,-0.2628183257215909,-0.06379612613960184,-0.3999371203409091,-0.08281136028977265,0.2746334474119887,-0.31546599130681774,-0.0033768647296664777,-0.0032582165751453974,-0.0042066662205795455,-0.004418688437045454,-0.0031637805433880678,-0.002181658551829375,-0.0033558268061642054,-0.003136486283350567,-0.0033294006868546016,-0.0018104264601611932,-0.002643064219477273,-0.0030986469431092127,-0.002328624981594318,-0.003347604972121078,-0.0032569452614625008,-0.003175913476939773,-0.003248836890398125,-0.0037109717243749996,-0.0031709006157370464,-0.003040141703938126,-0.003283251016766477,-0.003309392108705851,-0.003265436061290472,-0.0030996554690812506,-0.003379081792154546,-0.003121399957011932,-0.0021506564681718185,-0.003287162585572728,-0.0020641689498295448,-0.002920968860740909,-0.0015915654445071022,-0.002514800223445227,-0.0019816156415395116,-0.001684622581071591,-0.0032346588007240505,-0.0033300353975028404,-0.0032713431259528422,-0.00333505806311966,-0.0038693341646750022,-0.003189514978122101,-0.0029802398848143754,-0.003262537412596591,3.467766462551344,-4.6462627076806235,0.8705336209897728,0.1984054761811364,0.6173484483654545,0.4835358319488862],\
        [3.0,-1.7075967734939204,-0.14618399105852165,-1.676629343068182,-1.8758759345454545,0.09650182896691674,1.463119514318182,1.7526838566477272,0.12019128304690337,-0.001756501561931818,-0.0024947951399431818,-0.5924154289738639,0.009820041954312502,0.0002787534509988629,0.18661626945979548,-0.49617338418267076,-1.7398580457056814,-1.7123259882034085,-1.706495113751375,-1.6847971175294312,-1.6896747499241305,-1.7030785651119889,-1.7061738702017057,-0.14923489037142046,-0.15487036086693262,-0.14816400186818202,-0.12041155962499994,-0.15481274618820473,-0.15173344038471592,-0.1661186810717612,-0.7212969074659092,-0.6381063832215906,-0.5448927636396022,-0.8027643828409093,-0.49804516028977286,-0.1743585688380116,-0.7494827538068182,-0.0025723954671664777,-0.0025321642001453976,-0.003144397233079545,-0.0034437799870454555,-0.002446573995888068,-0.0016328158580793753,-0.0026674871911642056,-0.002508607170850567,-0.0025380202993546016,-0.0016938164621611931,-0.0024642776062572726,-0.0024667818143592124,-0.0018800167504693182,-0.0026090745096210787,-0.0025558403989625013,-0.0024735656519397735,-0.0025346551403981252,-0.0030002935156249995,-0.002489483065737046,-0.0023618811664381256,-0.0025867449667664774,-0.0026086620862058505,-0.0025409600887904716,-0.0024633367690812505,-0.002734840904654546,-0.002425179094511932,-0.0013887522931718185,-0.002606739884322728,-0.0015852918823295449,-0.0019099789057409088,-0.0014080502131157272,-0.001984636799772727,-0.0015523105230136364,-0.0014155763732840911,-0.0021864501715570506,-0.00252030640750284,-0.002547055177202842,-0.0025110513381196597,-0.0025217454646750013,-0.002512739240622101,-0.0024355241973143746,-0.0025179505100965905,3.927269550051344,-1.994229307680623,0.8744455330647728,0.1996944360573864,0.6092907960541921,0.4840217702594612],\
        [4.0,-2.25767963599392,-0.7112130535585219,-1.7098300705681821,-1.9082844770454548,0.09843825512163637,1.5660459280681818,1.811761179147727,0.12261168190940337,-0.001376541888181818,-0.0020444243149431818,-0.5853890164738635,0.011723614054312503,-0.0011831126740011414,0.24231055820979552,-1.0322885341826709,-2.296566145705682,-2.258375988203409,-2.2574210387513753,-2.2432416925294323,-2.2336276124241308,-2.2391116776119886,-2.2611164827017047,-0.7272154278714207,-0.7146775858669323,-0.7138746643681819,-0.6967919471249995,-0.710636733688204,-0.7087600278847157,-0.7320276310717615,-0.7659493824659089,-0.5921497957215908,-0.5806281386396019,-0.7808159828409097,-0.4831981852897733,-0.20531389383801146,-0.7410573288068182,-0.002110737117166478,-0.0020464324001453977,-0.0024787854580795455,-0.0028030585370454547,-0.001987716608388068,-0.0012255669080793751,-0.0022112743536642056,-0.0021154637583505665,-0.0020287951118546014,-0.0015848642459861933,-0.002315206069953898,-0.0020360442643592123,-0.001553997760469318,-0.0021337676471210785,-0.002099604498962501,-0.002025589864439773,-0.0020677911528981254,-0.0025283699906249995,-0.0020464841907370463,-0.001925590978938126,-0.0021282086917664774,-0.002159131248705851,-0.002068240663790472,-0.0020467226315812504,-0.0022827785296545455,-0.001983640844511932,-0.0009535128931718179,-0.002166169584322728,-0.001279235678579545,-0.0012958906807409086,-0.0012713300936233521,-0.0016308966185227267,-0.0012650515733886364,-0.0012198442232840912,-0.0015228739928070507,-0.00201753615750284,-0.002082642252202842,-0.00200803733811966,-0.001760859889675002,-0.0020833026031221013,-0.0020799641848143744,-0.002034946497596591,3.370655837551344,-0.3053746076806245,0.8770642587827728,0.2004944110386364,0.5877881626704546,0.48360024493801124],\
        [5.0,-2.6636159109939204,-1.1825770410585221,-1.732636218068182,-1.9258294745454547,0.09977376183113637,1.637882578068182,1.8574471016477272,0.12465424102615337,-0.0011235889469318181,-0.0017338037399431822,-0.5126707664738639,0.013386834529312502,-0.0023109340490011406,0.25902658445979554,-1.481328871682671,-2.6992863707056816,-2.660212813203409,-2.6636348512513752,-2.659023742529432,-2.6409060749241307,-2.638954865111988,-2.664491845201705,-1.2002971778714207,-1.1795996608669324,-1.1866485393681825,-1.1795223471250003,-1.1764162461882046,-1.1810041153847153,-1.1976578810717609,-0.7241743699659091,-0.48793749572159084,-0.5191623136396024,-0.6875818203409091,-0.4014929227897728,-0.15904936883801124,-0.659579766306818,-0.0018225643921664782,-0.0017075979001453974,-0.002042839008079545,-0.002344767137045455,-0.0016728777583880678,-0.0008955515830793752,-0.0018924568661642053,-0.0018449746208505668,-0.001679896674354601,-0.0014849898676486933,-0.0021735384937272726,-0.001730917539359213,-0.001300995871719318,-0.0018046838096210786,-0.0017868138614625015,-0.0017184129394397728,-0.0017518804403981246,-0.0021838180531249998,-0.001736748990737046,-0.001625413891438126,-0.0018051808542664774,-0.0018538010737058509,-0.001740707051290472,-0.0017450249815812507,-0.0019517163421545465,-0.0016815904320119316,-0.0006815319556718177,-0.001861146071822728,-0.0010741638160795448,-0.0009132940307409092,-0.0011675966182733521,-0.0014134931435227267,-0.0010618748696386365,-0.0010805411870340909,-0.0011101532990570504,-0.0016906127575028397,-0.0017700329022028423,-0.0016825877256196596,-0.0013123650896750012,-0.0017774162906221014,-0.0018236349223143748,-0.0017049773475965911,2.129626625051344,0.8407040923193758,0.8788037602530728,0.2010256265761364,0.5621016326704547,0.4827299868137237],\
        [7.5,-3.36809698599392,-2.1006741910585216,-1.750019169318182,-1.9333973882954547,0.10159385500113637,1.738643843068182,1.941357712897727,0.12832777602066586,-0.0008261154344318181,-0.0012799476399431827,-0.4315869539738637,0.0163985192991625,-0.004286541924001139,0.20913418820979546,-2.363680509182671,-3.3766211082056814,-3.3577209007034066,-3.3652189762513753,-3.375555292529433,-3.3604281124241315,-3.3446676526119883,-3.355595382701705,-2.0985571653714206,-2.0890460483669324,-2.103672101868183,-2.106138247125,-2.094423558688205,-2.1096186903847163,-2.099842756071761,-0.631117394965909,-0.3647086957215907,-0.410008426139602,-0.5497076828409092,-0.33241534778977266,-0.11304224383801142,-0.5519287663068181,-0.0014601246046664772,-0.0012219344001453978,-0.0014629593830795453,-0.0015983134745454547,-0.0012338732458880676,-0.00034138605807937546,-0.0014167926161642056,-0.001443934995850567,-0.0011824438493546014,-0.0012874255165445682,-0.0019351192664772729,-0.0012769836143592126,-0.000902327946719318,-0.0013382328471210785,-0.0013443528239625011,-0.0012810180894397725,-0.0012884801403981257,-0.0015934175406249994,-0.0012843445157370457,-0.0012066580039381265,-0.001340563341766477,-0.0014267541987058505,-0.001260543788790472,-0.0012929612315812507,-0.001426149317154546,-0.0012523000070119319,-0.000347140705671818,-0.0014008607093227285,-0.0008683313285795446,-0.0004946640557409085,-0.0010032641155608521,-0.001218557206022727,-0.0007740372583886364,-0.0008754241732840911,-0.0006660669365570505,-0.0012632920825028406,-0.0013540829147028416,-0.0012697157881196596,-0.0008810608021750004,-0.0013348958156221015,-0.001401341959814375,-0.001261939972596591,-2.2543040999486568,2.472428092319376,0.8810048912713978,0.2017322354636364,0.5009223279204545,0.4800250316625112],\
        [10.0,-3.8377789984939206,-2.768999266058522,-1.735295193068182,-1.9181435282954546,0.10231214273863637,1.780438095568182,2.0009128503977274,0.13064258851115337,-0.0007284308344318181,-0.0010417859774431814,-0.4284906289738635,0.018281979542195,-0.005541411049001138,0.10122130570979548,-3.017098921682671,-3.812917708205681,-3.824347713203408,-3.829128838751375,-3.838503380029432,-3.8458745874241314,-3.8217340026119886,-3.8164927077017046,-2.73557517787142,-2.7599446483669325,-2.7642799143681835,-2.756891322124999,-2.7730916086882047,-2.784359065384716,-2.761835231071761,-0.5695266824659093,-0.3621234832215906,-0.3870041136396021,-0.5059656953409092,-0.3879877852897726,-0.14345038133801125,-0.5313064538068181,-0.0013042169171664773,-0.0009685102626453973,-0.001211836470579545,-0.0011636209995454548,-0.001031811783388068,2.919931692062531e-05,-0.0011717607786642052,-0.0012280031208505666,-0.0009563627618546016,-0.0011369500658411932,-0.001776048275227273,-0.0010502250893592129,-0.0006522925967193177,-0.0011199250721210781,-0.0011226024489625012,-0.0010693761769397735,-0.0010517370028981254,-0.0012338190281249994,-0.0010469339532370465,-0.0009977644164381257,-0.0011057724417664772,-0.0012378391237058508,-0.0010108915012904721,-0.0010359411065812515,-0.0011582664421545459,-0.001050559057011932,-0.00023459583067181843,-0.0011494512468227282,-0.0008300401410795454,-0.0003902284932409089,-0.0008991374657858521,-0.0012527597310227265,-0.0006349055583886362,-0.000737289985784091,-0.0006114452990570508,-0.0010840835200028398,-0.0011663779522028423,-0.0011219998381196599,-0.0008458577521750022,-0.0010855051156221018,-0.0011464326348143749,-0.0010749486600965903,-6.949083474948651,3.2392064673193754,0.8816921446333978,0.2020042295761364,0.4533781439204546,0.4774830077976362]
    thisTablePD = pd.DataFrame(TableValues)
    thisTablePD.columns = TableNames
    return thisTablePD

def getNGAsubGMM_KBCG20_params_Z_ALL_allregca_attn3_corrreg_cs_dmb():
    import pandas as pd
    TableNames = ['T','intercept_Ca','slope_Ca','mean_residual_Seattle_basin','intercept_Ja','slope_Ja','intercept_NZ','slope_NZ','intercept_Tw','slope_Tw']
    TableValues = [0.0,-0.033754301197499996,0.020800511716500002,-0.12636866708086195,-0.0005529446583750001,-0.02734723875,-0.02931476287325,-0.0834525987875,0.01317675748016125,0.04771932642499999],\
        [0.01,-0.0343736696365,0.02040381306375,-0.12672268189043043,0.0002526594827625,-0.028776069125,-0.02830014957275,-0.08319883980499998,0.0120985832535,0.0468850228875],\
        [0.02,-0.0346620150505,0.018233465985387498,-0.12864145290357673,-0.00019903856349999999,-0.030456670749999998,-0.028717663953625003,-0.08296550817499998,0.011978375626499999,0.04726836905000001],\
        [0.03,-0.032014189153750004,0.01404618569,-0.13286075208095602,0.0015630913348499997,-0.036267939500000006,-0.0321773369815,-0.083556641975,0.012910306230250001,0.0479622865],\
        [0.05,-0.02800928812475,-0.01639370629725,-0.1790409302576125,0.009631226920625,-0.05772627549999999,-0.044733842720625,-0.08138297911249999,0.010570091424450001,0.032748081685],\
        [0.075,-0.0335819776925,-0.060272212219999996,-0.26165842359705976,0.013762593339375002,-0.07625619075000001,-0.0435112363025,-0.09752370141250001,0.013508881253775,0.040801586625000004],\
        [0.1,-0.025227651735,-0.077067179389125,-0.276774462153351,0.010235154091749998,-0.06803727500000001,-0.047968737568749996,-0.124030047625,0.010252059915375002,0.04577504279999999],\
        [0.15,-0.032857327788625004,-0.05138626542000001,-0.2466803898762036,-0.009497614233375,-0.050343659,-0.039382031487125,-0.11888789862499999,0.015651804935,0.040260643952499994],\
        [0.2,-0.03458785828375,-0.0166555040525,-0.17419780205816063,-0.013801794362375002,-0.035030581500000005,-0.025000917937500002,-0.08964205199124999,0.014435965303375,0.04221275772375],\
        [0.25,-0.03124035367875,0.03552376458875,-0.0879957400774202,-0.008879053851462499,-0.022592392611249998,-0.022148713141249998,-0.11874965,0.021983555944624998,0.050554266875000003],\
        [0.3,-0.027222135421624997,0.051800011881125006,-0.04654938693796568,-0.010823017867,-0.0053718362433999986,-0.010104445762250001,-0.08400784160000001,0.0196698113875,0.053314924125],\
        [0.4,-0.0457149848235,0.11065903034999999,0.02301776315080529,-0.01393108017875,0.030155087749999997,0.007677063721250001,-0.045937946405124996,0.0168888633255,0.05192628572499999],\
        [0.5,-0.031599507048,0.12928157356375,0.09922914008543522,-0.019981112062500004,0.07473341575,0.016125543815125,-0.019815379327625,0.018284056794,0.06589519125000001],\
        [0.75,-0.032778511671375,0.18490751412500003,0.2095787498528159,-0.024187499924999994,0.14135858625,0.012059182889500001,0.004010887979625,0.0061094869828375,0.08552269174999999],\
        [1.0,-0.02905766329625,0.173915665,0.23675735101783552,-0.0026708645725412507,0.18875034,0.030448366818875,0.044832102464625,0.015144663302499998,0.11085033800000002],\
        [1.5,-0.023875662571875,0.20171529475,0.28640011342795674,0.004608324932265,0.24953633625000002,0.043018472656125004,0.09409885549625,0.02235719603625,0.15125173],\
        [2.0,-0.03921786791675,0.23098182375,0.2823581641702665,-0.0144193421975,0.28058041375,0.046788464626250005,0.11224142191750001,0.013477585614624999,0.16836538500000003],\
        [3.0,0.0004206101259999999,0.210505666125,0.2862725141924854,0.017050267357375,0.30566118875,0.058672132548750006,0.12463766950000002,0.02534372068625,0.1571751925],\
        [4.0,0.018831799273375,0.24494711099999997,0.44800238887362404,0.052368336375000005,0.3071636575,0.042133992835599994,0.1365461037625,0.030810533825000003,0.13208657000000001],\
        [5.0,0.016382686933749998,0.261637485375,0.5213250587396355,0.010241568942749999,0.2927403475,0.044754821700375,0.15927326262500002,0.012982342352625,0.1352846955],\
        [7.5,0.01289024091975,0.22066540775000004,0.48504635209305247,-0.005722435173,0.24873990875000002,0.037141830422875,0.12667653862125,0.013252225127624999,0.125746567875],\
        [10.0,0.015757278335,0.18633673825,0.40273410996429904,-0.012161281381375,0.2144433825,0.020092163226625003,0.1090940182925,-0.0026285019687,0.112043061625],\
        [-1.0,-0.01227797382125,0.11844208857499999,0.11997729637642131,-0.016288319615,0.10123976525,0.007889256656124999,-0.0111422155509125,0.011640702620562502,0.07862500474999999]
    thisTablePD = pd.DataFrame(TableValues)
    thisTablePD.columns = TableNames
    return thisTablePD

def getPSHAB20_EpistemicModelCoefficients_Interface():
    import pandas as pd
    TableNames = ['Region','SigEp1','SigEp2','T1','T2']
    TableValues = ['Global',0.4,0.4,0.2,0.4],\
        ['Alaska',0.15,0.1,1.0,4.0],\
        ['Aleutian',0.15,0.1,1.0,4.0],\
        ['Cascadia',0.43,0.33,0.2,0.5],\
        ['CAM_N',0.2,0.1,0.7,4.0],\
        ['CAM_S',0.2,0.1,0.7,4.0],\
        ['Japan_Pac',0.13,0.1,0.7,4.0],\
        ['Japan_Phi',0.13,0.1,0.7,4.0],\
        ['SA_N',0.13,0.1,0.7,4.0],\
        ['SA_S',0.13,0.1,0.7,4.0],\
        ['Taiwan',0.23,0.14,0.6,3.0]
    thisTablePD = pd.DataFrame(TableValues)
    thisTablePD.columns = TableNames
    return thisTablePD

def getPSHAB20_EpistemicModelCoefficients_Slab():
    import pandas as pd
    TableNames = ['Region','SigEp1','SigEp2','T1','T2']
    TableValues = ['Global',0.35,0.22,0.15,2.0],\
        ['Alaska',0.15,0.12,0.5,1.0],\
        ['Aleutian',0.25,0.18,0.3,0.8],\
        ['Cascadia',0.35,0.16,0.2,3.0],\
        ['CAM_N',0.25,0.19,0.3,0.8],\
        ['CAM_S',0.25,0.19,0.3,0.8],\
        ['Japan_Pac',0.13,0.11,0.3,0.8],\
        ['Japan_Phi',0.21,0.15,0.3,0.7],\
        ['SA_N',0.21,0.15,0.3,0.7],\
        ['SA_S',0.21,0.15,0.3,0.7],\
        ['Taiwan',0.13,0.11,0.3,0.8]
    thisTablePD = pd.DataFrame(TableValues)
    thisTablePD.columns = TableNames
    return thisTablePD

def getPSHAB20_Table_E1_Interface_Coefficients_OneRowHeader():
    import pandas as pd
    TableNames = ['T','Global_c0','Alaska_c0','Aleutian_c0','Cascadia_c0','CAM_N_c0','CAM_S_c0','Japan_Pac_c0','Japan_Phi_c0','SA_N_c0','SA_S_c0','Taiwan_E_c0','Taiwan_W_c0','c1','b4','Global_a0','Alaska_a0','Cascadia_a0','CAM_a0','Japan_a0','SA_a0','Taiwan_a0','c4','c5','c6','V1_m_s','V2_m_s','Vref_m_s','Japan_s1','Taiwan_s1','Global_s2','Alaska_s2','Cascadia_s2','Japan_s2','SA_s2','Taiwan_s2','f4','f5','J_e1','J_e2','J_e3','C_e1','C_e2','C_e3','del_None','del_Seattle']
    TableValues = [-1.0,8.097,9.283796298,8.374796298,7.728,7.046899908,7.046899908,8.772125851,7.579125851,8.528671414,8.679671414,7.559846279,7.559846279,-1.661,0.1,-0.00395,-0.00404,'NA',-0.00153,-0.00239,-0.000311,-0.00514,1.336,-0.039,1.844,270.0,850.0,760.0,-0.738,-0.454,-0.601,-1.031,-0.671,-0.738,-0.681,-0.59,-0.31763,-0.0052,-0.137,0.137,0.091,0.0,0.115,0.068,-0.115,0.0],\
        [0.0,4.082,4.458796298,3.652796298,3.856,2.875899908,2.875899908,5.373125851,4.309125851,5.064671414,5.198671414,3.032846279,3.032846279,-1.662,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.246,-0.021,1.128,270.0,1350.0,760.0,-0.586,-0.44,-0.498,-0.785,-0.572,-0.586,-0.333,-0.44,-0.44169,-0.0052,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.01,3.714,4.094796298,3.288796298,3.488,2.564899908,2.564899908,5.022125851,3.901125851,4.673671414,4.807671414,2.636846279,2.636846279,-1.587,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.246,-0.021,1.128,270.0,1300.0,760.0,-0.604,-0.44,-0.498,-0.803,-0.571,-0.604,-0.333,-0.44,-0.4859,-0.0052,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.02,3.762,4.132796298,3.338796298,3.536,2.636899908,2.636899908,5.066125851,3.935125851,4.694671414,4.827671414,2.698846279,2.698846279,-1.593,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.227,-0.021,1.128,270.0,1225.0,760.0,-0.593,-0.458,-0.478,-0.785,-0.575,-0.593,-0.345,-0.458,-0.4859,-0.00518,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.025,3.859,4.246796298,3.392796298,3.633,2.731899908,2.731899908,5.140125851,4.094125851,4.779671414,4.911671414,2.800846279,2.800846279,-1.607,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.221,-0.021,1.128,270.0,1200.0,760.0,-0.569,-0.454,-0.464,-0.745,-0.573,-0.579,-0.362,-0.459,-0.4859,-0.00515,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.03,4.014,4.386796298,3.535796298,3.788,2.890899908,2.890899908,5.317125851,4.278125851,4.935671414,5.066671414,2.926846279,2.926846279,-1.63,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.215,-0.021,1.128,270.0,1200.0,760.0,-0.539,-0.455,-0.446,-0.69,-0.565,-0.561,-0.38,-0.464,-0.4908,-0.00511,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.04,4.223,4.553796298,3.747796298,3.997,3.075899908,3.075899908,5.564125851,4.531125851,5.182671414,5.312671414,3.069846279,3.069846279,-1.657,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.207,-0.021,1.128,270.0,1200.0,760.0,-0.468,-0.453,-0.431,-0.636,-0.546,-0.508,-0.403,-0.466,-0.49569,-0.00505,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.05,4.456,4.745796298,3.959796298,4.23,3.287899908,3.287899908,5.843125851,4.816125851,5.457671414,5.586671414,3.236846279,3.236846279,-1.687,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.201,-0.021,1.128,270.0,1225.0,760.0,-0.403,-0.452,-0.42,-0.594,-0.519,-0.461,-0.427,-0.468,-0.49823,-0.00497,0.0,0.0,1.0,0.1,-0.1,-0.063,-0.05,0.0],\
        [0.075,4.742,4.972796298,4.231796298,4.516,3.560899908,3.560899908,6.146125851,5.126125851,5.788671414,5.917671414,3.446846279,3.446846279,-1.715,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.19,-0.021,1.128,270.0,1350.0,760.0,-0.325,-0.456,-0.442,-0.586,-0.497,-0.452,-0.458,-0.473,-0.49724,-0.00489,0.05,-0.043,-0.025,0.3,-0.34,-0.2,-0.075,0.078],\
        [0.1,4.952,5.160796298,4.471796298,4.726,3.788899908,3.788899908,6.346125851,5.333125851,5.998671414,6.126671414,3.643846279,3.643846279,-1.737,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.182,-0.021,1.128,270.0,1450.0,760.0,-0.264,-0.468,-0.485,-0.629,-0.486,-0.498,-0.49,-0.482,-0.49471,-0.00478,0.1,-0.085,-0.05,0.333,-0.377,-0.222,-0.081,0.075],\
        [0.15,5.08,5.285796298,4.665796298,4.848,3.945899908,3.945899908,6.425125851,5.420125851,6.103671414,6.230671414,3.798846279,3.798846279,-1.745,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.171,-0.021,1.162,270.0,1500.0,760.0,-0.25,-0.484,-0.546,-0.729,-0.499,-0.568,-0.536,-0.499,-0.48583,-0.0046,0.164,-0.139,-0.082,0.29,-0.29,-0.193,-0.091,0.064],\
        [0.2,5.035,5.277796298,4.661796298,4.798,3.943899908,3.943899908,6.288125851,5.289125851,6.013671414,6.140671414,3.827846279,3.827846279,-1.732,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.163,-0.021,1.187,270.0,1425.0,760.0,-0.288,-0.498,-0.612,-0.867,-0.533,-0.667,-0.584,-0.522,-0.47383,-0.00434,0.164,-0.139,-0.082,0.177,-0.192,-0.148,-0.092,0.075],\
        [0.25,4.859,5.154796298,4.503796298,4.618,3.800899908,3.800899908,5.972125851,4.979125851,5.849671414,5.974671414,3.765846279,3.765846279,-1.696,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.156,-0.021,1.204,270.0,1350.0,760.0,-0.36,-0.511,-0.688,-1.011,-0.592,-0.781,-0.654,-0.555,-0.47696,-0.00402,0.08,-0.08,-0.053,0.1,-0.035,-0.054,0.0,0.0],\
        [0.3,4.583,4.910796298,4.276796298,4.34,3.491899908,3.491899908,5.582125851,4.592125851,5.603671414,5.728671414,3.602846279,3.602846279,-1.643,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.151,-0.021,1.215,270.0,1250.0,760.0,-0.455,-0.514,-0.748,-1.133,-0.681,-0.867,-0.725,-0.596,-0.4845,-0.0037,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.4,4.18,4.548796298,3.919796298,3.935,3.128899908,3.128899908,5.091125851,4.089125851,5.151671414,5.277671414,3.343846279,3.343846279,-1.58,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.143,-0.022,1.227,270.0,1150.0,760.0,-0.617,-0.51,-0.802,-1.238,-0.772,-0.947,-0.801,-0.643,-0.48105,-0.00342,-0.13,0.113,0.087,0.0,0.05,0.2,0.0,0.0],\
        [0.5,3.752,4.168796298,3.486796298,3.505,2.640899908,2.640899908,4.680125851,3.571125851,4.719671414,4.848671414,3.028846279,3.028846279,-1.519,0.1,-0.00657,-0.00541,'NA',-0.00387,-0.00862,-0.00397,-0.00787,1.143,-0.023,1.234,270.0,1025.0,760.0,-0.757,-0.506,-0.845,-1.321,-0.838,-1.003,-0.863,-0.689,-0.46492,-0.00322,-0.2,0.176,0.118,0.0,0.1,0.2,0.0,0.0],\
        [0.75,3.085,3.510796298,2.710796298,2.837,1.987899908,1.987899908,3.906125851,2.844125851,3.995671414,4.129671414,2.499846279,2.499846279,-1.44,0.1,-0.00635,-0.00478,'NA',-0.00342,-0.00763,-0.00351,-0.0068,1.217,-0.026,1.24,270.0,900.0,760.0,-0.966,-0.5,-0.911,-1.383,-0.922,-1.052,-0.942,-0.745,-0.43439,-0.00312,-0.401,0.284,0.167,0.0,0.2,0.125,-0.2,0.012],\
        [1.0,2.644,3.067796298,2.238796298,2.396,1.553899908,1.553899908,3.481125851,2.371125851,3.512671414,3.653671414,2.140846279,2.140846279,-1.419,0.1,-0.0058,-0.00415,'NA',-0.00297,-0.00663,-0.00305,-0.00605,1.27,-0.028,1.24,270.0,800.0,760.0,-0.986,-0.49,-0.926,-1.414,-0.932,-1.028,-0.96,-0.777,-0.38484,-0.0031,-0.488,0.346,0.203,0.0,0.245,0.153,-0.245,0.037],\
        [1.5,2.046,2.513796298,1.451796298,1.799,0.990899908,0.990899908,2.870125851,1.779125851,2.875671414,3.023671414,1.645846279,1.645846279,-1.4,0.1,-0.00505,-0.00342,'NA',-0.00245,-0.00546,-0.00252,-0.00498,1.344,-0.031,1.237,270.0,760.0,760.0,-0.966,-0.486,-0.888,-1.43,-0.814,-0.971,-0.942,-0.79,-0.32318,-0.0031,-0.578,0.48,0.24,0.0,0.32,0.2,-0.32,0.064],\
        [2.0,1.556,2.061796298,0.906796298,1.31,0.534899908,0.534899908,2.507125851,1.293125851,2.327671414,2.481671414,1.217846279,1.217846279,-1.391,0.1,-0.00429,-0.0029,'NA',-0.00208,-0.00463,-0.00214,-0.00423,1.396,-0.034,1.232,270.0,760.0,760.0,-0.901,-0.475,-0.808,-1.421,-0.725,-0.901,-0.891,-0.765,-0.26577,-0.0031,-0.645,0.579,0.254,0.0,0.37,0.239,-0.28,0.14],\
        [2.5,1.167,1.709796298,0.392796298,0.922,0.186899908,0.186899908,2.160125851,0.895125851,1.950671414,2.111671414,0.871846279,0.871846279,-1.394,0.1,-0.00369,-0.0025,'NA',-0.00179,-0.00399,-0.00184,-0.00364,1.437,-0.036,1.227,270.0,760.0,760.0,-0.822,-0.453,-0.743,-1.391,-0.632,-0.822,-0.842,-0.724,-0.21236,-0.0031,-0.678,0.609,0.267,0.0,0.4,0.264,-0.313,0.19],\
        [3.0,0.92,1.456796298,0.099796298,0.675,-0.087100092,-0.087100092,1.969125851,0.607125851,1.766671414,1.932671414,0.596846279,0.596846279,-1.416,0.1,-0.00321,-0.00217,'NA',-0.00156,-0.00347,-0.0016,-0.00316,1.47,-0.038,1.223,270.0,760.0,760.0,-0.751,-0.428,-0.669,-1.343,-0.57,-0.751,-0.787,-0.675,-0.17807,-0.0031,-0.772,0.635,0.265,0.0,0.43,0.287,-0.355,0.165],\
        [4.0,0.595,1.207796298,-0.356203702,0.352,-0.353100092,-0.353100092,1.675125851,0.303125851,1.524671414,1.698671414,0.268846279,0.268846279,-1.452,0.1,-0.00244,-0.00165,'NA',-0.00118,-0.00264,-0.00122,-0.00241,1.523,-0.044,1.216,270.0,760.0,760.0,-0.68,-0.396,-0.585,-1.297,-0.489,-0.68,-0.706,-0.613,-0.13729,-0.0031,-0.699,0.709,0.259,0.0,0.44,0.303,-0.417,0.163],\
        [5.0,0.465,1.131796298,-0.601203702,0.223,-0.491100092,-0.491100092,1.601125851,0.183125851,1.483671414,1.665671414,0.014846279,0.014846279,-1.504,0.1,-0.0016,-0.00125,'NA',-0.000895,-0.002,-0.000919,-0.00182,1.564,-0.048,1.21,270.0,760.0,760.0,-0.592,-0.353,-0.506,-1.233,-0.421,-0.592,-0.621,-0.536,-0.07733,-0.0031,-0.642,0.63,0.215,0.0,0.45,0.321,-0.45,0.132],\
        [7.5,0.078,0.758796298,-1.137203702,-0.162,-0.837100092,-0.837100092,1.270125851,-0.143874149,1.175671414,1.366671414,-0.446153721,-0.446153721,-1.569,0.1,-0.000766,-0.000519,'NA',-0.000371,-0.000828,-0.000382,-0.000755,1.638,-0.059,1.2,270.0,760.0,760.0,-0.494,-0.311,-0.418,-1.147,-0.357,-0.52,-0.52,-0.444,-0.05443,-0.0031,-0.524,0.306,0.175,0.0,0.406,0.312,-0.35,0.15],\
        [10.0,0.046,0.708796298,-1.290203702,-0.193,-0.864100092,-0.864100092,1.364125851,-0.195874149,1.271671414,1.462671414,-0.473153721,-0.473153721,-1.676,0.1,0.0,0.0,'NA',0.0,0.0,0.0,0.0,1.69,-0.067,1.194,270.0,760.0,760.0,-0.395,-0.261,-0.321,-1.06,-0.302,-0.395,-0.42,-0.352,-0.03313,-0.0031,-0.327,0.182,0.121,0.0,0.345,0.265,-0.331,0.117]
    thisTablePD = pd.DataFrame(TableValues)
    thisTablePD.columns = TableNames
    return thisTablePD

def getPSHAB20_Table_E2_Slab_Coefficients_OneRowHeader():
    import pandas as pd
    TableNames = ['T','Global_c0','Alaska_c0','Aleutian_c0','Cascadia_c0','CAM_c0','Japan_c0','SA_N_c0','SA_S_c0','Taiwan_c0','c1','b4','Global_a0','Alaska_a0','Cascadia_a0','CAM_a0','Japan_a0','SA_a0','Taiwan_a0','c4','c5','c6','d','m','db_km','V1_m_s','V2_m_s','Vref_m_s','Japan_s1','Taiwan_s1','Global_s2','Alaska_s2','Cascadia_s2','Japan_s2','SA_s2','Taiwan_s2','f4','f5','J_e1','J_e2','J_e3','C_e1','C_e2','C_e3','del_None','del_Seattle']
    TableValues = [-1.0,13.194,12.79,13.6,12.874,12.81,13.248,12.754,12.927,13.516,-2.422,0.1,-0.0019,-0.00238,-0.00109,-0.00192,-0.00215,-0.00192,-0.00366,1.84,-0.05,0.8,0.2693,0.0252,67.0,270.0,850.0,760.0,-0.738,-0.454,-0.601,-1.031,-0.671,-0.738,-0.681,-0.59,-0.31763,-0.0052,-0.137,0.137,0.091,0.0,0.115,0.068,-0.115,0.0],\
        [0.0,9.907,9.404,9.912,9.747,9.58,10.145,9.254,9.991,10.071,-2.543,0.1,-0.00255,-0.00227,-0.00354,-0.00238,-0.00335,-0.00238,-0.00362,1.84,-0.05,0.4,0.3004,0.0314,67.0,270.0,1350.0,760.0,-0.586,-0.44,-0.498,-0.785,-0.572,-0.586,-0.333,-0.44,-0.44169,-0.0052,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.01,9.962,9.451,9.954,9.802,9.612,10.162,9.293,9.994,10.174,-2.554,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.84,-0.05,0.4,0.2839,0.0296,67.0,270.0,1300.0,760.0,-0.604,-0.44,-0.498,-0.803,-0.571,-0.604,-0.333,-0.44,-0.4859,-0.0052,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.02,10.099,9.587,10.086,9.933,9.771,10.306,9.403,10.152,10.273,-2.566,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.05,0.415,0.2854,0.0298,67.0,270.0,1225.0,760.0,-0.593,-0.458,-0.478,-0.785,-0.575,-0.593,-0.345,-0.458,-0.4859,-0.00518,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.025,10.181,9.667,10.172,10.009,9.85,10.387,9.481,10.292,10.329,-2.578,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.05,0.43,0.2891,0.0302,67.0,270.0,1200.0,760.0,-0.569,-0.454,-0.464,-0.745,-0.573,-0.579,-0.362,-0.459,-0.4859,-0.00515,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.03,10.311,9.808,10.302,10.133,9.993,10.498,9.592,10.459,10.451,-2.594,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.05,0.445,0.2932,0.0306,67.0,270.0,1200.0,760.0,-0.539,-0.455,-0.446,-0.69,-0.565,-0.561,-0.38,-0.464,-0.4908,-0.00511,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.04,10.588,10.086,10.602,10.404,10.317,10.744,9.834,10.818,10.678,-2.629,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.05,0.46,0.3004,0.0313,67.0,270.0,1200.0,760.0,-0.468,-0.453,-0.431,-0.636,-0.546,-0.508,-0.403,-0.466,-0.49569,-0.00505,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.05,10.824,10.379,10.862,10.634,10.563,10.981,10.027,11.102,10.86,-2.649,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.05,0.475,0.3048,0.0316,67.0,270.0,1225.0,760.0,-0.403,-0.452,-0.42,-0.594,-0.519,-0.461,-0.427,-0.468,-0.49823,-0.00497,0.0,0.0,1.0,0.1,-0.1,-0.063,-0.05,0.0],\
        [0.075,11.084,10.65,11.184,10.888,10.785,11.25,10.265,11.424,11.093,-2.65,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.05,0.49,0.2992,0.0321,67.0,270.0,1350.0,760.0,-0.325,-0.456,-0.442,-0.586,-0.497,-0.452,-0.458,-0.473,-0.49724,-0.00489,0.05,-0.043,-0.025,0.3,-0.34,-0.2,-0.075,0.078],\
        [0.1,11.232,10.816,11.304,11.03,10.841,11.466,10.467,11.49,11.283,-2.647,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.05,0.505,0.2854,0.032,67.0,270.0,1450.0,760.0,-0.264,-0.468,-0.485,-0.629,-0.486,-0.498,-0.49,-0.482,-0.49471,-0.00478,0.1,-0.085,-0.05,0.333,-0.377,-0.222,-0.081,0.075],\
        [0.15,11.311,10.883,11.402,11.103,10.809,11.619,10.566,11.32,11.503,-2.634,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.06,0.52,0.2814,0.0325,67.0,270.0,1500.0,760.0,-0.25,-0.484,-0.546,-0.729,-0.499,-0.568,-0.536,-0.499,-0.48583,-0.0046,0.164,-0.139,-0.082,0.29,-0.29,-0.193,-0.091,0.064],\
        [0.2,11.055,10.633,11.183,10.841,10.519,11.351,10.33,10.927,11.32,-2.583,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.068,0.535,0.291,0.0306,67.0,270.0,1425.0,760.0,-0.288,-0.498,-0.612,-0.867,-0.533,-0.667,-0.584,-0.522,-0.47383,-0.00434,0.164,-0.139,-0.082,0.177,-0.192,-0.148,-0.092,0.075],\
        [0.25,10.803,10.322,10.965,10.583,10.268,11.063,10.124,10.555,11.147,-2.539,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.075,0.55,0.2758,0.0306,67.0,270.0,1350.0,760.0,-0.36,-0.511,-0.688,-1.011,-0.592,-0.781,-0.654,-0.555,-0.47696,-0.00402,0.08,-0.08,-0.053,0.1,-0.035,-0.054,0.0,0.0],\
        [0.3,10.669,10.116,10.87,10.443,10.134,10.878,10.077,10.328,11.079,-2.528,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.082,0.565,0.2719,0.0323,67.0,270.0,1250.0,760.0,-0.455,-0.514,-0.748,-1.133,-0.681,-0.867,-0.725,-0.596,-0.4845,-0.0037,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0],\
        [0.4,10.116,9.561,10.411,9.884,9.598,10.296,9.539,9.639,10.547,-2.452,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.091,0.58,0.2539,0.0302,67.0,270.0,1150.0,760.0,-0.617,-0.51,-0.802,-1.238,-0.772,-0.947,-0.801,-0.643,-0.48105,-0.00342,-0.13,0.113,0.087,0.0,0.05,0.2,0.0,0.0],\
        [0.5,9.579,8.973,9.901,9.341,9.097,9.711,9.03,9.03,10.049,-2.384,0.1,-0.00255,-0.00219,-0.00401,-0.00217,-0.00311,-0.00217,-0.00355,1.884,-0.1,0.595,0.2482,0.0295,67.0,270.0,1025.0,760.0,-0.757,-0.506,-0.845,-1.321,-0.838,-1.003,-0.863,-0.689,-0.46492,-0.00322,-0.2,0.176,0.118,0.0,0.1,0.2,0.0,0.0],\
        [0.75,8.837,8.246,9.335,8.593,8.324,8.934,8.258,8.258,9.327,-2.338,0.1,-0.00211,-0.00189,-0.00347,-0.00188,-0.00269,-0.00188,-0.00307,1.884,-0.115,0.61,0.2227,0.0266,67.0,270.0,900.0,760.0,-0.966,-0.5,-0.911,-1.383,-0.922,-1.052,-0.942,-0.745,-0.43439,-0.00312,-0.401,0.284,0.167,0.0,0.2,0.125,-0.2,0.012],\
        [1.0,8.067,7.507,8.68,7.817,7.557,8.164,7.467,7.417,8.504,-2.267,0.1,-0.00187,-0.00168,-0.00309,-0.00167,-0.00239,-0.00167,-0.00273,1.884,-0.134,0.625,0.1969,0.0231,67.0,270.0,800.0,760.0,-0.986,-0.49,-0.926,-1.414,-0.932,-1.028,-0.96,-0.777,-0.38484,-0.0031,-0.488,0.346,0.203,0.0,0.245,0.153,-0.245,0.037],\
        [1.5,6.829,6.213,7.581,6.573,6.35,6.896,6.22,6.18,7.204,-2.166,0.1,-0.00154,-0.00139,-0.00254,-0.00138,-0.00197,-0.00138,-0.00225,1.884,-0.154,0.64,0.1452,0.0118,67.0,270.0,760.0,760.0,-0.966,-0.486,-0.888,-1.43,-0.814,-0.971,-0.942,-0.79,-0.32318,-0.0031,-0.578,0.48,0.24,0.0,0.32,0.2,-0.32,0.064],\
        [2.0,5.871,5.206,6.671,5.609,5.434,5.935,5.261,5.161,6.227,-2.077,0.1,-0.00131,-0.00118,-0.00216,-0.00117,-0.00167,-0.00117,-0.00191,1.884,-0.154,0.655,0.06,0.007,67.0,270.0,760.0,760.0,-0.901,-0.475,-0.808,-1.421,-0.725,-0.901,-0.891,-0.765,-0.26577,-0.0031,-0.645,0.579,0.254,0.0,0.37,0.239,-0.28,0.14],\
        [2.5,5.2,4.594,6.047,4.932,4.773,5.234,4.567,4.517,5.517,-2.015,0.1,-0.00113,-0.00101,-0.00186,-0.00101,-0.00144,-0.00101,-0.00164,1.884,-0.154,0.67,0.0,0.0,0.0,270.0,760.0,760.0,-0.822,-0.453,-0.743,-1.391,-0.632,-0.822,-0.842,-0.724,-0.21236,-0.0031,-0.678,0.609,0.267,0.0,0.4,0.264,-0.313,0.19],\
        [3.0,4.83,4.206,5.667,4.556,4.441,4.849,4.176,4.076,5.157,-2.012,0.1,-0.000979,-0.00088,-0.00161,-0.000873,-0.00125,-0.000873,-0.00143,1.949,-0.154,0.685,0.0,0.0,0.0,270.0,760.0,760.0,-0.751,-0.428,-0.669,-1.343,-0.57,-0.751,-0.787,-0.675,-0.17807,-0.0031,-0.772,0.635,0.265,0.0,0.43,0.287,-0.355,0.165],\
        [4.0,4.173,3.517,4.97,3.893,3.849,4.074,3.495,3.445,4.55,-1.989,0.1,-0.000745,-0.00067,-0.00123,-0.000664,-0.000952,-0.000664,-0.00109,2.031,-0.154,0.7,0.0,0.0,0.0,270.0,760.0,760.0,-0.68,-0.396,-0.585,-1.297,-0.489,-0.68,-0.706,-0.613,-0.13729,-0.0031,-0.699,0.709,0.259,0.0,0.44,0.303,-0.417,0.163],\
        [5.0,3.833,3.142,4.592,3.547,3.502,3.814,3.038,3.038,4.229,-1.998,0.1,-0.000564,-0.000507,-0.000929,-0.000503,-0.00072,-0.000503,-0.000822,2.131,-0.154,0.715,0.0,0.0,0.0,270.0,760.0,760.0,-0.592,-0.353,-0.506,-1.233,-0.421,-0.592,-0.621,-0.536,-0.07733,-0.0031,-0.642,0.63,0.215,0.0,0.45,0.321,-0.45,0.132],\
        [7.5,3.132,2.391,3.65,2.84,2.821,3.152,2.368,2.368,3.554,-2.019,0.1,-0.000234,-0.00021,-0.000385,-0.000209,-0.000299,-0.000209,-0.000341,2.185,-0.154,0.73,0.0,0.0,0.0,270.0,760.0,760.0,-0.494,-0.311,-0.418,-1.147,-0.357,-0.52,-0.52,-0.444,-0.05443,-0.0031,-0.524,0.306,0.175,0.0,0.406,0.312,-0.35,0.15],\
        [10.0,2.72,2.031,2.95,2.422,2.408,2.791,1.939,1.939,3.166,-2.047,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.35,-0.154,0.745,0.0,0.0,0.0,270.0,760.0,760.0,-0.395,-0.261,-0.321,-1.06,-0.302,-0.395,-0.42,-0.352,-0.03313,-0.0031,-0.327,0.182,0.121,0.0,0.345,0.265,-0.331,0.117]
    thisTablePD = pd.DataFrame(TableValues)
    thisTablePD.columns = TableNames
    return thisTablePD

def getPSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader():
    import pandas as pd
    TableNames = ['T','Tau','PhiTot_Phi1squared','PhiTot_Phi2squared','PhiTot_PhiVsquared','VM','PhiS2S_PhiS2S0squared','PhiS2S_a1','PhiSS_PhiSS1squared','PhiSS_PhiSS2squared','PhiSS_a2']
    TableValues = [-1.0,0.477,0.348,0.288,-0.179,423.0,0.142,0.047,0.153,0.166,0.011],\
        [0.0,0.48,0.396,0.565,-0.18,423.0,0.221,0.093,0.149,0.327,0.068],\
        [0.01,0.476,0.397,0.56,-0.18,423.0,0.223,0.098,0.148,0.294,0.071],\
        [0.02,0.482,0.401,0.563,-0.181,423.0,0.227,0.105,0.149,0.294,0.073],\
        [0.025,0.49,0.405,0.575,-0.183,423.0,0.231,0.12,0.15,0.31,0.076],\
        [0.03,0.5,0.413,0.589,-0.188,423.0,0.239,0.145,0.153,0.313,0.077],\
        [0.04,0.515,0.439,0.616,-0.205,423.0,0.261,0.177,0.159,0.322,0.08],\
        [0.05,0.528,0.473,0.653,-0.23,423.0,0.285,0.2,0.167,0.33,0.077],\
        [0.075,0.53,0.529,0.722,-0.262,423.0,0.339,0.205,0.184,0.299,0.063],\
        [0.1,0.524,0.517,0.712,-0.239,423.0,0.347,0.185,0.176,0.31,0.061],\
        [0.15,0.51,0.457,0.644,-0.185,423.0,0.313,0.123,0.164,0.307,0.076],\
        [0.2,0.501,0.432,0.64,-0.138,423.0,0.277,0.11,0.163,0.301,0.07],\
        [0.25,0.492,0.45,0.633,-0.185,423.0,0.26,0.119,0.169,0.233,0.077],\
        [0.3,0.492,0.436,0.584,-0.158,423.0,0.254,0.092,0.159,0.22,0.065],\
        [0.4,0.492,0.433,0.556,-0.19,423.0,0.23,0.044,0.158,0.222,0.064],\
        [0.5,0.492,0.428,0.51,-0.186,423.0,0.225,0.038,0.16,0.243,0.044],\
        [0.75,0.492,0.448,0.471,-0.177,422.0,0.218,0.04,0.175,0.241,0.04],\
        [1.0,0.492,0.43,0.43,-0.166,422.0,0.227,0.015,0.195,0.195,0.043],\
        [1.5,0.492,0.406,0.406,-0.111,422.0,0.244,-0.047,0.204,0.204,-0.034],\
        [2.0,0.492,0.393,0.393,0.0,422.0,0.231,-0.036,0.196,0.196,-0.036],\
        [2.5,0.492,0.381,0.381,0.0,421.0,0.222,-0.025,0.169,0.169,-0.029],\
        [3.0,0.492,0.367,0.367,0.0,419.0,0.199,-0.03,0.177,0.177,-0.011],\
        [4.0,0.492,0.33,0.33,0.0,416.0,0.191,-0.042,0.158,0.158,0.033],\
        [5.0,0.492,0.298,0.298,0.0,415.0,0.181,0.005,0.132,0.132,0.014],\
        [7.5,0.492,0.254,0.254,0.0,419.0,0.181,-0.016,0.113,0.113,0.016],\
        [10.0,0.492,0.231,0.231,0.0,427.0,0.181,0.04,0.11,0.11,0.017]
    thisTablePD = pd.DataFrame(TableValues)
    thisTablePD.columns = TableNames
    return thisTablePD


def coeff_read_csv(inFilename):
    import NGAsubGMM
    if inFilename == 'NGAsubGMM_KBCG20_coefficients.csv':
        return NGAsubGMM.getNGAsubGMM_KBCG20_coefficients()
    elif inFilename == 'NGAsubGMM_KBCG20_params_Z_ALL_allregca_attn3_corrreg_cs_dmb.csv':
        return NGAsubGMM.getNGAsubGMM_KBCG20_params_Z_ALL_allregca_attn3_corrreg_cs_dmb()
    elif inFilename == 'posterior_coefficients_KBCG20_T-1.00.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T_1pt00()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.00.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt00()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.01.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt01()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.02.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt02()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.03.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt03()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.05.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt05()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.07.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt07()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.10.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt10()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.15.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt15()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.20.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt20()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.25.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt25()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.30.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt30()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.40.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt40()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.50.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt50()
    elif inFilename == 'posterior_coefficients_KBCG20_T00.75.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T00pt75()
    elif inFilename == 'posterior_coefficients_KBCG20_T01.00.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T01pt00()
    elif inFilename == 'posterior_coefficients_KBCG20_T01.50.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T01pt50()
    elif inFilename == 'posterior_coefficients_KBCG20_T02.00.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T02pt00()
    elif inFilename == 'posterior_coefficients_KBCG20_T03.00.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T03pt00()
    elif inFilename == 'posterior_coefficients_KBCG20_T04.00.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T04pt00()
    elif inFilename == 'posterior_coefficients_KBCG20_T05.00.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T05pt00()
    elif inFilename == 'posterior_coefficients_KBCG20_T07.50.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T07pt50()
    elif inFilename == 'posterior_coefficients_KBCG20_T10.00.csv':
        import NGAsubGMMcoeffsKBCG20post
        return NGAsubGMMcoeffsKBCG20post.getposterior_coefficients_KBCG20_T10pt00()
    elif inFilename == 'PSHAB20_EpistemicModelCoefficients_Interface.csv':
        return NGAsubGMM.getPSHAB20_EpistemicModelCoefficients_Interface()
    elif inFilename == 'PSHAB20_EpistemicModelCoefficients_Slab.csv':
        return NGAsubGMM.getPSHAB20_EpistemicModelCoefficients_Slab()
    elif inFilename == 'PSHAB20_Table_E1_Interface_Coefficients_OneRowHeader.csv':
        return NGAsubGMM.getPSHAB20_Table_E1_Interface_Coefficients_OneRowHeader()
    elif inFilename == 'PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader.csv':
        return NGAsubGMM.getPSHAB20_Table_E2_Slab_Coefficients_OneRowHeader()
    elif inFilename == 'PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader.csv':
        return NGAsubGMM.getPSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader()
    else:
        return -999


        
##################################################################################################################
##################################################################################################################
##################################################################################################################
##################################################################################################################
##################################################################################################################
##################################################################################################################
##################################################################################################################
##################################################################################################################
##################################################################################################################
##################################################################################################################
##################################################################################################################
##################################################################################################################


def getTFvalue(inValue):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    # Code Written and developed by Silvia Mazzoni, smazzoni@ucla.edu, April 2020
    if type(inValue) == str:
        if str(inValue).lower() == "pga".lower():
            getTFvalueValue = 0
        elif str(inValue).lower() == "pgv".lower():
            getTFvalueValue = -1
    # end
    else:
        getTFvalueValue = inValue
    # end
    return getTFvalueValue


# end


# logistc hinge def
def loghinge(x, x0, a, b0, b1, delta):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    import math
    loghingeValue = (a + b0 * (x - x0) + (b1 - b0) * delta * math.log(1 + math.exp((x - x0) / delta)))
    return loghingeValue


# end

# interpolation of adjustment to magnitude break point
def interp_dmb(period):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    Aarray = [0.01, 1, 3, 10]
    Carray = [0, 0, -0.4, -0.4]
    import NGAsubGMM
    if period == 0:
        interp_dmbValue = NGAsubGMM.interpolateArray(0.01, Aarray, Carray, "log", "linear", "constant")
    elif period == -1:
        interp_dmbValue = 0
    else:
        interp_dmbValue = NGAsubGMM.interpolateArray(period, Aarray, Carray, "log", "linear", "constant")
    # end
    return interp_dmbValue


# end


# interpolation of k1/k2 (values taken from Campbell and Bozorgnia (2014)
def interp_k1k2(period):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    import NGAsubGMM
    periods = [0.005, 0.01, 0.02, 0.03, 0.05, 0.075, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1., 1.5, 2., 3., 4., 5.,
               7.5, 10.]
    k1 = [865., 865., 865., 908., 1054., 1086., 1032., 878., 748., 654., 587., 503., 457., 410., 400., 400., 400., 400.,
          400., 400., 400., 400.]
    k2 = [-1.186, -1.186, -1.219, -1.273, -1.346, -1.471, -1.624, -1.931, -2.188, -2.381, -2.518, -2.657, -2.669,
          -2.401, -1.955, -1.025, -0.299, 0., 0., 0., 0., 0.]

    if period == 0:
        ap_k1 = NGAsubGMM.interpolateArray(0.005, periods, k1, "log", "linear", "constant")
        ap_k2 = NGAsubGMM.interpolateArray(0.005, periods, k2, "log", "linear", "constant")
    elif period == -1:
        ap_k1 = 400.0
        ap_k2 = -1.995
    else:
        ap_k1 = NGAsubGMM.interpolateArray(period, periods, k1, "log", "linear", "constant")
        ap_k2 = NGAsubGMM.interpolateArray(period, periods, k2, "log", "linear", "constant")
    # end
    interp_k1k2Value = [-999, ap_k1, ap_k2]  # inserted a spacer for zero-starting index
    return interp_k1k2Value


# end


# funcation to calculate Z_1/Z2pt5 from Vs30
def calc_z_from_Vs30(Vs30, coeffs):
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    zref = coeffs[1] + (coeffs[2] - coeffs[1]) * math.exp((math.log(Vs30) - coeffs[3]) / coeffs[4]) / (
                1 + math.exp((math.log(Vs30) - coeffs[3]) / coeffs[4]))

    calc_z_from_Vs30Value = zref
    return calc_z_from_Vs30Value


# end
def interpolateArray(Xpoint, Xlist, Ylist, XinterpType, YinterpType, extrapolateType, XinterpMin=-1e16,
                     XinterpMax=1e16):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    import math

    newX = []
    interpolateArrayValue = -999

    irow = 0
    start0 = -1
    endrow0 = -1

    nrows = len(Xlist)

    for irow in range(0, nrows - 1 + 1):  # start-index 0
        this = Xlist[irow]
        if Xpoint == this:
            interpolateArrayValue = Ylist[irow]
            return interpolateArrayValue
        # end
        if this >= XinterpMin and this <= XinterpMax:
            if start0 < 0:
                start0 = irow
            # end
            end0 = irow
    # end
    # end
    iend = irow
    istart = start0
    Xstart = Xlist[start0]
    Xend = Xlist[end0]
    if (Xend - Xpoint) * (Xstart - Xpoint) <= 0:
        for i in range(istart, iend - 1 + 1):
            thisx = Xlist[i]
            nextX = Xlist[i + 1]
            if (Xpoint - thisx) * (Xpoint - nextX) <= 0:
                l1 = i
                l2 = i + 1
                break
        # end
    # end
    else:
        if (Xend - Xstart) * (Xend - Xpoint) > 0:
            l1 = istart
            if LeftString(extrapolateType.lower(), len("extra")) == "extra".lower():
                l2 = istart + 1
            else:
                l2 = istart
        # end
        else:
            l1 = iend
            if LeftString(extrapolateType.lower(), len("extra")) == "extra".lower():
                l2 = iend - 1
            else:
                interpolateArrayValue = Ylist[end0]
                return interpolateArrayValue
        # end
    # end
    # end

    x0 = Xlist[l1]
    x1 = Xlist[l2]
    y0 = Ylist[l1]
    y1 = Ylist[l2]
    hereX = Xpoint
    if LeftString(XinterpType, len("log")).lower() == "log".lower():
        if x0 <= 0:
            x0 = 0.000000001
        # end
        if x1 <= 0:
            x1 = 0.000000002
        # end
        if hereX <= 0:
            hereX = 0.000000001
        # end
        x0 = math.log(x0)
        x1 = math.log(x1)
        hereX = math.log(hereX)
    # end
    if LeftString(YinterpType, len("log")).lower() == "log".lower():
        if y0 <= 0:
            y0 = 0.000000001
        # end
        if y1 <= 0:
            y1 = 0.000000001
        # end
        y0 = math.log(y0)
        y1 = math.log(y1)
    # end
    interpolateArrayValue = y0 + (y1 - y0) * (hereX - x0) / (x1 - x0)

    if LeftString(YinterpType, len("log")).lower() == "log".lower():
        interpolateArrayValue = math.exp(interpolateArrayValue)
    # end
    return interpolateArrayValue


# end


### def to calculate median prediction

# The following def calculates the median prediction of KBCG20, as described in chapter 4 of the PEER report.
# It takes as input the predictor variables, as well as a set of coefficients.
# Later, we define a def that acts as a wrapper around this def, and will take as input period, region index, and  select the appropriate coefficients and pass them on.
#
# The inputs are

# `m`: moment magnitude
# `rlist`: a vector of length 3, which contains the distance in subregion 1,2,3 relative to volcanic arc `rlist = c(R1,R2,R3)`. Typically, `R1=R3=0` (corresponding to forearc).
# `ztor`: depth to top of rupture in km.
# `EventType`: flag for interface (`EventType = 0`) and intraslab (`EventType = 1`). Must be 0 or 1.
# `Vs30`: $V_{S30}$ n m/s.
# `fx`: arc crossing flag. Must be 0 or 1.
# `delta_ln_z`: difference between natural log of observed Z1.0/Z2.5 value and reference Z1.0/Z2.5 from $V_{S30}$.
# `coeffs`: vector containing coefficients needed to calculate median prediction.
# `coeffs_attn`: vector of length 6 to calcualte anelastic attenuation.
# `mbreak` and `zbreak`: magnitude and depth scaling break point
# `k1` and `k2`: parameters needed for site amplification
# `nft1` and `nft2`: coefficients needed for pseudo-depth term.
# `pgarock`: median pga prediction at $V_{S30} = 1100$

# def to calculate median prediction

def KBCG20_med(M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, delta_ln_z, coeffs, coeffs_attn, coeffs_z,
               mbreak, zbreak, k1, k2, nft1, nft2, pgarock, region):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    #  x = "KBCG20_med"
    import math

    if LeftNumber(region, 1) == 1:
        distR1 = 0
        distR3 = 0
    elif LeftNumber(region, 1) == 2:
        distR1 = 0
        distR3 = 0
    elif LeftNumber(region, 1) == 3:
        distR1 = AlphaBackarc * Rrup
        distR3 = 0
    elif LeftNumber(region, 1) == 4:
        distR1 = AlphaBackarc * Rrup
        distR3 = AlphaNankai * Rrup
    elif LeftNumber(region, 1) == 5:
        distR1 = 0
        distR3 = 0
    elif LeftNumber(region, 1) == 6:
        distR1 = AlphaBackarc * Rrup
        distR3 = 0
    elif LeftNumber(region, 1) == 7:
        distR1 = 0
        distR3 = 0
    else:  # reg=0
        distR1 = AlphaBackarc * Rrup
        distR3 = 0
    # end

    distR2 = Rrup - distR1 - distR3

    theta10 = 0
    vsrock = 1100
    c = 1.88
    n = 1.18
    minmb = 6.
    delta = 0.1
    deltaz = 1
    refzif = 15
    refzslab = 50
    thisFs = (LeftNumber(EventType, 1))

    # check if cross arc:
    fx = 1
    if distR1 == 0 and distR2 == 0:
        fx = 0
    # end
    if distR2 == 0 and distR3 == 0:
        fx = 0
    # end
    if distR1 == 0 and distR3 == 0:
        fx = 0
    # end

    fmag = (1 - thisFs) * loghinge(M, mbreak, coeffs[6] * (mbreak - minmb), coeffs[6], coeffs[8],
                                   delta) + thisFs * loghinge(M, mbreak, coeffs[7] * (mbreak - minmb), coeffs[7],
                                                              coeffs[8], delta)
    fgeom = (1 - thisFs) * (coeffs[3] + coeffs[5] * M) * math.log(Rrup + 10 ** (nft1 + nft2 * (M - 6)))
    fgeom_slab = thisFs * (coeffs[4] + coeffs[5] * M) * math.log(Rrup + 10 ** (nft1 + nft2 * (M - 6)))
    fdepth = (1 - thisFs) * loghinge(Ztor, zbreak, coeffs[12] * (zbreak - refzif), coeffs[12], theta10,
                                     deltaz) + thisFs * loghinge(Ztor, zbreak, coeffs[13] * (zbreak - refzslab),
                                                                 coeffs[13], theta10, deltaz)

    DotProduct123 = distR1 * coeffs_attn[1] + distR2 * coeffs_attn[2] + distR3 * coeffs_attn[3]
    DotProduct456 = distR1 * coeffs_attn[4] + distR2 * coeffs_attn[5] + distR3 * coeffs_attn[6]
    fattn = fx * DotProduct123 + (1 - fx) * DotProduct456 + fx * coeffs[14]

    if Vs30 < k1:
        fsite = coeffs[11] * math.log(Vs30 / k1) + k2 * (
                    math.log(pgarock + c * (Vs30 / k1) ** n) - math.log(pgarock + c))
    else:
        fsite = (coeffs[11] + k2 * n) * math.log(Vs30 / k1)
    # end

    fbasin = coeffs_z[1] + coeffs_z[2] * delta_ln_z

    Median = (1 - thisFs) * coeffs[1] + thisFs * coeffs[
        2] + fmag + fgeom + fgeom_slab + fdepth + fattn + fsite + fbasin
    return Median


# end


### def to calculate median prediction for a given scenario and period
# This is a def that calculates median predictions of KBCG20 for a given scenario.
# I takes as input period, the predictor variables for the scenarios, selects the appropriate coefficients/parameters, and calls the def defined in the previous section.
#
# The arguments are similar to the def before.

# `m`: moment magnitude
# `rlist`: a vector of length 3, which contains the distances in subregion 1,2,3 relative to volcanic arc `rlist = array(R1,R2,R3)`. for regions Alaska, Cascadia, New Zealand, and Taiwan, $R1 = R2 = 0$.
# `ztor`: depth to top of rupture in km.
# `EventType`: flag for interface (`EventType = 0`) and intraslab (`EventType = 1`). Must be 0 or 1.
# `Vs30`: $V_{S30}$ n m/s.
# `Z1pt0`: depth to a shear wave horizon of 1000 m/s, in m. Used for regions Alaska and New Zealand.
# `Z2pt5`: depth to a shear wave horizon of 2500 m/s, in m. Used for regions Cascadia and Japan.
# `fx`: arc crossing flag. Must be 0 or 1.
# `mb`: Magnitude scaling break point. Should be set regionally dependent based on Campbell (2020).

# The last input is a region index `region`, which is as follows:
#
# * 0: global
# * 1: Alaska
# * 2: Cascadia
# * 3: Central America & Mexico
# * 4: Japan
# * 5: New Zealand
# * 6: South America
# * 7: Taiwan
#
# The opional argumen `Seattle_Basin` is a flag that should be set to `TRUE` if the site is in the Seattle Basin, and `FALSE` otherwise.
# This flag determines which basin depth amplification model is used for Cascadia.
# It does not have an impact on any other region.
#


    
    
    
    
def KBCG20_medPSA(period, Magnitude, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, Z1pt0, Z2pt5, Mb,UserRegion, PNWbasinStrux):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    import NGAsubGMM
    import math
    
    thisOut = -999
    XinterpMin = 0
    XinterpMax = 10
    XinterpType = "log"
    YinterpType = "log"
    extrapolateType = "extrapolate"

    Parameters = NGAsubGMM.coeff_read_csv('NGAsubGMM_KBCG20_coefficients.csv')
    TvalueList = Parameters['T']
    InterpArray = interpolateFunction(period, TvalueList, XinterpType, extrapolateType, XinterpMin, XinterpMax)

    period0 = TvalueList[InterpArray[1]]
    y0 = NGAsubGMM.KBCG20_medPSA_AtTlist(period0, Magnitude, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, Z1pt0, Z2pt5,
                               Mb, UserRegion, PNWbasinStrux)

    if InterpArray[2] <= 0:
        thisOut = y0
    else:
        period1 = TvalueList[InterpArray[2]]
        y1 = NGAsubGMM.KBCG20_medPSA_AtTlist(period1, Magnitude, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, Z1pt0,
                                   Z2pt5, Mb, UserRegion, PNWbasinStrux)
        if LeftString(YinterpType, len("log")).lower() == "log".lower():
            if y0 <= 0:
                y0 = 0.000000001
            # end
            if y1 <= 0:
                y1 = 0.000000001
            # end
            y0 = math.log(y0)
            y1 = math.log(y1)
        # end
        thisOut = y0 + (y1 - y0) * InterpArray[3]
        if LeftString(YinterpType, len("log")).lower() == "log".lower():
            thisOut = math.exp(thisOut)
    # end

    # end

    return thisOut


# end


# def to calculate median prediction using mean coefficients
def KBCG20_medPSA_AtTlist(period, M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, Z1pt0, Z2pt5, Mb, region,PNWbasinStrux):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    KBCG20_medPSA_AtTlistValue = -999
    # need to add some checks for input (period, region)
    # coefficients to calculate zref from vs30
    pars_z_ja = [-999, 7.6893685375, 2.30258509299405, 6.3091864, 0.7528670225, 1.2952369625]
    pars_z_casc = [-999, 8.29404964010203, 2.30258509299405, 6.39692965521615, 0.27081459, 1.7381352625]
    pars_z_nz = [-999, 6.859789675, 2.30258509299405, 5.745692775, 0.91563524375, 1.03531412375]
    pars_z_tw = [-999, 6.30560665, 2.30258509299405, 6.1104992125, 0.43671102, 0.7229702975]

    Parameters = NGAsubGMM.coeff_read_csv('NGAsubGMM_KBCG20_coefficients.csv')
    parameters_zmod = NGAsubGMM.coeff_read_csv('NGAsubGMM_KBCG20_params_Z_ALL_allregca_attn3_corrreg_cs_dmb.csv')

    # calculate rock PGA
    period_used = 0.
    vsrock = 1100
    pars_period = NGAsubGMM.getRangeRowT(Parameters, period_used)
    pars_period_zmod = NGAsubGMM.getRangeRowT(parameters_zmod, period_used)  # silviamazzoni: I added this

    coeffs = NGAsubGMM.getSubArrayRange(pars_period, 2, 15)
    k1k2 = interp_k1k2(period_used)
    dmb = 0

    delta_ln_z = 0
    coeffs_z = [-999, 0, 0]
    coeffs_z2 = [-999, 0, 0]

    if LeftNumber(region, 1) == 1:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [17, 24, 31])
        coeffs_attn = makeArray(pars_period, [38, 45, 52, 59, 66, 73])
    elif LeftNumber(region, 1) == 2:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [18, 25, 32])
        coeffs_attn = makeArray(pars_period, [39, 46, 53, 60, 67, 74])
        if LeftNumber(PNWbasinStrux, 1) == 1:
            coeff_seattle = NGAsubGMM.getRangeValueT(parameters_zmod, period_used, "mean_residual_Seattle_basin")
            coeffs_z2 = [-999, coeff_seattle, 0]
        elif LeftNumber(PNWbasinStrux, 1) == 2:
            coeffs_z2 = makeArray(pars_period_zmod, [2, 3])
        # end
    elif LeftNumber(region, 1) == 3:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [19, 26, 33])
        coeffs_attn = makeArray(pars_period, [40, 47, 54, 61, 68, 75])
    elif LeftNumber(region, 1) == 4:
        dmb = interp_dmb(period_used)
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [20, 27, 34])
        coeffs_attn = makeArray(pars_period, [41, 48, 55, 62, 69, 76])
        coeffs_z2 = makeArray(pars_period_zmod, [5, 6])
    elif LeftNumber(region, 1) == 5:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [21, 28, 35])
        coeffs_attn = makeArray(pars_period, [42, 49, 56, 63, 70, 77])
        coeffs_z2 = makeArray(pars_period_zmod, [7, 8])
    elif LeftNumber(region, 1) == 6:
        dmb = interp_dmb(period_used)
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [22, 29, 36])
        coeffs_attn = makeArray(pars_period, [43, 50, 57, 64, 71, 78])
    elif LeftNumber(region, 1) == 7:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [23, 30, 37])
        coeffs_attn = makeArray(pars_period, [44, 51, 58, 65, 72, 79])
        coeffs_z2 = makeArray(pars_period_zmod, [9, 10])
    else:
        coeffs_attn = makeArray(pars_period, [11, 11, 11, 11, 10, 11])
        delta_ln_z = 0
        coeffs_z = [-999, 0, 0]
    # end

    delta_bz = makeArray(pars_period, [80, 81])
    coeffs_nft = makeArray(pars_period, [82, 83])

    thisFs = (LeftNumber(EventType, 1))

    mbreak = (1 - thisFs) * (Mb + dmb) + thisFs * Mb
    zbreak = (1 - thisFs) * (30 + delta_bz[1]) + thisFs * (80 + delta_bz[2])

    mbreak_pga = mbreak
    zbreak_pga = zbreak
    k1k2_pga = k1k2
    coeffs_pga = coeffs  # silviamazzoni: I added this so I alway have coeffs
    coeffs_attn_pga = coeffs_attn
    coeffs_z_pga = coeffs_z
    coeffs_z_pga2 = coeffs_z2
    coeffs_nft_pga = coeffs_nft
    pgarock = math.exp(
        KBCG20_med(M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, vsrock, delta_ln_z, coeffs_pga, coeffs_attn_pga,
                   coeffs_z_pga, mbreak_pga, zbreak_pga, k1k2_pga[1], k1k2_pga[2], coeffs_nft_pga[1], coeffs_nft_pga[2],
                   0, region))

    # calculate PSA
    period_used = period
    pars_period = NGAsubGMM.getRangeRowT(Parameters, period_used)
    pars_period_zmod = NGAsubGMM.getRangeRowT(parameters_zmod, period_used)  # silviamazzoni: I added this
    coeffs = NGAsubGMM.getSubArrayRange(pars_period, 2, 15)
    k1k2 = interp_k1k2(period_used)
    dmb = 0

    delta_ln_z = 0
    coeffs_z = [-999, 0, 0]
    if LeftNumber(region, 1) == 1:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [17, 24, 31])
        coeffs_attn = makeArray(pars_period, [38, 45, 52, 59, 66, 73])
    elif LeftNumber(region, 1) == 2:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [18, 25, 32])
        coeffs_attn = makeArray(pars_period, [39, 46, 53, 60, 67, 74])
        if Z2pt5 > 0:
            delta_ln_z = math.log(Z2pt5) - calc_z_from_Vs30(Vs30, pars_z_casc)
        else:
            delta_ln_z = 0
        # end
        if LeftNumber(PNWbasinStrux, 1) == 1:
            coeff_seattle = NGAsubGMM.getRangeValueT(parameters_zmod, period_used, "mean_residual_Seattle_basin")
            coeffs_z = [-999, coeff_seattle, 0]
        elif LeftNumber(PNWbasinStrux, 1) == 2:
            coeffs_z = makeArray(pars_period_zmod, [2, 3])
        # end
    elif LeftNumber(region, 1) == 3:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [19, 26, 33])
        coeffs_attn = makeArray(pars_period, [40, 47, 54, 61, 68, 75])
    elif LeftNumber(region, 1) == 4:
        dmb = interp_dmb(period_used)
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [20, 27, 34])
        coeffs_attn = makeArray(pars_period, [41, 48, 55, 62, 69, 76])
        if Z2pt5 > 0:
            delta_ln_z = math.log(Z2pt5) - calc_z_from_Vs30(Vs30, pars_z_ja)
        else:
            delta_ln_z = 0
        # end
        coeffs_z = makeArray(pars_period_zmod, [5, 6])
    elif LeftNumber(region, 1) == 5:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [21, 28, 35])
        coeffs_attn = makeArray(pars_period, [42, 49, 56, 63, 70, 77])
        if Z1pt0 > 0:
            delta_ln_z = math.log(Z1pt0) - calc_z_from_Vs30(Vs30, pars_z_nz)
        else:
            delta_ln_z = 0
        # end
        coeffs_z = makeArray(pars_period_zmod, [7, 8])
    elif LeftNumber(region, 1) == 6:
        dmb = interp_dmb(period_used)
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [22, 29, 36])
        coeffs_attn = makeArray(pars_period, [43, 50, 57, 64, 71, 78])
    elif LeftNumber(region, 1) == 7:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [23, 30, 37])
        coeffs_attn = makeArray(pars_period, [44, 51, 58, 65, 72, 79])
        if Z1pt0 > 0:
            delta_ln_z = math.log(Z1pt0) - calc_z_from_Vs30(Vs30, pars_z_tw)
        else:
            delta_ln_z = 0
        # end
        coeffs_z = makeArray(pars_period_zmod, [9, 10])
    else:
        coeffs_attn = makeArray(pars_period, [11, 11, 11, 11, 10, 11])
    # end

    delta_bz = makeArray(pars_period, [80, 81])
    coeffs_nft = makeArray(pars_period, [82, 83])

    thisFs = (LeftNumber(EventType, 1))
    mbreak = (1 - thisFs) * (Mb + dmb) + thisFs * Mb
    zbreak = (1 - thisFs) * (30 + delta_bz[1]) + thisFs * (80 + delta_bz[2])

    Med = NGAsubGMM.KBCG20_med(M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, delta_ln_z, coeffs, coeffs_attn,
                     coeffs_z, mbreak, zbreak, k1k2[1], k1k2[2], coeffs_nft[1], coeffs_nft[2], pgarock, region)
    med_pga = NGAsubGMM.KBCG20_med(M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, delta_ln_z, coeffs_pga,
                         coeffs_attn_pga, coeffs_z_pga2, mbreak_pga, zbreak_pga, k1k2_pga[1], k1k2_pga[2],
                         coeffs_nft_pga[1], coeffs_nft_pga[2], pgarock, region)

    if Med < med_pga and period <= 0.1:
        Med = med_pga
    # end
    return math.exp(Med)


# end


def getRangeValue(thisRange, Xvalue, xHeader, yHeader):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    # not sure how to make it work with xHeader as a variable
    getRangeRowValue = thisRange.loc[thisRange[xHeader] == Xvalue]
    getRangeValueValue = getRangeRowValue[yHeader]
    return getRangeValueValue.squeeze()


# end

def getRangeValueRegion(thisRange, Xvalue,  yHeader):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    getRangeRowTValue = thisRange.loc[thisRange['Region'] == Xvalue]
    getRangeValueTValue = getRangeRowTValue[yHeader]
    return getRangeValueTValue.squeeze()
#end

def getRangeValueT(thisRange, Xvalue, yHeader):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    getRangeRowTValue = thisRange.loc[thisRange['T'] == Xvalue]
    getRangeValueTValue = getRangeRowTValue[yHeader]
    return getRangeValueTValue.squeeze()


# end

def getRangeRowT(thisRange, Xvalue):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    import numpy as np
    getRangeRowTValue = thisRange.loc[thisRange['T'] == Xvalue]
    this = getRangeRowTValue.values
    this = np.insert(this, 0, -999)
    out = this.flatten()
    return out


# end


def getRangeRowByIndex(thisRange, thisRowIndex):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    import numpy as np
    getRangeRowTValue = thisRange.loc[thisRowIndex - 1]
    this = getRangeRowTValue.values
    this = np.insert(this, 0, -999)
    out = this.flatten()
    return out


# end

def getSubArrayRange(inArray, startIndex, endIndex):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    temP = [-999]  # insert something at the zero start index spot
    for thisIndex in range(startIndex, endIndex + 1):
        # should offset
        temP.append(inArray[thisIndex])
    # end
    getSubArrayRangeValue = temP
    return getSubArrayRangeValue


# end


def LeftString(instring, ncars):
    LeftStringValue = instring[0:ncars]
    return LeftStringValue


# end
def LeftNumber(instring, ncars):
    instring = str(instring)
    LeftNumberValue = int(instring[0:ncars])
    return LeftNumberValue


# end


def makeArray(oldArray, oldArrayIndices):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    nrow = len(oldArrayIndices)
    nrowOldArray = len(oldArrayIndices)
    newArray = [-999]  # insert spacer for zero start indexing
    nrowMax = nrow
    for irow in range(len(oldArrayIndices)):  # zero-start array
        oldIndex = oldArrayIndices[irow]
        newArray.append(oldArray[oldIndex])
    # end
    makeArrayValue = newArray
    return makeArrayValue


# end

def updateArray(newArray, newArrayIndices, oldArray, oldArrayIndices):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    NN = len(oldArrayIndices)
    for irow in range(0, NN - 1 + 1):  # zero-start index
        oldIndex = oldArrayIndices[irow]
        newIndex = newArrayIndices[irow]

        newArray[newIndex] = oldArray[oldIndex]  # zero-start index not here as I have added spacers to the arrays
    # end
    updateArrayValue = newArray
    return updateArrayValue


# end


def interpolateFunction(Xpoint, Xlist, XinterpType, extrapolateType, XinterpMin=-1e16, XinterpMax=+1e16):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    import math

    interpolateFunctionValue = -999
    irow = 0
    start0 = -1
    endrow0 = -1
    NN = len(Xlist)
    for irow in range(0, NN):
        this = Xlist[irow]
        if Xpoint == this:
            interpolateFunctionValue = [-999, irow, -1, 0]  # I have added a value at the zero-index location
            return interpolateFunctionValue
        # end
        if this >= XinterpMin and this <= XinterpMax:
            if start0 < 0:
                start0 = irow
            # end
            end0 = irow
    # end
    # end
    iend = irow - 1

    istart = start0
    Xstart = Xlist[start0]
    Xend = Xlist[end0]

    if (Xend - Xpoint) * (Xstart - Xpoint) <= 0:
        for i in range(istart, iend - 1 + 1):
            thisx = Xlist[i, 1]
            nextX = Xlist[i + 1, 1]
            if (Xpoint - thisx) * (Xpoint - nextX) <= 0:
                l1 = i
                l2 = i + 1
                break
        # end
    # end
    else:
        if (Xend - Xstart) * (Xend - Xpoint) > 0:
            l1 = istart
            if LeftString(extrapolateType.lower(), len("extra")).lower() == "extra".lower():
                l2 = istart + 1
            else:
                l2 = istart
        # end
        else:
            l1 = iend
            if LeftString(extrapolateType.lower(), len("extra")) == "extra".lower():
                l2 = iend - 1
            else:
                interpolateFunctionValue = [-999, end0, -1, 0]
                return interpolateFunctionValue
        # end
    # end
    # end

    # Interp:
    x0 = Xlist[l1]
    x1 = Xlist[l2]

    hereX = Xpoint
    if LeftString(XinterpType, len("log")).lower() == "log".lower():
        if x0 <= 0:
            x0 = 0.000000001
        # end
        if x1 <= 0:
            x1 = 0.000000002
        # end
        if hereX <= 0:
            hereX = 0.000000001
        # end
        x0 = math.log(x0)
        x1 = math.log(x1)
        hereX = math.log(hereX)
    # end

    interpolateFunctionValue = [-999, l1, l2, (hereX - x0) / (x1 - x0)]
    return interpolateFunctionValue


# end


def KBCG20_posteriorAtTlist(period, M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, Z1pt0, Z2pt5, Mb, region, num_samples=100, PNWbasinStrux=0):

    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    # need to add some checks for input (period, region)
    import NGAsubGMM
    import math
    KBCG20_posteriorAtTlistValue = -999
    # coefficients to calculate zref from vs30
    pars_z_ja = [-999, 7.6893685375, 2.30258509299405, 6.3091864, 0.7528670225, 1.2952369625]
    pars_z_casc = [-999, 8.29404964010203, 2.30258509299405, 6.39692965521615, 0.27081459, 1.7381352625]
    pars_z_nz = [-999, 6.859789675, 2.30258509299405, 5.745692775, 0.91563524375, 1.03531412375]
    pars_z_tw = [-999, 6.30560665, 2.30258509299405, 6.1104992125, 0.43671102, 0.7229702975]

    Parameters = NGAsubGMM.coeff_read_csv('NGAsubGMM_KBCG20_coefficients.csv')
    parameters_zmod = NGAsubGMM.coeff_read_csv("NGAsubGMM_KBCG20_params_Z_ALL_allregca_attn3_corrreg_cs_dmb.csv")

    # calculate rock PGA
    thisPeriod = 0.
    vsrock = 1100

    pars_period = NGAsubGMM.getRangeRowT(Parameters, thisPeriod)

    pars_period_zmod = NGAsubGMM.getRangeRowT(parameters_zmod, thisPeriod)  # silviamazzoni, I added this
    coeffs = NGAsubGMM.getSubArrayRange(pars_period, 2, 15)
    k1k2 = interp_k1k2(thisPeriod)
    dmb = 0

    delta_ln_z = 0
    coeffs_z = [-999, 0, 0]
    if LeftNumber(region, 1) == 1:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [17, 24, 31])
        coeffs_attn = makeArray(pars_period, [38, 45, 52, 59, 66, 73])
    elif LeftNumber(region, 1) == 2:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [18, 25, 32])
        coeffs_attn = makeArray(pars_period, [39, 46, 53, 60, 67, 74])
    elif LeftNumber(region, 1) == 3:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [19, 26, 33])
        coeffs_attn = makeArray(pars_period, [40, 47, 54, 61, 68, 75])
    elif LeftNumber(region, 1) == 4:
        dmb = interp_dmb(thisPeriod)
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [20, 27, 34])
        coeffs_attn = makeArray(pars_period, [41, 48, 55, 62, 69, 76])
    elif LeftNumber(region, 1) == 5:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [21, 28, 35])
        coeffs_attn = makeArray(pars_period, [42, 49, 56, 63, 70, 77])
    elif LeftNumber(region, 1) == 6:
        dmb = interp_dmb(thisPeriod)
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [22, 29, 36])
        coeffs_attn = makeArray(pars_period, [43, 50, 57, 64, 71, 78])
    elif LeftNumber(region, 1) == 7:
        coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [23, 30, 37])
        coeffs_attn = makeArray(pars_period, [44, 51, 58, 65, 72, 79])
    else:
        coeffs_attn = makeArray(pars_period, [11, 11, 11, 11, 10, 11])
    # end

    delta_bz = makeArray(pars_period, [80, 81])
    coeffs_nft = makeArray(pars_period, [82, 83])
    thisFs = (LeftNumber(EventType, 1))
    mbreak = (1 - thisFs) * (Mb + dmb) + thisFs * Mb

    zbreak = (1 - thisFs) * (30 + delta_bz[1]) + thisFs * (80 + delta_bz[2])

    pgarock = math.exp(
        KBCG20_med(M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, vsrock, delta_ln_z, coeffs, coeffs_attn,
                   coeffs_z, mbreak, zbreak, k1k2[1], k1k2[2], coeffs_nft[1], coeffs_nft[2], 0, region))

    # calculate PSA
    thisPeriod = period
    Tnumeric = [-1, 0, 0.01, 0.02, 0.03, 0.05, 0.075, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4, 5,
                7.5, 10]
    Tstring = ["T-1.00", "T00.00", "T00.01", "T00.02", "T00.03", "T00.05", "T00.07", "T00.10", "T00.15", "T00.20",
               "T00.25", "T00.30", "T00.40", "T00.50", "T00.75", "T01.00", "T01.50", "T02.00", "T03.00", "T04.00",
               "T05.00", "T07.50", "T10.00"]

    thisIndex = Tnumeric.index(thisPeriod)
    thisTstring = Tstring[thisIndex]

    parameters_posterior = NGAsubGMM.coeff_read_csv('posterior_coefficients_KBCG20_' + thisTstring + '.csv')

    pars_period_zmod = NGAsubGMM.getRangeRowT(parameters_zmod, thisPeriod)  # silviamazzoni, I added this

    coeffs = NGAsubGMM.getSubArrayRange(pars_period, 2, 15)
    k1k2 = interp_k1k2(thisPeriod)
    dmb = 0
    med_predictions = []
    for k in range(1, num_samples + 1):
        pars_period = NGAsubGMM.getRangeRowByIndex(parameters_posterior, k)

        coeffs = NGAsubGMM.getSubArrayRange(pars_period, 2, 15)

        delta_ln_z = 0
        coeffs_z = [-999, 0, 0]
        if LeftNumber(region, 1) == 1:
            coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [17, 24, 31])
            coeffs_attn = makeArray(pars_period, [38, 45, 52, 59, 66, 73])
        elif LeftNumber(region, 1) == 2:
            coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [18, 25, 32])
            coeffs_attn = makeArray(pars_period, [39, 46, 53, 60, 67, 74])
            if Z2pt5 > 0:
                delta_ln_z = math.log(Z2pt5) - calc_z_from_Vs30(Vs30, pars_z_casc)
            else:
                delta_ln_z = 0
            # end
            if LeftNumber(PNWbasinStrux, 1) == 1:
                coeff_seattle = NGAsubGMM.getRangeValueT(parameters_zmod, thisPeriod, "mean_residual_Seattle_basin")
                coeffs_z = [coeff_seattle, 0]
            elif LeftNumber(PNWbasinStrux, 1) == 2:
                coeffs_z = makeArray(pars_period_zmod, [2, 3])
            # end
        elif LeftNumber(region, 1) == 3:
            coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [19, 26, 33])
            coeffs_attn = makeArray(pars_period, [40, 47, 54, 61, 68, 75])
        elif LeftNumber(region, 1) == 4:
            dmb = interp_dmb(thisPeriod)
            coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [20, 27, 34])
            coeffs_attn = makeArray(pars_period, [41, 48, 55, 62, 69, 76])
            if Z2pt5 > 0:
                delta_ln_z = math.log(Z2pt5) - calc_z_from_Vs30(Vs30, pars_z_ja)
            else:
                delta_ln_z = 0
            # end
            coeffs_z = makeArray(pars_period_zmod, [5, 6])
        elif LeftNumber(region, 1) == 5:
            coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [21, 28, 35])
            coeffs_attn = makeArray(pars_period, [42, 49, 56, 63, 70, 77])
            if Z1pt0 > 0:
                delta_ln_z = math.log(Z1pt0) - calc_z_from_Vs30(Vs30, pars_z_nz)
            else:
                delta_ln_z = 0
            # end
            coeffs_z = makeArray(pars_period_zmod, [7, 8])
        elif LeftNumber(region, 1) == 6:
            dmb = interp_dmb(thisPeriod)
            coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [22, 29, 36])
            coeffs_attn = makeArray(pars_period, [43, 50, 57, 64, 71, 78])
        elif LeftNumber(region, 1) == 7:
            coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [23, 30, 37])
            coeffs_attn = makeArray(pars_period, [44, 51, 58, 65, 72, 79])
            if Z1pt0 >0:
                delta_ln_z = math.log(Z1pt0) - calc_z_from_Vs30(Vs30, pars_z_tw)
            else:
                delta_ln_z = 0
            # end
            coeffs_z = makeArray(pars_period_zmod, [9, 10])
        else:  # reg=0
            coeffs = updateArray(coeffs, [1, 2, 11], pars_period, [172, 173, 174])
            coeffs_attn = makeArray(pars_period, [175, 176, 177, 178, 179, 180])
        # end

        delta_bz = makeArray(pars_period, [80, 81])
        coeffs_nft = makeArray(pars_period, [82, 83])
        thisFs = (LeftNumber(EventType, 1))

        mbreak = (1 - thisFs) * (Mb + dmb) + thisFs * Mb

        zbreak = (1 - thisFs) * (30 + delta_bz[1]) + thisFs * (80 + delta_bz[2])

        Med = NGAsubGMM.KBCG20_med(M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, delta_ln_z, coeffs, coeffs_attn,
                         coeffs_z, mbreak, zbreak, k1k2[1], k1k2[2], coeffs_nft[1], coeffs_nft[2], pgarock, region)
        med_predictions.append(Med)
    # end

    KBCG20_posteriorAtTlist_All = [-999]
    KBCG20_posteriorAtTlist_All.append(NGAsubGMM.getMeanOfArray(med_predictions))
    KBCG20_posteriorAtTlist_All.append(NGAsubGMM.getMedianOfArray(med_predictions))
    KBCG20_posteriorAtTlist_All.append(NGAsubGMM.getStdDev(med_predictions))
    for i in range(1, len(med_predictions)):
        KBCG20_posteriorAtTlist_All.append(med_predictions[i])
    # end
    KBCG20_posteriorAtTlistValue = KBCG20_posteriorAtTlist_All
    return KBCG20_posteriorAtTlistValue


# end


def getMeanOfArray(inArray):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    getMeanOfArrayValue = 0
    iCount = 0

    for ii in range(len(inArray)):
        getMeanOfArrayValue = getMeanOfArrayValue + inArray[ii]
        iCount = iCount + 1
    # end
    getMeanOfArrayValue = getMeanOfArrayValue / iCount
    return getMeanOfArrayValue


# end

def getMedianOfArray(inArray):

    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    import NGAsubGMM
    inArray = NGAsubGMM.BubbleSrt(inArray, "True")
    num_samples = len(inArray)
    if round(num_samples / 2, 0) == num_samples / 2:
        getMedianOfArrayValue = 0.5 * (inArray[int(num_samples / 2)] + inArray[int(num_samples / 2 + 1)])
    else:
        getMedianOfArrayValue = inArray[int((num_samples + 1) / 2)]
    # end
    return getMedianOfArrayValue


# end

# https://www.mrexcel.com/board/threads/standard-deviation-of-an-array.206375/
# ************************************************************************
# *               Standard Deviation  of a 1D array                        *
# ************************************************************************
def getStdDev(Arr):

    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    import NGAsubGMM
    import math
    k1 = 1
    k2 = len(Arr)

    n = 0
    avg = NGAsubGMM.getMeanOfArray(Arr)
    SumSq = 0
    for i in range(k2):
        n = n + 1
        SumSq = SumSq + (Arr[i] - avg) ** 2
    # end

    getStdDevValue = math.sqrt(SumSq / (n - 1))
    return getStdDevValue


# end


# https://stackoverflow.com/questions/11504418/excel-vba-quickest-way-to-sort-an-array-of-numbers-in-descending-order#
# Omit plngLeft & plngRight they are used internally during recursion

def BubbleSrt(ArrayIn, Ascending):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    if Ascending == "True":
        for i in range(len(ArrayIn)):
            for j in range(i + 1, len(ArrayIn)):
                if ArrayIn[i] > ArrayIn[j]:
                    SrtTemp = ArrayIn[j]
                    ArrayIn[j] = ArrayIn[i]
                    ArrayIn[i] = SrtTemp
                # end
            # end
    # end
    else:
        for i in range(len(ArrayIn)):
            for j in range(i + 1, len(ArrayIn)):
                if ArrayIn[i] < ArrayIn[j]:
                    SrtTemp = ArrayIn[j]
                    ArrayIn[j] = ArrayIn[i]
                    ArrayIn[i] = SrtTemp
                # end
            # end
    # end
    # end

    return ArrayIn


# end

def KBCG20_posterior(period, M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, Z1pt0, Z2pt5, Mb, region,num_samples=100, PNWbasinStrux=0):

    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    import NGAsubGMM
    import math
    thisOut = -999
    XinterpMin = 0
    XinterpMax = 10
    XinterpType = "log"
    YinterpType = "linear"  # KBCG20_posteriorAtTlist values are logs already
    extrapolateType = "extrapolate"

    Parameters = NGAsubGMM.coeff_read_csv('NGAsubGMM_KBCG20_coefficients.csv')
    TvalueList = Parameters['T']
    InterpArray = interpolateFunction(period, TvalueList, XinterpType, extrapolateType, XinterpMin, XinterpMax)

    period0 = TvalueList[InterpArray[1]]
    KBCG20_posteriorAtTlist0 = NGAsubGMM.KBCG20_posteriorAtTlist(period0, M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType,
                                                       Vs30, Z1pt0, Z2pt5, Mb, region, num_samples, PNWbasinStrux)

    med_predictions = []
    y0 = InterpArray[1]
    if InterpArray[2] <= 0:
        KBCG20_posteriorValue = KBCG20_posteriorAtTlist0
        return KBCG20_posteriorValue
    else:
        period1 = TvalueList[InterpArray[2]]
        KBCG20_posteriorAtTlist1 = NGAsubGMM.KBCG20_posteriorAtTlist(period1, M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType,
                                                           Vs30, Z1pt0, Z2pt5, Mb, region, num_samples, PNWbasinStrux)
        for iCase in range(1, len(KBCG20_posteriorAtTlist0)):
            y0 = KBCG20_posteriorAtTlist0[iCase]
            y1 = KBCG20_posteriorAtTlist1[iCase]

            if LeftString(YinterpType, len("log")).lower() == "log".lower():
                if y0 <= 0:
                    y0 = 0.000000001
                # end
                if y1 <= 0:
                    y1 = 0.000000001
                # end
                y0 = math.log(y0)
                y1 = math.log(y1)
            # end
            y0 + (y1 - y0) * InterpArray[3]
            med_predictions[iCase] = y0 + (y1 - y0) * InterpArray[3]
            if LeftString(YinterpType, len("log")).lower() == "log".lower():
                med_predictions[iCase] = math.exp(med_predictions[iCase])
        # end
    # end

    # end

    return med_predictions


# end


# def to calculate aliatory sigma


def KBCG20_sigmaAleatory(period):

    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    import NGAsubGMM
    import math
    thisOut = -999
    XinterpMin = 0
    XinterpMax = 10
    XinterpType = "log"
    YinterpType = "linear"
    extrapolateType = "extrapolate"

    Parameters = NGAsubGMM.coeff_read_csv('NGAsubGMM_KBCG20_coefficients.csv')
    TvalueList = Parameters['T']
    InterpArray = interpolateFunction(period, TvalueList, XinterpType, extrapolateType, XinterpMin, XinterpMax)

    period0 = TvalueList[InterpArray[1]]
    y0 = NGAsubGMM.KBCG20_sigmaAleatoryAtTlist(period0)

    if InterpArray[2] <= 0:
        thisOut = y0
    else:
        period1 = TvalueList[InterpArray[2], 1]
        y1 = NGAsubGMM.KBCG20_sigmaAleatoryAtTlist(period1)
        if LeftString(YinterpType, len("log")).lower() == "log".lower():
            if y0 <= 0:
                y0 = 0.000000001
            # end
            if y1 <= 0:
                y1 = 0.000000001
            # end
            y0 = math.log(y0)
            y1 = math.log(y1)
        # end
        thisOut = y0 + (y1 - y0) * InterpArray[3]
        if LeftString(YinterpType, len("log")).lower() == "log".lower():
            thisOut = math.exp(thisOut)
    # end

    # end

    return thisOut


# end


def KBCG20_sigmaAleatoryAtTlist(period):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    Parameters = NGAsubGMM.coeff_read_csv('NGAsubGMM_KBCG20_coefficients.csv')
    # calculate PSA
    period_used = period
    pars_period = NGAsubGMM.getRangeRowT(Parameters, period_used)

    Phi = pars_period[84]
    Tau = pars_period[85]
    KBCG20_sigmaAleatoryAtTlistValue = math.sqrt(Phi * Phi + Tau * Tau)
    return KBCG20_sigmaAleatoryAtTlistValue


# end

def KBCG20_sigmaPhi(period):

    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    import NGAsubGMM
    Parameters = NGAsubGMM.coeff_read_csv('NGAsubGMM_KBCG20_coefficients.csv')

    # calculate PSA
    period_used = period
    pars_period = NGAsubGMM.getRangeRowT(Parameters, period_used)

    Phi = pars_period[84]
    KBCG20_sigmaPhiValue = Phi
    return KBCG20_sigmaPhiValue


# end

def KBCG20_sigmaTau(period):

    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    import NGAsubGMM
    Parameters = NGAsubGMM.coeff_read_csv('NGAsubGMM_KBCG20_coefficients.csv')

    # calculate PSA
    period_used = NGAsubGMM.getTFvalue(period)
    pars_period = NGAsubGMM.getRangeRowT(Parameters, period_used)
    Tau = pars_period[85]
    KBCG20_sigmaTauValue = Tau
    return KBCG20_sigmaTauValue


# end


def KBCG20_SigmaEpistemic(period, M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, Z1pt0, Z2pt5, Mb, region,num_samples=100, PNWbasinStrux=0):
    import NGAsubGMM
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    if num_samples == 0:
        KBCG20_SigmaEpistemicValue = 0
    elif num_samples < 50:
        KBCG20_SigmaEpistemicValue = "not enough samples, please select a value =0 or between 50 and 800"
    elif num_samples <= 800:
        thisKBCG20_posterior = NGAsubGMM.KBCG20_posterior(period, M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30,
                                                Z1pt0, Z2pt5, Mb, region, num_samples=100, PNWbasinStrux=0)
        KBCG20_SigmaEpistemicValue = thisKBCG20_posterior[3]
    else:
        KBCG20_SigmaEpistemicValue = "Please enter a value =0 or between 50 and 800"
    # end
    return KBCG20_SigmaEpistemicValue


# end

def KBCG20_SigmaTotal(period, M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, Z1pt0, Z2pt5, Mb, region,num_samples=100, PNWbasinStrux=0):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    SigmaAleatory = NGAsubGMM.KBCG20_sigmaAleatory(period)
    if num_samples == 0:
        SigmaEpistemic = 0.
    else:
        SigmaEpistemic = NGAsubGMM.KBCG20_SigmaEpistemic(period, M, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, Z1pt0,
                                               Z2pt5, Mb, region, num_samples=100, PNWbasinStrux=0)
    # end
    SigmaTotalValue = math.sqrt(SigmaAleatory * SigmaAleatory + SigmaEpistemic * SigmaEpistemic)
    return SigmaTotalValue


# end


###################################################################

# updated 6/1/2020 by Silvia Mazzoni

# GMM_at_760_slab_v4.R

##Grace Parker
##Modified February 26 to expand comments
##Modified March 25, 2020 to call coefficients from master table

## Input Parameters --------------------------------------------------------

##Event type: 0 == interface, 1 == slab

##region corresponds to options in the DatabaseRegion column of the flatfile, plus global. Must be a string. If no matches, default will be global model:
## "Global", "Alaska", "Cascadia", "CAM", "Japan", "SA" or "Taiwan"

##Saturation Region corresponds to regions defined by R. Archuleta and C. Ji:
## "Global", "Aleutian","Alaska","Cascadia","Central_America_S", "Central_America_N", "Japan_Pac","Japan_Phi","South_America_N","South_America_S", "Taiwan_W","Taiwan_E"

## Rrup is number in kilometers

##Hypocentral depth in km. To use Ztor value to estimate hypocentral depth, see Ch. 4.3.3 of Parker et al. PEER report

## period can be: (-1,0,0.01,0.02,0.025,0.03,0.04,0.05,0.075,0.1,0.15,0.2,0.25,0.3,0.4,0.5,0.75,1,1.5,2,2.5,3,4,5,7.5,10)
## where -1 == PGV and 0 == PGA

## Other pertinent information ---------------------------------------------
##Coefficient files must be in the active working directory
## This function has no site term. Can only estimate ground motion at the reference condition VS30 = 760m/s
## The output is the desired median model prediction in LN units
## Take the exponential to get PGA, PSA in g or the PGV in cm/s

##Function to compute GMM predictions at 760m/s for slab and interface

def PSHAB20_GMM_at_760_Slab(EventType, UserRegion, saturation_region_user, Rrup, M, hypocentral_depth, period):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    PSHAB20_GMM_at_760_SlabValue = -999
    if (LeftNumber(EventType, 1)) == 0:
        return PSHAB20_GMM_at_760_SlabValue  # ("This def is only for slab")
    # end
    region = NGAsubGMM.getPSHABregion(UserRegion)
    saturation_region = NGAsubGMM.getPSHABSubductionRegion(saturation_region_user)

    ##import Coefficients

    ##  Import Master Coefficient Table -----------------------------------------
    #  CoefficientsTable = readtable('PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader.csv','PreserveVariableNames',True)
    CoefficientsTable = NGAsubGMM.coeff_read_csv('PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader.csv')

    ##Define mb based on Archuleta and Ji (2019)
    Mb = NGAsubGMM.getMbDefault("PSHAB20", EventType, UserRegion, saturation_region)

    ##  Constant ----------------------------------------------------------------
    #  #Isolate constant
    if region == "Global":
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_c0")
    elif region == "Alaska" or region == "SA":
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, saturation_region + "_c0")
    else:
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, region + "_c0")
    # end
    # silviamazzoni, I added this:
    if checkEmptyNA999(c0):
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_c0")
    # end
    #  # Path Term ---------------------------------------------------------------

    #  #near-source saturation
    if M <= Mb:
        littleM = (Log10(35) - Log10(3.12)) / (Mb - 4)
        h = 10 ** (littleM * (M - Mb) + Log10(35))
    else:
        h = 35
    # end
    Rref = math.sqrt(1 + h ** 2)
    r = math.sqrt(Rrup ** 2 + h ** 2)
    LogR = math.log(r)
    R_Rref = math.log(r / Rref)

    #  #Need  to isolate regional anelastic coefficient, a0
    if region == "Global":
        a0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_a0")
    else:
        a0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, region + "_a0")
    # end
    if checkEmptyNA999(a0):
        a0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_a0")
    # end

    c1 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c1")
    b4 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "b4")
    Fp = (c1 * LogR + (b4 * M) * R_Rref + a0 * r)

    #  # Magnitude Scaling -------------------------------------------------------
    c4 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c4")
    c5 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c5")
    c6 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c6")
    Fm = c4 * func1(M, Mb) + c6 * func2(M, Mb) + c5 * func3(M, Mb)

    #  # Source Depth Scaling ----------------------------------------------------
    Db = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "db_km")
    d = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "d")
    littleM = NGAsubGMM.getRangeValueT(CoefficientsTable, period, 'm')
    if (hypocentral_depth >= Db):
        Fd = d
    elif (hypocentral_depth <= 20):
        Fd = littleM * (20 - Db) + d
    else:
        Fd = littleM * (hypocentral_depth - Db) + d
    # end

    mu = c0 + Fp + Fm + Fd
    return mu


# end


def func1(M, Mb):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    if M <= Mb:
        func1value = M - Mb
    else:
        func1value = 0
    # end
    return func1value


# end
def func2(M, Mb):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    if M > Mb:
        func2value = M - Mb
    else:
        func2value = 0
    # end
    return func2value


# end
def func3(M, Mb):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    if M <= Mb:
        func3value = (M - Mb) ** 2
    else:
        func3value = 0
    # end
    return func3value


# end


def getPSHABregion(UserRegion):
    # ' CODE DEVELOPED/IMPLEMENTED BY
    # '          Silvia Mazzoni, 2020
    # '           smazzoni@ucla.edu

    RegionIDList = ["0_Global", "1_Alaska", "2_Cascadia", "3_CentralAmerica&Mexico", "4_Japan", "5_NewZealand",
                    "6_SouthAmerica", "7_Taiwan"]
    PSHAB_RegionIDList = ["Global", "Alaska", "Cascadia", "CAM", "Japan", "Global", "SA", "Taiwan"]
    thisIndex = RegionIDList.index(UserRegion)
    getPSHABregionValue = PSHAB_RegionIDList[thisIndex]

    return getPSHABregionValue


# end

def getPSHABSubductionRegion(UserSubductionRegion):
    # ' CODE DEVELOPED/IMPLEMENTED BY
    # '          Silvia Mazzoni, 2020
    # '           smazzoni@ucla.edu

    SubdRegionIDList = ["Alaska", "Aleutian", "Cascadia", "CAM_N", "CAM_S", "Global", "Japan_Pac", "Japan_Phi", "NZ_N",
                        "NZ_S", "SA_N", "SA_S", "Taiwan_E", "Taiwan_W", "Alaska", "Aleutian", "Cascadia",
                        "Central_America_N", "Central_America_S", "Global", "Japan_Pac", "Japan_Phi", "New_Zealand_N",
                        "New_Zealand_S", "South_America_N", "South_America_S", "Taiwan_E", "Taiwan_W"]
    PSHAB_SubdRegionIDList = ["Alaska", "Aleutian", "Cascadia", "CAM_N", "CAM_S", "Global", "Japan_Pac", "Japan_Phi",
                              "New_Zealand_N", "New_Zealand_S", "SA_N", "SA_S", "Taiwan_E", "Taiwan_W", "Alaska",
                              "Aleutian", "Cascadia", "CAM_N", "CAM_S", "Global", "Japan_Pac", "Japan_Phi",
                              "New_Zealand_N", "New_Zealand_S", "SA_N", "SA_S", "Taiwan_E", "Taiwan_W"]
    thisIndex = SubdRegionIDList.index(UserSubductionRegion)
    getPSHABsubRegionValue = PSHAB_SubdRegionIDList[thisIndex]

    return getPSHABsubRegionValue


# end


def getMbDefault(NGAsubModelLabel, EventType, UserRegion, saturation_region_user):
    import NGAsubGMM
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    # Silvia Mazzoni: I inserted the global model and replaced the NA values with those of the global model
    if (LeftNumber(EventType, 1)) == 1 or (LeftNumber(EventType, 1)) == 5:
        if NGAsubModelLabel == "KBCG20":
            # MbKBCG20Intraslab
            saturation_region_here = saturation_region_user
            saturation_regions_SBZ = ["Global", "Aleutian", "Alaska", "Cascadia", "Central_America_N",
                                      "Central_America_S", "Japan_Pac", "Japan_Phi", "New_Zealand_N", "New_Zealand_S",
                                      "South_America_N", "South_America_S", "Taiwan_W", "Taiwan_E"]
            thisMbList = [7.6, 8, 7.2, 7.2, 7.4, 7.6, 7.6, 7.6, 7.6, 7.6, 7.3, 7.2, 7.7, 7.7]
            User_regions_SBZ = ["0_Global", "1_Alaska", "1_Alaska", "2_Cascadia", "3_CentralAmerica&Mexico",
                                "3_CentralAmerica&Mexico", "4_Japan", "4_Japan", "5_NewZealand", "5_NewZealand",
                                "6_SouthAmerica", "6_SouthAmerica", "7_Taiwan", "7_Taiwan"]
        else:
            # MbPSHAB20Intraslab
            saturation_region_here = NGAsubGMM.getPSHABSubductionRegion(saturation_region_user)
            Mb_Global_Slab = 7.6
            saturation_regions_SBZ = ["Global", "Aleutian", "Alaska", "-999", "Cascadia", "CAM_S", "CAM_N", "Japan_Pac",
                                      "Japan_Phi", "New_Zealand_N", "New_Zealand_S", "SA_N", "SA_S", "Taiwan_W",
                                      "Taiwan_E"]
            thisMbList = [Mb_Global_Slab, 7.98, 7.2, Mb_Global_Slab, 7.2, 7.6, 7.4, 7.65, 7.55, Mb_Global_Slab,
                          Mb_Global_Slab, 7.3, 7.25, 7.7, 7.7]
            User_regions_SBZ = ["0_Global", "1_Alaska", "1_Alaska", "0_Global", "2_Cascadia", "3_CentralAmerica&Mexico",
                                "3_CentralAmerica&Mexico", "4_Japan", "4_Japan", "5_NewZealand", "5_NewZealand",
                                "6_SouthAmerica", "6_SouthAmerica", "7_Taiwan", "7_Taiwan"]
    # end

    else:
        if NGAsubModelLabel == "KBCG20":
            # MbKBCG20Interface
            saturation_region_here = saturation_region_user
            saturation_regions_SBZ = ["Global", "Aleutian", "Alaska", "Cascadia", "Central_America_N",
                                      "Central_America_S", "Japan_Pac", "Japan_Phi", "New_Zealand_N", "New_Zealand_S",
                                      "South_America_N", "South_America_S", "Taiwan_W", "Taiwan_E"]
            thisMbList = [7.9, 8, 8.6, 8, 7.4, 7.5, 8.5, 7.7, 8.3, 8, 8.5, 8.6, 7.1, 7.1]
            User_regions_SBZ = ["0_Global", "1_Alaska", "1_Alaska", "2_Cascadia", "3_CentralAmerica&Mexico",
                                "3_CentralAmerica&Mexico", "4_Japan", "4_Japan", "5_NewZealand", "5_NewZealand",
                                "6_SouthAmerica", "6_SouthAmerica", "7_Taiwan", "7_Taiwan"]
        else:
            # MbPSHAB20Interface
            saturation_region_here = NGAsubGMM.getPSHABSubductionRegion(saturation_region_user)
            Mb_Global_IF = 7.9
            saturation_regions_SBZ = ["Global", "Aleutian", "Alaska", "-999", "Cascadia", "CAM_S", "CAM_N", "Japan_Pac",
                                      "Japan_Phi", "New_Zealand_N", "New_Zealand_S", "SA_N", "SA_S", "Taiwan_W",
                                      "Taiwan_E"]
            thisMbList = [Mb_Global_IF, 8, 8.6, Mb_Global_IF, 7.7, 7.4, 7.4, 8.5, 7.7, Mb_Global_IF, Mb_Global_IF, 8.5,
                          8.6, 7.1, 7.1]
            User_regions_SBZ = ["0_Global", "1_Alaska", "1_Alaska", "0_Global", "2_Cascadia", "3_CentralAmerica&Mexico",
                                "3_CentralAmerica&Mexico", "4_Japan", "4_Japan", "5_NewZealand", "5_NewZealand",
                                "6_SouthAmerica", "6_SouthAmerica", "7_Taiwan", "7_Taiwan"]
    # end

    # end

    thisSaturationRegionDbRegion = NGAsubGMM.getArrayMap(saturation_region_here, saturation_regions_SBZ, User_regions_SBZ)
    if str(thisSaturationRegionDbRegion).lower() != UserRegion.lower():
        saturation_region = "Global"
    # end

    Mb = NGAsubGMM.getArrayMap(saturation_region_here, saturation_regions_SBZ, thisMbList)

    if checkEmptyNA999(Mb):
        Mb = NGAsubGMM.getArrayMap("Global", saturation_regions_SBZ, thisMbList)
    # end

    getMbDefaultValue = Mb

    return getMbDefaultValue


# end


def getArrayMap(Xvalue, Xarray, Yarray):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    getArrayMapValue = -999
    for (thisX, thisY) in zip(Xarray, Yarray):
        if thisX == Xvalue:
            getArrayMapValue = thisY
    # end
    # end
    return getArrayMapValue


# end


def checkEmptyNA999(thisvalue):
    checkEmptyNA999value = False
    if str(thisvalue) == "NA":
        checkEmptyNA999value = True
    elif str(thisvalue) == "":
        checkEmptyNA999value = True
    elif str(thisvalue) == "nan":
        checkEmptyNA999value = True
    # end
    return checkEmptyNA999value


# end


# GMM_at_VS30_slab_v4.R

##Grace Parker
##Modified February 26 to expand comments
##Modified March 25, 2020 to call consolidated coefficient table

## Input Parameters --------------------------------------------------------

##Event type: 0 == interface, 1 == slab

##region corresponds to options in the DatabaseRegion column of the flatfile, plus global. Must be a string. If no matches, default will be global model:
## "Global", "Alaska", "Cascadia", "CAM", "Japan", "SA" or "Taiwan"

##Saturation Region corresponds to regions defined by R. Archuleta and C. Ji:
## "Global", "Aleutian","Alaska","Cascadia","Central_America_S", "Central_America_N", "Japan_Pac","Japan_Phi","South_America_N","South_America_S", "Taiwan_W","Taiwan_E"

## Rrup is number in kilometers

##Hypocentral depth in km. To use Ztor value to estimate hypocentral depth, see Ch. XXX of Parker et al. PEER report

## period can be: (-1,0,0.01,0.02,0.025,0.03,0.04,0.05,0.075,0.1,0.15,0.2,0.25,0.3,0.4,0.5,0.75,1,1.5,2,2.5,3,4,5,7.5,10)
## where -1 == PGV and 0 == PGA

##VS30 in units m/s

##Z2.5 in units m. Only used if DatabaseRegion == "Japan" or "Cascadia". Can also specify "default" to get no basin term

##basin is only used if DatabaseRegion == "Cascadia". Value can be 0, 1, or 2, where 0 == having an estimate of Z2.5 outside mapped basin, 1 == Seattle basin, and 0 == other mapped basin (Tacoma, Everett, Georgia, etc.)

## Other pertinent information ---------------------------------------------
##Coefficient files must be in the active working directory
## "GMM_at_VS30_Slab_v2.R" calls function "GMM_at_760_Slab_v2.R" to compute PGAr in the nonlinear site term. This function must be in the R environment else: an error will occur.
## The output is the desired median model prediction in LN units
## Take the exponential to get PGA, PSA in g or  PGV in cm/s


##Function to compute GMM predictions at various VS30s for slab


def PSHAB20_GMM_at_VS30_Slab(EventType, UserRegion, saturation_region_user, Rrup, M, hypocentral_depth, period, Vs30,Z2pt5, basin):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    PSHAB20_GMM_at_VS30_SlabValue = -999
    if (LeftNumber(EventType, 1)) == 0:
        return PSHAB20_GMM_at_VS30_SlabValue  # ("This def is only for slab")
    # end
    region = NGAsubGMM.getPSHABregion(UserRegion)
    saturation_region = NGAsubGMM.getPSHABSubductionRegion(saturation_region_user)

    basin = LeftNumber(basin, 1)
    ##import coefficients
    #  CoefficientsTable = readtable('PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader.csv','PreserveVariableNames',True)
    CoefficientsTable = NGAsubGMM.coeff_read_csv('PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader.csv')

    # Define mb based on Archuleta and Ji (2019)
    Mb = NGAsubGMM.getMbDefault("PSHAB20", EventType, UserRegion, saturation_region)

    # # Constant ----------------------------------------------------------------
    #  #Isolate constant

    if region == "Global":
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_c0")
    elif region == "Alaska" or region == "SA":
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, saturation_region + "_c0")
    else:
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, region + "_c0")
    # end
    if checkEmptyNA999(c0):
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_c0")
    # end

    ##  Path Term ---------------------------------------------------------------

    #  #near-source saturation
    if M <= Mb:
        littleM = (Log10(35) - Log10(3.12)) / (Mb - 4)
        h = 10 ** (littleM * (M - Mb) + Log10(35))
    else:
        h = 35
    # end

    Rref = math.sqrt(1 + h ** 2)
    r = math.sqrt(Rrup ** 2 + h ** 2)
    LogR = math.log(r)
    R_Rref = math.log(r / Rref)

    #  #Need  to isolate regional anelastic coefficient, a0
    if region == "Global":
        a0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_a0")
    else:
        a0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, region + "_a0")
    # end
    if checkEmptyNA999(a0):
        a0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_a0")
    # end

    c1 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c1")
    b4 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "b4")
    Fp = (c1 * LogR + (b4 * M) * R_Rref + a0 * r)

    ##  Magnitude Scaling -------------------------------------------------------

    c4 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c4")
    c5 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c5")
    c6 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c6")

    Fm = c4 * func1(M, Mb) + c6 * func2(M, Mb) + c5 * func3(M, Mb)

    ##  Source Depth Scaling ----------------------------------------------------
    Db = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "db_km")
    d = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "d")
    littleM = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "m")
    ##compute depth scaling term

    if (hypocentral_depth >= Db):
        Fd = d
    elif (hypocentral_depth <= 20):
        Fd = littleM * (20 - Db) + d
    else:
        Fd = littleM * (hypocentral_depth - Db) + d
    # end

    ##  Linear Site Amplification ----------------------------------------------

    ## Site Coefficients
    V1 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "V1_m_s")
    V2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "V2_m_s")
    Vref = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Vref_m_s")

    if region == "Global" or region == "CAM":
        s2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_s2")
        s1 = s2
    elif region == "Taiwan" or region == "Japan":
        s2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, region + "_s2")
        s1 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, region + "_s1")
    else:
        s2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, region + "_s2")
        s1 = s2
    # end

    ##Compute linear site term
    if Vs30 <= V1:
        Flin = s1 * math.log(Vs30 / V1) + s2 * math.log(V1 / Vref)
    elif Vs30 <= V2:
        Flin = s2 * math.log(Vs30 / Vref)
    else:
        Flin = s2 * math.log(V2 / Vref)
    # end

    # # Nonlinear Site Term -----------------------------------------------------
    PGAr = math.exp(PSHAB20_GMM_at_760_Slab(EventType, UserRegion, saturation_region, Rrup, M, hypocentral_depth, 0))
    f3 = 0.05
    Vb = 200
    Vref_Fnl = 760

    if period >= 3:
        Fnl = 0
    else:
        f4 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "f4")
        f5 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "f5")
        f2 = f4 * (math.exp(f5 * (min(Vs30, Vref_Fnl) - Vb)) - math.exp(f5 * (Vref_Fnl - Vb)))
        Fnl = 0 + f2 * math.log((PGAr + f3) / f3)
    # end

    ##  Basin Term --------------------------------------------------------------
    #     Z2pt5
    #     region
    if str(Z2pt5) == "default" or str(Z2pt5) == "Default":
        Fb = 0
    elif Z2pt5 <= 0 or (region != "Japan" and region != "Cascadia"):
        Fb = 0
    else:
        if region == "Cascadia":
            theta0 = 3.94
            theta1 = -0.42
            vmu = 200
            vsig = 0.2
            e1 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "C_e1")

            C_e3 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "C_e3")
            C_e2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "C_e2")

            if basin == 0:
                del_None = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "del_None")
                e3 = C_e3 + del_None
                e2 = C_e2 + del_None
            elif basin == 1:
                del_Seattle = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "del_Seattle")
                e3 = C_e3 + del_Seattle
                e2 = C_e2 + del_Seattle
            else:
                e3 = C_e3
                e2 = C_e2
            # end

        elif region == "Japan":

            theta0 = 3.05
            theta1 = -0.8
            vmu = 500
            vsig = 0.33
            e3 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "J_e3")
            e2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "J_e2")
            e1 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "J_e1")

        # end

        Z2pt5_pred = 10 ** (theta0 + theta1 * (1 + math.erf((Log10(Vs30) - Log10(vmu)) / (vsig * math.sqrt(2)))))
        delZ2pt5 = math.log(Z2pt5) - math.log(Z2pt5_pred)

        if delZ2pt5 <= (e1 / e3):
            Fb = e1
        elif delZ2pt5 >= (e2 / e3):
            Fb = e2
        else:
            Fb = e3 * delZ2pt5
    # end
    # end

    mu = c0 + Fp + Fm + Fd + Fnl + Flin + Fb
    return mu


# end

def Log10(x):
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    import math
    Log10Value = math.log(x) / math.log(10.)
    return Log10Value


# end


# updated 6/1/2020 by Silvia Mazzoni
# GMM_at_760_IF_v4.R

##Grace Parker
##Modified February 26 to expand comments
##Modified March 25, 2020 to call consolidated coefficient tables

## Input Parameters --------------------------------------------------------

##Event type: 0 == interface, 1 == slab

##region corresponds to options in the DatabaseRegion column of the flatfile, plus global. Must be a string. If no matches, default will be global model:
## "Global", "Alaska", "Cascadia", "CAM", "Japan", "SA" or "Taiwan"

##Saturation Region corresponds to regions defined by R. Archuleta and C. Ji:
## "Global", "Aleutian","Alaska","Cascadia","CAM_S", "CAM_N", "Japan_Pac","Japan_Phi","SA_N","SA_S", "Taiwan_W","Taiwan_E"

## Rrup is number in kilometers

## period can be: (-1,0,0.01,0.02,0.025,0.03,0.04,0.05,0.075,0.1,0.15,0.2,0.25,0.3,0.4,0.5,0.75,1,1.5,2,2.5,3,4,5,7.5,10)
## where -1 == PGV and 0 == PGA

## Other pertinent information ---------------------------------------------
## Coefficient files must be in the active working directory
## This function has no site term. Can only estimate ground motion at the reference condition VS30 = 760m/s
## The output is the desired median model prediction in LN units
## Take the exponential to get PGA, PSA in g or the PGV in cm/s


def PSHAB20_GMM_at_760_IF(EventType, UserRegion, saturation_region_user, Rrup, M, period):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    PSHAB20_GMM_at_760_IFValue = -999
    if (LeftNumber(EventType, 1)) == 1 or (LeftNumber(EventType, 1)) == 5:
        return PSHAB20_GMM_at_760_IFValue  # ("This def is only for IF")
    # end
    region = NGAsubGMM.getPSHABregion(UserRegion)
    saturation_region = NGAsubGMM.getPSHABSubductionRegion(saturation_region_user)

    ##  Import Master Coefficient Table -----------------------------------------
    ##import CoefficientsTable
    #  CoefficientsTable = readtable('PSHAB20_Table_E1_Interface_Coefficients_OneRowHeader.csv','PreserveVariableNames',True)
    CoefficientsTable = NGAsubGMM.coeff_read_csv('PSHAB20_Table_E1_Interface_Coefficients_OneRowHeader.csv')

    ##Define Mb
    Mb = NGAsubGMM.getMbDefault("PSHAB20", EventType, UserRegion, saturation_region)

    ##  Constant ----------------------------------------------------------------

    if region == "Global":
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_c0")
    else:
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, saturation_region + "_c0")
    # end

    ##  Path Term ---------------------------------------------------------------
    h = 10 ** (-0.82 + 0.252 * M)
    Rref = math.sqrt(1 + h ** 2)
    r = math.sqrt(Rrup ** 2 + h ** 2)
    LogR = math.log(r)
    R_Rref = math.log(r / Rref)

    #  #Need  to isolate regional anelastic coefficient, a0
    if region == "Global":
        a0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_a0")
    else:
        a0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, region + "_a0")
    # end
    if checkEmptyNA999(a0):
        a0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_a0")
    # end

    c1 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c1")
    b4 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "b4")

    Fp = (c1 * LogR + (b4 * M) * R_Rref + a0 * r)

    ##  Magnitude Scaling -------------------------------------------------------
    c4 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c4")
    c5 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c5")
    c6 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c6")
    Fm = c4 * func1(M, Mb) + c6 * func2(M, Mb) + c5 * func3(M, Mb)

    ##  Add it all up! ----------------------------------------------------------

    mu = c0 + Fp + Fm

    PSHAB20_GMM_at_760_IFValue = mu
    return PSHAB20_GMM_at_760_IFValue


# end


# Updated by Silvia Mazzoni 6/1/2020

# GMM_at_Vs30_IF_v4.R

##Grace Parker
##Modified February 26, 2020, to expand comments
##Modified March 25, 2020, to take coefficients from "Table_E1_Interface_Coefficients.csv"

## Input Parameters --------------------------------------------------------

##Event type: 0 == interface, 1 == slab

##region corresponds to options in the DatabaseRegion column of the flatfile, plus global. Must be a string. If no matches, default will be global model:
## "Global", "Alaska", "Cascadia", "CAM", "Japan", "SA" or "Taiwan"

##Saturation Region corresponds to regions defined by R. Archuleta and C. Ji:
## "Global", "Aleutian","Alaska","Cascadia","CAM_S", "CAM_N", "Japan_Pac","Japan_Phi","SA_N","SA_S", "Taiwan_W","Taiwan_E"

## Rrup is number in kilometers

## period can be: (-1,0,0.01,0.02,0.025,0.03,0.04,0.05,0.075,0.1,0.15,0.2,0.25,0.3,0.4,0.5,0.75,1,1.5,2,2.5,3,4,5,7.5,10)
## where -1 == PGV and 0 == PGA

##VS30 in units m/s

##Z2.5 in units m. Only used if DatabaseRegion == "Japan" or "Cascadia". Can also specify "default" to get no basin term

##basin is only used if DatabaseRegion == "Cascadia". Value can be 0, 1, or 2, where 0 == having an estimate of Z2.5 outside mapped basin, 1 == Seattle basin, and 0 == other mapped basin (Tacoma, Everett, Georgia, etc.)

## Other pertinent information ---------------------------------------------
##Coefficient files must be in the active working directory
## "GMM_at_VS30_IF_v3.R" calls function "GMM_at_760_IF_v2.R" to compute PGAr in the nonlinear site term. This function must be in the R environment else: an error will occur.
## The output is the desired median model prediction in LN units
#

def PSHAB20_GMM_at_VS30_IF(EventType, UserRegion, saturation_region_user, Rrup, M, period, Vs30, Z2pt5, basin):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    PSHAB20_GMM_at_VS30_IFValue = -999
    if (LeftNumber(EventType, 1)) == 1 or (LeftNumber(EventType, 1)) == 5:
        return PSHAB20_GMM_at_VS30_IFValue  # ("This def is only for IF")
    # end
    region = NGAsubGMM.getPSHABregion(UserRegion)
    saturation_region = NGAsubGMM.getPSHABSubductionRegion(saturation_region_user)
    basin = LeftNumber(basin, 1)

    ##  Import Master Coefficient Table -----------------------------------------
    #  CoefficientsTable = readtable('PSHAB20_Table_E1_Interface_Coefficients_OneRowHeader.csv','PreserveVariableNames',True)
    CoefficientsTable = NGAsubGMM.coeff_read_csv('PSHAB20_Table_E1_Interface_Coefficients_OneRowHeader.csv')

    ##Define Mb
    Mb = NGAsubGMM.getMbDefault("PSHAB20", EventType, UserRegion, saturation_region)

    ##  Constant ----------------------------------------------------------------
    if region == "Global":
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_c0")
    else:
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, saturation_region + "_c0")
    # end
    if checkEmptyNA999(c0):
        c0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_c0")
    # end

    ##  Path Term ---------------------------------------------------------------
    h = 10 ** (-0.82 + 0.252 * M)
    Rref = math.sqrt(1 + h ** 2)
    r = math.sqrt(Rrup ** 2 + h ** 2)
    LogR = math.log(r)
    R_Rref = math.log(r / Rref)

    #  #Need  to isolate regional anelastic coefficient, a0
    if region == "Global":
        a0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_a0")
    else:
        a0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, region + "_a0")
    # end
    if checkEmptyNA999(a0):
        a0 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_a0")
    # end

    c1 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c1")
    b4 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "b4")
    Fp = (c1 * LogR + (b4 * M) * R_Rref + a0 * r)

    ##  Magnitude Scaling -------------------------------------------------------

    c4 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c4")
    c5 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c5")
    c6 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "c6")

    Fm = c4 * func1(M, Mb) + c6 * func2(M, Mb) + c5 * func3(M, Mb)

    # # Linear Site Amplification ----------------------------------------------

    ## Site Coefficients
    V1 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "V1_m_s")
    V2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "V2_m_s")
    Vref = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Vref_m_s")

    if region == "Global" or region == "CAM":
        s2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "Global_s2")
        s1 = s2
    elif region == "Taiwan" or region == "Japan":
        s2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, region + "_s2")
        s1 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, region + "_s1")
    else:
        s2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, region + "_s2")
        s1 = s2
    # end

    ##Compute linear site term
    if Vs30 <= V1:
        Flin = s1 * math.log(Vs30 / V1) + s2 * math.log(V1 / Vref)
    elif Vs30 <= V2:
        Flin = s2 * math.log(Vs30 / Vref)
    else:
        Flin = s2 * math.log(V2 / Vref)
    # end

    # # Nonlinear Site Term -----------------------------------------------------
    PGAr = math.exp(PSHAB20_GMM_at_760_IF(EventType, UserRegion, saturation_region, Rrup, M, 0))

    f3 = 0.05
    Vb = 200
    Vref_Fnl = 760
    if period >= 3:
        Fnl = 0
    else:
        f4 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "f4")
        f5 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "f5")
        f2 = f4 * (math.exp(f5 * (min(Vs30, Vref_Fnl) - Vb)) - math.exp(f5 * (Vref_Fnl - Vb)))
        Fnl = 0 + f2 * math.log((PGAr + f3) / f3)

    # end

    ##  Basin Term --------------------------------------------------------------
    if str(Z2pt5) == "default" or str(Z2pt5) == "Default":
        Fb = 0
    elif Z2pt5 <= 0 or (region != "Japan" and region != "Cascadia"):
        Fb = 0
    else:
        if region == "Cascadia":
            theta0 = 3.94
            theta1 = -0.42
            vmu = 200
            vsig = 0.2
            e1 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "C_e1")

            if basin == 0:
                C_e3 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "C_e3")
                C_e2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "C_e2")
                del_None = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "del_None")
                e3 = C_e3 + del_None
                e2 = C_e2 + del_None
            elif basin == 1:
                C_e3 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "C_e3")
                C_e2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "C_e2")
                del_Seattle = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "del_Seattle")
                e3 = C_e3 + del_Seattle
                e2 = C_e2 + del_Seattle
            else:
                C_e3 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "C_e3")
                C_e2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "C_e2")
                e3 = C_e3
                e2 = C_e2
            # end

        elif region == "Japan":
            theta0 = 3.05
            theta1 = -0.8
            vmu = 500
            vsig = 0.33
            e3 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "J_e3")
            e2 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "J_e2")
            e1 = NGAsubGMM.getRangeValueT(CoefficientsTable, period, "J_e1")
        # end

        Z2pt5_pred = 10 ** (theta0 + theta1 * (1 + math.erf((Log10(Vs30) - Log10(vmu)) / (vsig * math.sqrt(2)))))
        delZ2pt5 = math.log(Z2pt5) - math.log(Z2pt5_pred)

        if delZ2pt5 <= (e1 / e3):
            Fb = e1
        elif delZ2pt5 >= (e2 / e3):
            Fb = e2
        else:
            Fb = e3 * delZ2pt5
    # end
    # end

    #  # Add it all up! ----------------------------------------------------------
    mu = c0 + Fp + Fm + Fnl + Fb + Flin
    return mu


# end

def PSHAB20_Median(EventType, UserRegion, SubductionSlab, Rrup, Magnitude, Zhypo, period, Vs30, Z2pt5, PNWbasinStrux):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    thisOut = -999
    XinterpMin = 0
    XinterpMax = 10
    XinterpType = "log"
    YinterpType = "log"
    extrapolateType = "extrapolate"

    # Parameters = readtable('PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader.csv','PreserveVariableNames',True)
    Parameters = NGAsubGMM.coeff_read_csv('PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader.csv')
    TvalueList = Parameters['T']

    InterpArray = interpolateFunction(period, TvalueList, XinterpType, extrapolateType, XinterpMin, XinterpMax)

    period0 = TvalueList[InterpArray[1]]
    y0= NGAsubGMM.PSHAB20_Median_AtTlist(EventType, UserRegion, SubductionSlab, Rrup, Magnitude, Zhypo, period0, Vs30, Z2pt5,
                                PNWbasinStrux)

    if InterpArray[2] <= 0:
        thisOut = y0
    else:
        period1 = TvalueList[InterpArray[2]]
        y1= NGAsubGMM.PSHAB20_Median_AtTlist(EventType, UserRegion, SubductionSlab, Rrup, Magnitude, Zhypo, period1, Vs30, Z2pt5,
                                    PNWbasinStrux)
        if LeftString(YinterpType, len("log")).lower() == "log".lower():
            if y0 <= 0:
                y0 = 0.000000001
            # end
            if y1 <= 0:
                y1 = 0.000000001
            # end
            y0 = math.log(y0)
            y1 = math.log(y1)
        # end
        thisOut = y0 + (y1 - y0) * InterpArray[3]
        if LeftString(YinterpType, len("log")).lower() == "log".lower():
            thisOut = math.exp(thisOut)
    # end

    # end

    return thisOut


# end

def PSHAB20_Median_AtTlist(EventType, UserRegion, saturation_region, Rrup, M, hypocentral_depth, period, Vs30, Z2pt5,basin):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    if LeftNumber(EventType, 1) == 1 or LeftNumber(EventType, 1) == 5:
        this= NGAsubGMM.PSHAB20_GMM_at_VS30_Slab(EventType, UserRegion, saturation_region, Rrup, M, hypocentral_depth, period,
                                        Vs30, Z2pt5, basin)
        PSHAB20_Median_AtTlistValue = math.exp(
            PSHAB20_GMM_at_VS30_Slab(EventType, UserRegion, saturation_region, Rrup, M, hypocentral_depth, period, Vs30,
                                     Z2pt5, basin))
    else:
        PSHAB20_Median_AtTlistValue = math.exp(
            PSHAB20_GMM_at_VS30_IF(EventType, UserRegion, saturation_region, Rrup, M, period, Vs30, Z2pt5, basin))
    # end
    return PSHAB20_Median_AtTlistValue


# end
def PSHAB20_SigmaEpistemic(Ts, EventType, saturation_region_user):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    if (LeftNumber(EventType, 1)) == 0:
        CoefficientsTable = NGAsubGMM.coeff_read_csv("PSHAB20_EpistemicModelCoefficients_Interface.csv")
    else:
        CoefficientsTable = NGAsubGMM.coeff_read_csv("PSHAB20_EpistemicModelCoefficients_Slab.csv")
    #end

    saturation_region = NGAsubGMM.getPSHABSubductionRegion(saturation_region_user)
    if saturation_region == "Taiwan_W" or saturation_region == "Taiwan_E":
        saturation_region = "Taiwan"
    #end

    if saturation_region == "New_Zealand_N" or saturation_region == "New_Zealand_S":
        saturation_region = "Global"
    #end
    SigEp1 = NGAsubGMM.getRangeValueRegion(CoefficientsTable, saturation_region, 'SigEp1')
    if SigEp1 == -999:
        saturation_region = "Global"
        SigEp1 = NGAsubGMM.getRangeValueRegion(CoefficientsTable, saturation_region, 'SigEp1')
    #end
    SigEp2 = NGAsubGMM.getRangeValueRegion(CoefficientsTable, saturation_region, 'SigEp2')
    T1 = NGAsubGMM.getRangeValueRegion(CoefficientsTable, saturation_region, 'T1')
    T2 = NGAsubGMM.getRangeValueRegion(CoefficientsTable, saturation_region, 'T2')
    if Ts < T1 or Ts == 0:
        sigma_epi = SigEp1
    elif Ts > T2:
        sigma_epi = SigEp2
    else:
        sigma_epi = SigEp1 - (SigEp1 - SigEp2) * (math.log(Ts / T1) / math.log(T2 / T1))
    #end
    return sigma_epi

# end


def PSHAB20_SigmaAleatory(period, Rrup, Vs30):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    thisOut = -999
    XinterpMin = 0
    XinterpMax = 10
    XinterpType = "log"
    YinterpType = "linear"
    extrapolateType = "extrapolate"

    #    Parameters = readtable('PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader.csv','PreserveVariableNames',True)
    Parameters = NGAsubGMM.coeff_read_csv('PSHAB20_Table_E2_Slab_Coefficients_OneRowHeader.csv')

    TvalueList = Parameters['T']
    InterpArray = interpolateFunction(period, TvalueList, XinterpType, extrapolateType, XinterpMin, XinterpMax)

    period0 = TvalueList[InterpArray[1]]
    y0= NGAsubGMM.PSHAB20_SigmaAleatoryAtTlist(period0, Rrup, Vs30)

    if InterpArray[2] <= 0:
        thisOut = y0
    else:
        period1 = TvalueList[InterpArray[2]]
        y1= NGAsubGMM.PSHAB20_SigmaAleatoryAtTlist(period1, Rrup, Vs30)
        if LeftString(YinterpType, len("log")).lower() == "log".lower():
            if y0 <= 0:
                y0 = 0.000000001
            # end
            if y1 <= 0:
                y1 = 0.000000001
            # end
            y0 = math.log(y0)
            y1 = math.log(y1)
        # end
        thisOut = y0 + (y1 - y0) * InterpArray[3]
        if LeftString(YinterpType, len("log")).lower() == "log".lower():
            thisOut = math.exp(thisOut)
    # end

    # end

    return thisOut


# end

def PSHAB20_SigmaAleatoryAtTlist(period, Rrup, Vs30):
    import math
    import NGAsubGMM
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    PSHAB20_SigmaAleatoryAtTlist = -999

    PhiTot= NGAsubGMM.PSHAB20_PhiTot(period, Rrup, Vs30)
    Tau= NGAsubGMM.PSHAB20_Tau(period, Rrup, Vs30)

    PSHAB20_SigmaAleatoryAtTlistValue = math.sqrt(PhiTot * PhiTot + Tau * Tau)

    return PSHAB20_SigmaAleatoryAtTlistValue


# end


def PSHAB20_Tau(period, Rrup, Vs30):
    import NGAsubGMM
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    PSHAB20_TauValue = -999
    #    SigmacoefficientsTable = readtable("PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader.csv",'PreserveVariableNames',True)
    SigmacoefficientsTable = NGAsubGMM.coeff_read_csv("PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader.csv")
    Tau = NGAsubGMM.getRangeValueT(SigmacoefficientsTable, period, "Tau")
    return Tau


# end


def PSHAB20_PhiTot(period, Rrup, Vs30):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    PSHAB20_PhiTotValue = -999
    #    SigmacoefficientsTable = readtable("PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader.csv",'PreserveVariableNames',True)
    SigmacoefficientsTable = NGAsubGMM.coeff_read_csv("PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader.csv")

    PhiTot_Phi1squared = NGAsubGMM.getRangeValueT(SigmacoefficientsTable, period, "PhiTot_Phi1squared")
    PhiTot_Phi2squared = NGAsubGMM.getRangeValueT(SigmacoefficientsTable, period, "PhiTot_Phi2squared")
    PhiTot_PhiVsquared = NGAsubGMM.getRangeValueT(SigmacoefficientsTable, period, "PhiTot_PhiVsquared")

    # Corner Distances:
    R1 = 200  # km
    R2 = 500  # km

    V1 = 200  # m/s
    V2 = 500  # m/s

    if Vs30 <= V1:
        Rprime = max(R1, min(R2, Rrup))
        deltaVar = PhiTot_PhiVsquared * (math.log(R2 / Rprime)) / (math.log(R2 / R1))
    elif Vs30 < V2:
        Rprime = max(R1, min(R2, Rrup))
        deltaVar = PhiTot_PhiVsquared * (math.log(R2 / Rprime)) / (math.log(R2 / R1)) * (math.log(V2 / Vs30)) / (
            math.log(V2 / V1))
    else:
        deltaVar = 0
    # end

    if Rrup < R1:
        phiSquared = PhiTot_Phi1squared
    elif Rrup < R2:
        phiSquared = (PhiTot_Phi2squared - PhiTot_Phi1squared) / (math.log(R2 / R1)) * (
            math.log(Rrup / R1)) + PhiTot_Phi1squared
    else:
        phiSquared = PhiTot_Phi2squared

    # end

    PSHAB20_PhiTotValue = math.sqrt(phiSquared + deltaVar)
    return PSHAB20_PhiTotValue


# end

def PSHAB20_SigmaS2S(period, Rrup, Vs30):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    PSHAB20_SigmaS2SValue = -999
    #    SigmacoefficientsTable = readtable("PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader.csv",'PreserveVariableNames',True)
    SigmacoefficientsTable = NGAsubGMM.coeff_read_csv("PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader.csv")

    PhiS2S_PhiS2S0squared = NGAsubGMM.getRangeValueT(SigmacoefficientsTable, period, "PhiS2S_PhiS2S0squared")
    PhiS2S_a1 = NGAsubGMM.getRangeValueT(SigmacoefficientsTable, period, "PhiS2S_a1")
    VM = NGAsubGMM.getRangeValueT(SigmacoefficientsTable, period, "VM")

    # Corner Distances:
    R3 = 200  # km
    R4 = 500  # km

    V3 = 200  # m/s
    V4 = 800  # m/s

    if Vs30 <= V3:
        Rprime = max(R3, min(R4, Rrup))
        deltaVarS2S = PhiS2S_a1 * math.log(V3 / VM) * (math.log(R4 / Rprime)) / (math.log(R4 / R3))
    elif Vs30 < VM:
        Rprime = max(R3, min(R4, Rrup))
        deltaVarS2S = PhiS2S_a1 * math.log(Vs30 / VM) * (math.log(R4 / Rprime)) / (math.log(R4 / R3))
    elif Vs30 < V4:
        deltaVarS2S = PhiS2S_a1 * math.log(Vs30 / VM)
    else:
        deltaVarS2S = PhiS2S_a1 * math.log(V4 / VM)
    # end

    PSHAB20_SigmaS2SValue = math.sqrt(PhiS2S_PhiS2S0squared + deltaVarS2S)
    return PSHAB20_SigmaS2SValue


# end


def PSHAB20_SigmaSS(period, Rrup, Vs30):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    PSHAB20_SigmaSSValue = -999
    #    SigmacoefficientsTable = readtable("PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader.csv",'PreserveVariableNames',True)
    SigmacoefficientsTable = NGAsubGMM.coeff_read_csv("PSHAB20_Table_E3_AleatoryCoefficients_OneRowHeader.csv")

    PhiSS_PhiSS1squared = NGAsubGMM.getRangeValueT(SigmacoefficientsTable, period, "PhiSS_PhiSS1squared")
    PhiSS_PhiSS2squared = NGAsubGMM.getRangeValueT(SigmacoefficientsTable, period, "PhiSS_PhiSS2squared")
    PhiSS_a2 = NGAsubGMM.getRangeValueT(SigmacoefficientsTable, period, "PhiSS_a2")
    VM = NGAsubGMM.getRangeValueT(SigmacoefficientsTable, period, "VM")

    # Corner Distances:
    R3 = 200  # km
    R4 = 500  # km
    R5 = 500  # km
    R6 = 800  # km

    V3 = 200  # m/s
    V4 = 800  # m/s

    if Rrup < R5:
        phiSquaredSS = PhiSS_PhiSS1squared
    elif Rrup < R6:
        phiSquaredSS = (PhiSS_PhiSS2squared - PhiSS_PhiSS1squared) / (math.log(R6 / R5)) * (
            math.log(Rrup / R5)) + PhiSS_PhiSS1squared
    else:
        phiSquaredSS = PhiSS_PhiSS2squared

    # end

    if Vs30 <= V3:
        Rprime = max(R3, min(R4, Rrup))
        deltaVarSS = PhiSS_a2 * math.log(V3 / VM) * (math.log(R4 / Rprime)) / (math.log(R4 / R3))
    elif Vs30 < VM:
        Rprime = max(R3, min(R4, Rrup))
        deltaVarSS = PhiSS_a2 * math.log(Vs30 / VM) * (math.log(R4 / Rprime)) / (math.log(R4 / R3))
    elif Vs30 < V4:
        deltaVarSS = PhiSS_a2 * math.log(Vs30 / VM)
    else:
        deltaVarSS = PhiSS_a2 * math.log(V4 / VM)
    # end

    PSHAB20_SigmaSSValue = math.sqrt(phiSquaredSS + deltaVarSS)
    return PSHAB20_SigmaSSValue
# end


def PSHAB20_SigmaTotal(period, Rrup, Vs30, EventType, saturation_region_user):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu
    SigmaAleatory= NGAsubGMM.PSHAB20_SigmaAleatory(period, Rrup, Vs30)
    SigmaEpistemic= NGAsubGMM.PSHAB20_SigmaEpistemic(period, EventType, saturation_region_user)
    SigmaTotalValue = math.sqrt(SigmaAleatory * SigmaAleatory + SigmaEpistemic * SigmaEpistemic)
    return SigmaTotalValue
# end


def NGAsubGMM_MedianPlusMinusSigma(UserPeriod, UserRegion, Magnitude, Vs30, Rrup, AlphaBackarc, AlphaNankai, Ztor, Zhypo, EventType,\
                     Z1pt0, Z2pt5, MbUser, SubductionSlab, PNWbasinStrux, Weight_KBCG20, Weight_PSHAB20,  User_NSigma, User_EpiInSigmaModels, User_NsampleEpi ,\
                     User_MeanType='geometric'):
    import NGAsubGMM
    import math
    # CODE DEVELOPED/IMPLEMENTED BY
    #          Silvia Mazzoni, 2020
    #           smazzoni@ucla.edu

    if str(MbUser).lower() == "default".lower():
        Mb = NGAsubGMM.getMbDefault("KBCG20", EventType, UserRegion, SubductionSlab)
    else:
        Mb = MbUser
    # end


    period = NGAsubGMM.getTFvalue(UserPeriod)
    WeightedSum = 0
    WeightSum = 0

    if Weight_KBCG20 > 0:
        KBCG20median = NGAsubGMM.KBCG20_medPSA(period, Magnitude, Rrup, AlphaBackarc, AlphaNankai, Ztor, EventType, Vs30, Z1pt0, Z2pt5,
                               Mb, UserRegion, PNWbasinStrux)
        SigmaAleatoryKBCG20 = NGAsubGMM.KBCG20_sigmaAleatory(period)
        SigmaEpistemicKBCG20 = NGAsubGMM.KBCG20_SigmaEpistemic(period, Magnitude, Rrup, AlphaBackarc, AlphaNankai, Ztor,
                                                     EventType, Vs30, Z1pt0, Z2pt5, Mb, UserRegion, User_NsampleEpi,
                                                     PNWbasinStrux)
        KBCG20SigmaTotal = math.sqrt(SigmaAleatoryKBCG20 * SigmaAleatoryKBCG20 + SigmaEpistemicKBCG20 * SigmaEpistemicKBCG20)
        KBCG20 = math.exp(math.log(KBCG20median)+User_NSigma*KBCG20SigmaTotal);
        WeightSum = WeightSum + Weight_KBCG20
        if User_MeanType.lower() == "arithmetic".lower():
            WeightedSum = WeightedSum + KBCG20 * Weight_KBCG20
        else:
            WeightedSum = WeightedSum + math.log(KBCG20) * Weight_KBCG20
    # end
    # end
    if Weight_PSHAB20 > 0:
        PSHAB20median= NGAsubGMM.PSHAB20_Median(EventType, UserRegion, SubductionSlab, Rrup, Magnitude, Zhypo, period, Vs30, Z2pt5,
                                 PNWbasinStrux)
        SigmaAleatoryPSHAB20= NGAsubGMM.PSHAB20_SigmaAleatory(period, Rrup, Vs30)
        SigmaEpistemicPSHAB20= NGAsubGMM.PSHAB20_SigmaEpistemic(period,EventType,SubductionSlab)
        PSHAB20SigmaTotal = math.sqrt(SigmaAleatoryPSHAB20 * SigmaAleatoryPSHAB20 + SigmaEpistemicPSHAB20 * SigmaEpistemicPSHAB20);
        PSHAB20 = math.exp(math.log(PSHAB20median) + User_NSigma * PSHAB20SigmaTotal);
        WeightSum = WeightSum + Weight_PSHAB20
        if User_MeanType.lower() == "arithmetic".lower():
            WeightedSum = WeightedSum + PSHAB20 * Weight_PSHAB20
        else:
            WeightedSum = WeightedSum + math.log(PSHAB20) * Weight_PSHAB20
    # end
    # end
    if WeightSum > 0:
        if User_MeanType.lower() == "arithmetic".lower():
            NGAsubGMM_MedianPlusMinusSigmaValue = WeightedSum / WeightSum
        else:
            NGAsubGMM_MedianPlusMinusSigmaValue = math.exp(WeightedSum / WeightSum)
    # end
    # end
    return NGAsubGMM_MedianPlusMinusSigmaValue


# end



# #############################################################
# The following script performs a large sensitivity study (see last def in this file)
# Running this sensitivity study make take a few minutes.
# The results from this study are output to a screen a to a csv file
#
def RunSensitivityStudy(printSwitch=True):
    import NGAsubGMM
    import math
    import pandas as pd
    CaseLabel = []
    CaseLabelRegion = []
    Mag = []
    Vs30mps = []
    Reg = []
    Rrup_km = []
    alpBack = []
    alpNank = []
    Ztor_km = []
    SeatBasn = []
    Z1pt0m = []
    Z2pt5m = []
    NsplEpi = []
    Mbreak = []
    Zhypo_km = []
    SatReg = []
    Basin = []
    Nsigma = []
    InterIntra = []
    T_sec = []
    outSensitivityData = []
    outSensitivityDataHeader = []

    print(' ### Performing Sensitivity Study')
    for iSet in range(2):
        thisCase = iSet
        if iSet == 0:  # interface
            CaseVariable = ['Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region']
            
            CaseLabel= ["Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.02","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.03","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.05","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.075","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.1","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.15","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.2","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.25","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.3","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.4","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.5","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.75","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=1","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=1.5","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=2","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=3","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=4","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=5","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=7.5","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=10","Mag=4,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=4.25,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=4.5,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=4.75,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=5,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=5.25,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=5.5,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=5.75,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=6,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=6.25,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=6.5,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=6.75,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=7,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=7.25,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=7.5,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=7.75,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8.25,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8.5,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8.75,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=9,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=9.25,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=10,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=13,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=16.9,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=21.97,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=28.561,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=37.1293,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=48.26809,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=62.7485169999999,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=81.5730720999999,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=106.04499373,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=137.858491849,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=179.2160394037,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=232.980851224809,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=302.875106592252,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=393.737638569928,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=511.858930140906,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=665.416609183177,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=865.04159193813,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=1124.55406951957,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=1461.92029037544,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=1900.49637748807,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=2470.64529073449,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=150,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=169.5,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=191.535,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=216.43455,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=244.5710415,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=276.365276895,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=312.29276289135,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=352.890822067225,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=398.766628935964,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=450.60629069764,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=509.185108488333,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=575.379172591816,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=650.178465028752,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=734.701665482489,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=830.212881995213,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=938.140556654591,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=1060.09882901969,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=1197.91167679225,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=1353.64019477524,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=1529.61342009602,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=1728.4631647085,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=1953.16337612061,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=1_Alaska,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=8.6,Zhypo_km=55,SatReg=Alaska,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=1_Alaska,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=8,Zhypo_km=55,SatReg=Aleutian,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=2_Cascadia,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.7,Zhypo_km=55,SatReg=Cascadia,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=2_Cascadia,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=1_InSeattleBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.7,Zhypo_km=55,SatReg=Cascadia,Basin=1_InSeattleBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=2_Cascadia,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.7,Zhypo_km=55,SatReg=Cascadia,Basin=2_InOtherPNWbasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=3_CentralAmerica&Mexico,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.4,Zhypo_km=55,SatReg=Central_America_N,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=3_CentralAmerica&Mexico,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.4,Zhypo_km=55,SatReg=Central_America_S,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=4_Japan,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=8.5,Zhypo_km=55,SatReg=Japan_Pac,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=4_Japan,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.7,Zhypo_km=55,SatReg=Japan_Phi,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=5_NewZealand,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=New_Zealand_N,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=5_NewZealand,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=New_Zealand_S,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=6_SouthAmerica,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=8.5,Zhypo_km=55,SatReg=South_America_N,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=6_SouthAmerica,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=8.6,Zhypo_km=55,SatReg=South_America_S,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=7_Taiwan,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.1,Zhypo_km=55,SatReg=Taiwan_E,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=7_Taiwan,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=0_Interface,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.1,Zhypo_km=55,SatReg=Taiwan_W,Basin=0_NoBasin,Nsigma=1,T_sec=0.01"];
            CaseLabelRegion= ["0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","1_AK_AK_Mb8.6","1_AK_Aleu_Mb8","2_CSC_CSC_Mb7.7","2_CSC_CSC_Mb7.7_1_InSeattleBasin","2_CSC_CSC_Mb7.7_2_InOtherPNWbasin","3_CAM_CAM_N_Mb7.4","3_CAM_CAM_S_Mb7.4","4_JP_JP_Pac_Mb8.5","4_JP_JP_Phi_Mb7.7","5_NZ_NZ_N_Mb7.9","5_NZ_NZ_S_Mb7.9","6_SAM_SAM_N_Mb8.5","6_SAM_SAM_S_Mb8.6","7_TW_TW_E_Mb7.1","7_TW_TW_W_Mb7.1"];

            Mag= [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4.25,4.5,4.75,5,5.25,5.5,5.75,6,6.25,6.5,6.75,7,7.25,7.5,7.75,8,8.25,8.5,8.75,9,9.25,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8];
            Vs30mps= [760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,150,169.5,191.535,216.43455,244.5710415,276.365276895,312.29276289135,352.890822067225,398.766628935964,450.60629069764,509.185108488333,575.379172591816,650.178465028752,734.701665482489,830.212881995213,938.140556654591,1060.09882901969,1197.91167679225,1353.64019477524,1529.61342009602,1728.4631647085,1953.16337612061,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760];
            Reg= ["0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","1_Alaska","1_Alaska","2_Cascadia","2_Cascadia","2_Cascadia","3_CentralAmerica&Mexico","3_CentralAmerica&Mexico","4_Japan","4_Japan","5_NewZealand","5_NewZealand","6_SouthAmerica","6_SouthAmerica","7_Taiwan","7_Taiwan"];
            Rrup_km= [200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,10,13,16.9,21.97,28.561,37.1293,48.26809,62.7485169999999,81.5730720999999,106.04499373,137.858491849,179.2160394037,232.980851224809,302.875106592252,393.737638569928,511.858930140906,665.416609183177,865.04159193813,1124.55406951957,1461.92029037544,1900.49637748807,2470.64529073449,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200];
            alpBack= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
            alpNank= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
            Ztor_km= [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10];
            SeatBasn= ["0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","1_InSeattleBasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin"];
            Z1pt0m= [550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550];
            Z2pt5m
            NsplEpi= [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100];
            Mbreak= [7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,8.6,8,7.7,7.7,7.7,7.4,7.4,8.5,7.7,7.9,7.9,8.5,8.6,7.1,7.1];
            Zhypo_km= [55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55];
            SatReg= ["Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Alaska","Aleutian","Cascadia","Cascadia","Cascadia","Central_America_N","Central_America_S","Japan_Pac","Japan_Phi","New_Zealand_N","New_Zealand_S","South_America_N","South_America_S","Taiwan_E","Taiwan_W"];
            Basin= ["0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","1_InSeattleBasin","2_InOtherPNWbasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin"];
            Nsigma= [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
            InterIntra= ["0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface","0_Interface"];
            T_sec= [0.01,0.02,0.03,0.05,0.075,0.1,0.15,0.2,0.25,0.3,0.4,0.5,0.75,1,1.5,2,3,4,5,7.5,10,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01];



        else:  # intraslab

            CaseVariable = ['Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Period','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Magnitude','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Distance','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Vs30','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region','Region']

            CaseLabel= ["Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.02","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.03","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.05","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.075","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.1","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.15","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.2","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.25","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.3","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.4","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.5","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.75","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=1","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=1.5","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=2","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=3","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=4","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=5","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=7.5","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=40,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=10","Mag=4,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=4.25,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=4.5,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=4.75,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=5,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=5.25,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=5.5,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=5.75,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=6,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=6.25,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=6.5,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=6.75,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=7,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=7.25,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=7.5,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=7.75,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8.25,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8.5,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8.75,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=9,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=9.25,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=40,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=52,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=67.6,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=87.88,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=114.244,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=148.5172,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=193.07236,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=250.994068,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=326.2922884,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=424.179974919999,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=551.433967395999,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=716.864157614799,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=931.923404899238,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=1211.50042636901,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=1574.95055427971,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=2047.43572056362,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=2661.66643673271,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=3460.16636775252,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=4498.21627807827,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=5847.68116150175,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=7601.98550995228,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=9882.58116293796,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.9,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=150,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=169.5,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=191.535,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=216.43455,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=244.5710415,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=276.365276895,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=312.29276289135,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=352.890822067225,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=398.766628935964,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=450.60629069764,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=509.185108488333,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=575.379172591816,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=650.178465028752,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=734.701665482489,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=830.212881995213,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=938.140556654591,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=1060.09882901969,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=1197.91167679225,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=1353.64019477524,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=1529.61342009602,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=1728.4631647085,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=1953.16337612061,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=0_Global,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=global,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=1_Alaska,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.2,Zhypo_km=55,SatReg=Alaska,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=1_Alaska,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=8,Zhypo_km=55,SatReg=Aleutian,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=2_Cascadia,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=0_NoBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.2,Zhypo_km=55,SatReg=Cascadia,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=2_Cascadia,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=1_InSeattleBasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.2,Zhypo_km=55,SatReg=Cascadia,Basin=1_InSeattleBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=2_Cascadia,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.2,Zhypo_km=55,SatReg=Cascadia,Basin=2_InOtherPNWbasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=3_CentralAmerica&Mexico,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.4,Zhypo_km=55,SatReg=Central_America_N,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=3_CentralAmerica&Mexico,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=Central_America_S,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=4_Japan,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=Japan_Pac,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=4_Japan,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=Japan_Phi,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=5_NewZealand,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=New_Zealand_N,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=5_NewZealand,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.6,Zhypo_km=55,SatReg=New_Zealand_S,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=6_SouthAmerica,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.3,Zhypo_km=55,SatReg=South_America_N,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=6_SouthAmerica,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.2,Zhypo_km=55,SatReg=South_America_S,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=7_Taiwan,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.7,Zhypo_km=55,SatReg=Taiwan_E,Basin=0_NoBasin,Nsigma=1,T_sec=0.01","Mag=8,Vs30_mps=760,Reg=7_Taiwan,Rrup_km=200,alpBack=0,alpNank=0,Ztor_km=10,InterIntra=1_Intraslab,SeatBasn=2_InOtherPNWbasin,Z1.0_m=550,Z2.5_m=2000,NsplEpi=100,Mbreak=7.7,Zhypo_km=55,SatReg=Taiwan_W,Basin=0_NoBasin,Nsigma=1,T_sec=0.01"];
            CaseLabelRegion= ["0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.9","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","0_GLB_GLB_Mb7.6","1_AK_AK_Mb7.2","1_AK_Aleu_Mb8","2_CSC_CSC_Mb7.2","2_CSC_CSC_Mb7.2_1_InSeattleBasin","2_CSC_CSC_Mb7.2_2_InOtherPNWbasin","3_CAM_CAM_N_Mb7.4","3_CAM_CAM_S_Mb7.6","4_JP_JP_Pac_Mb7.6","4_JP_JP_Phi_Mb7.6","5_NZ_NZ_N_Mb7.6","5_NZ_NZ_S_Mb7.6","6_SAM_SAM_N_Mb7.3","6_SAM_SAM_S_Mb7.2","7_TW_TW_E_Mb7.7","7_TW_TW_W_Mb7.7"];

            Mag= [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,4.25,4.5,4.75,5,5.25,5.5,5.75,6,6.25,6.5,6.75,7,7.25,7.5,7.75,8,8.25,8.5,8.75,9,9.25,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8];
            Vs30mps= [760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,150,169.5,191.535,216.43455,244.5710415,276.365276895,312.29276289135,352.890822067225,398.766628935964,450.60629069764,509.185108488333,575.379172591816,650.178465028752,734.701665482489,830.212881995213,938.140556654591,1060.09882901969,1197.91167679225,1353.64019477524,1529.61342009602,1728.4631647085,1953.16337612061,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760,760];
            Reg= ["0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","0_Global","1_Alaska","1_Alaska","2_Cascadia","2_Cascadia","2_Cascadia","3_CentralAmerica&Mexico","3_CentralAmerica&Mexico","4_Japan","4_Japan","5_NewZealand","5_NewZealand","6_SouthAmerica","6_SouthAmerica","7_Taiwan","7_Taiwan"];
            Rrup_km= [200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,40,52,67.6,87.88,114.244,148.5172,193.07236,250.994068,326.2922884,424.179974919999,551.433967395999,716.864157614799,931.923404899238,1211.50042636901,1574.95055427971,2047.43572056362,2661.66643673271,3460.16636775252,4498.21627807827,5847.68116150175,7601.98550995228,9882.58116293796,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200];
            alpBack= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
            alpNank= [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
            Ztor_km= [40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10];
            SeatBasn= ["0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","1_InSeattleBasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin","2_InOtherPNWbasin"];
            Z1pt0m= [550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550,550];
            Z2pt5m= [2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000,2000];
            NsplEpi= [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100];
            Mbreak= [7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.6,7.2,8,7.2,7.2,7.2,7.4,7.6,7.6,7.6,7.6,7.6,7.3,7.2,7.7,7.7];
            Zhypo_km= [55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55];
            SatReg= ["Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Global","Alaska","Aleutian","Cascadia","Cascadia","Cascadia","Central_America_N","Central_America_S","Japan_Pac","Japan_Phi","New_Zealand_N","New_Zealand_S","South_America_N","South_America_S","Taiwan_E","Taiwan_W"];
            Basin= ["0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","1_InSeattleBasin","2_InOtherPNWbasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin","0_NoBasin"];
            Nsigma= [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
            InterIntra= ["1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab","1_Intraslab"];
            T_sec= [0.01,0.02,0.03,0.05,0.075,0.1,0.15,0.2,0.25,0.3,0.4,0.5,0.75,1,1.5,2,3,4,5,7.5,10,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01];

        # end

        for irow in range(len(T_sec)):
            thisCaseVariable = CaseVariable[irow]
            thisCaseLabel = CaseLabel[irow]
            thisCaseLabelRegion = CaseLabelRegion[irow]
            thisMagnitude = Mag[irow]
            thisVs30 = Vs30mps[irow]
            thisRegion = Reg[irow]
            thisRrup = Rrup_km[irow]
            thisAlphaBackarc = alpBack[irow]
            thisAlphaNankai = alpNank[irow]
            thisZtor = Ztor_km[irow]
            thisSeatBasn = SeatBasn[irow]
            thisZ1pt0 = Z1pt0m[irow]
            thisZ2pt5 = Z2pt5m[irow]
            thisNsampleEpi = NsplEpi[irow]
            thisMb = Mbreak[irow]
            thisZhypo = Zhypo_km[irow]
            thisSubductionSlab = SatReg[irow]
            thisPNWbasinStrux = Basin[irow]
            thisNsigma = Nsigma[irow]
            thisEventType = InterIntra[irow]
            thisT = T_sec[irow]
            hereKBCG20MedianPSA = NGAsubGMM.KBCG20_medPSA(thisT, thisMagnitude, thisRrup, thisAlphaBackarc, thisAlphaNankai,
                                                thisZtor, thisEventType, thisVs30, thisZ1pt0, thisZ2pt5, thisMb,
                                                thisRegion, thisPNWbasinStrux)
            hereKBCG20Tau = NGAsubGMM.KBCG20_sigmaTau(thisT)
            hereKBCG20Phi = NGAsubGMM.KBCG20_sigmaPhi(thisT)
            hereKBCG20SigmaAleatory = NGAsubGMM.KBCG20_sigmaAleatory(thisT)
            hereKBCG20SigmaEpistemic = NGAsubGMM.KBCG20_SigmaEpistemic(thisT, thisMagnitude, thisRrup, thisAlphaBackarc,
                                                             thisAlphaNankai, thisZtor, thisEventType, thisVs30,
                                                             thisZ1pt0, thisZ2pt5, thisMb, thisRegion, thisNsampleEpi,
                                                             thisPNWbasinStrux)
            hereKBCG20SigmaTotal = NGAsubGMM.KBCG20_SigmaTotal(thisT, thisMagnitude, thisRrup, thisAlphaBackarc, thisAlphaNankai,
                                                     thisZtor, thisEventType, thisVs30, thisZ1pt0, thisZ2pt5, thisMb,
                                                     thisRegion, thisNsampleEpi, thisPNWbasinStrux)
            hereKBCG20MedianMinusNsigmaxSigmaTotal = math.exp(
                math.log(hereKBCG20MedianPSA) - thisNsigma * hereKBCG20SigmaTotal)
            hereKBCG20MedianPlusNsigmaxSigmaTotal = math.exp(
                math.log(hereKBCG20MedianPSA) + thisNsigma * hereKBCG20SigmaTotal)
            hereKBCG20MedianMinusNsigmaxSigmaAleatory = math.exp(
                math.log(hereKBCG20MedianPSA) - thisNsigma * hereKBCG20SigmaAleatory)
            hereKBCG20MedianPlusNsigmaxSigmaAleatory = math.exp(
                math.log(hereKBCG20MedianPSA) + thisNsigma * hereKBCG20SigmaAleatory)
            hereKBCG20MedianMinusNsigmaxSigmaEpistemic = math.exp(
                math.log(hereKBCG20MedianPSA) - thisNsigma * hereKBCG20SigmaEpistemic)
            hereKBCG20MedianPlusNsigmaxSigmaEpistemic = math.exp(
                math.log(hereKBCG20MedianPSA) + thisNsigma * hereKBCG20SigmaEpistemic)
            herePSHAB20MedianPSA= NGAsubGMM.PSHAB20_Median(thisEventType, thisRegion, thisSubductionSlab, thisRrup,
                                                  thisMagnitude, thisZhypo, thisT, thisVs30, thisZ2pt5,
                                                  thisPNWbasinStrux)
            herePSHAB20Tau= NGAsubGMM.PSHAB20_Tau(thisT, thisRrup, thisVs30)
            herePSHAB20PhiTot= NGAsubGMM.PSHAB20_PhiTot(thisT, thisRrup, thisVs30)
            herePSHAB20PhiS2S= NGAsubGMM.PSHAB20_SigmaS2S(thisT, thisRrup, thisVs30)
            herePSHAB20PhiSS= NGAsubGMM.PSHAB20_SigmaSS(thisT, thisRrup, thisVs30)
            herePSHAB20SigmaAleatory= NGAsubGMM.PSHAB20_SigmaAleatory(thisT, thisRrup, thisVs30)
            herePSHAB20SigmaEpistemic= NGAsubGMM.PSHAB20_SigmaEpistemic(thisT, thisEventType, thisSubductionSlab)
            herePSHAB20SigmaTotal= NGAsubGMM.PSHAB20_SigmaTotal(thisT, thisRrup, thisVs30,thisEventType, thisSubductionSlab)
            herePSHAB20MedianMinusNsigmaxSigmaTotal = math.exp(
                math.log(herePSHAB20MedianPSA) - thisNsigma * herePSHAB20SigmaTotal)
            herePSHAB20MedianPlusNsigmaxSigmaTotal = math.exp(
                math.log(herePSHAB20MedianPSA) + thisNsigma * herePSHAB20SigmaTotal)
            herePSHAB20MedianMinusNsigmaxSigmaAleatory = math.exp(
                math.log(herePSHAB20MedianPSA) - thisNsigma * herePSHAB20SigmaAleatory)
            herePSHAB20MedianPlusNsigmaxSigmaAleatory = math.exp(
                math.log(herePSHAB20MedianPSA) + thisNsigma * herePSHAB20SigmaAleatory)
            herePSHAB20MedianMinusNsigmaxSigmaEpistemic = math.exp(
                math.log(herePSHAB20MedianPSA) - thisNsigma * herePSHAB20SigmaEpistemic)
            herePSHAB20MedianPlusNsigmaxSigmaEpistemic = math.exp(
                math.log(herePSHAB20MedianPSA) + thisNsigma * herePSHAB20SigmaEpistemic)
            outSensitivityData.append(
                [thisCaseVariable, thisCaseLabel, thisCaseLabelRegion, thisMagnitude, thisVs30, thisRegion, thisRrup, thisAlphaBackarc,
                 thisAlphaNankai, thisZtor, thisSeatBasn, thisZ1pt0, thisZ2pt5, thisNsampleEpi, thisMb, thisZhypo,
                 thisSubductionSlab, thisPNWbasinStrux, thisNsigma, thisEventType, thisT, hereKBCG20MedianPSA,
                 hereKBCG20Tau, hereKBCG20Phi, hereKBCG20SigmaAleatory, hereKBCG20SigmaEpistemic, hereKBCG20SigmaTotal,
                 hereKBCG20MedianMinusNsigmaxSigmaTotal, hereKBCG20MedianPlusNsigmaxSigmaTotal,
                 hereKBCG20MedianMinusNsigmaxSigmaAleatory, hereKBCG20MedianPlusNsigmaxSigmaAleatory,
                 hereKBCG20MedianMinusNsigmaxSigmaEpistemic, hereKBCG20MedianPlusNsigmaxSigmaEpistemic,
                 herePSHAB20MedianPSA, herePSHAB20Tau, herePSHAB20PhiTot, herePSHAB20PhiS2S, herePSHAB20PhiSS,
                 herePSHAB20SigmaAleatory, herePSHAB20SigmaEpistemic, herePSHAB20SigmaTotal, herePSHAB20MedianMinusNsigmaxSigmaTotal,
                 herePSHAB20MedianPlusNsigmaxSigmaTotal, herePSHAB20MedianMinusNsigmaxSigmaAleatory,
                 herePSHAB20MedianPlusNsigmaxSigmaAleatory, herePSHAB20MedianMinusNsigmaxSigmaEpistemic,
                 herePSHAB20MedianPlusNsigmaxSigmaEpistemic])

    # end    # for irow
    # end    # for iset
    if printSwitch:
	    print('Sensitivity-Study Data:')
    outSensitivityTable = pd.DataFrame(outSensitivityData)
    outSensitivityTable.columns = ['CaseVariable','CaseLabel', 'CaseLabelRegion', 'Mag', 'Vs30mps', 'Reg', 'Rrup_km', 'alpBack',
                                   'alpNank', 'Ztor_km', 'SeatBasn', 'Z1pt0m', 'Z2pt5m', 'NsplEpi', 'Mbreak',
                                   'Zhypo_km', 'SatReg', 'Basin', 'Nsigma', 'InterIntra', 'Period_sec',
                                   'KBCG20MedianPSA', 'KBCG20Tau', 'KBCG20Phi', 'KBCG20SigmaAleatory',
                                   'KBCG20SigmaEpistemic', 'KBCG20SigmaTotal', 'KBCG20MedianMinusNsigmaxSigmaTotal',
                                   'KBCG20MedianPlusNsigmaxSigmaTotal', 'KBCG20MedianMinusNsigmaxSigmaAleatory',
                                   'KBCG20MedianPlusNsigmaxSigmaAleatory', 'KBCG20MedianMinusNsigmaxSigmaEpistemic',
                                   'KBCG20MedianPlusNsigmaxSigmaEpistemic', 'PSHAB20MedianPSA', 'PSHAB20Tau',
                                   'PSHAB20PhiTot', 'PSHAB20PhiS2S', 'PSHAB20PhiSS', 'PSHAB20SigmaAleatory', 'PSHAB20SigmaEpistemic',
                                   'PSHAB20SigmaTotal', 'PSHAB20MedianMinusNsigmaxSigmaTotal',
                                   'PSHAB20MedianPlusNsigmaxSigmaTotal', 'PSHAB20MedianMinusNsigmaxSigmaAleatory',
                                   'PSHAB20MedianPlusNsigmaxSigmaAleatory',
                                   'PSHAB20MedianMinusNsigmaxSigmaEpistemic',
                                   'PSHAB20MedianPlusNsigmaxSigmaEpistemic']
    blankIndex = [''] * len(outSensitivityTable)
    outSensitivityTable.index = blankIndex
    if printSwitch:
	    print(outSensitivityTable)
	    print('done!')
    return outSensitivityTable


# end


# #############################################################
# the following commands compute the output values at each period and generate a figure of the data
# The user may edit these lines, if needed
# #############################################################
# Compute Values at each Period
def RunScenarioStudy(User_Region, User_SubductionSlab, User_Magnitude, User_Vs30, User_Rrup, User_AlphaBackarc,\
                     User_AlphaNankai, User_Ztor, User_Zhypo, User_EventType, User_Z1pt0, User_Z2pt5, User_Mb,\
                     User_PNWbasinStrux, User_RelativeWeight_KBCG20, User_RelativeWeight_PSHAB20,\
                     User_EpiInSigmaModels, User_NsampleEpi, User_Nsigma, User_PeriodList,printSwitch = False):
    import NGAsubGMM
    import math
    import pandas as pd
    UserInputArray = [User_Region, User_SubductionSlab, User_Magnitude, User_Vs30, User_Rrup, User_AlphaBackarc,\
                      User_AlphaNankai, User_Ztor, User_Zhypo, User_EventType, User_Z1pt0, User_Z2pt5, User_Mb,\
                      User_PNWbasinStrux, User_RelativeWeight_KBCG20, User_RelativeWeight_PSHAB20,\
                      User_EpiInSigmaModels, User_NsampleEpi, User_Nsigma]
    outTlist = []
    outMedianList = []
    outSigmaList = []
    outMedianMinusNSigmaList = []
    outMedianPlusNSigmaList = []
    outWeightedAvgData = []
    outIndivModelData = []
    if printSwitch:
        print(' ### Computing Spectra for Single Scenario')
    # print('Period_(s)','PSA_median_(g)','Sigma','PSA_median-N*Sigma_(g)','PSA_median+N*Sigma_(g)')
    for irow in range(len(User_PeriodList)):
        thisT = NGAsubGMM.getTFvalue(User_PeriodList[irow])
        outTlist.append(thisT)

        PSA = NGAsubGMM.NGAsubGMM_MedianPlusMinusSigma(thisT, User_Region, User_Magnitude, User_Vs30, User_Rrup, User_AlphaBackarc,
                               User_AlphaNankai, User_Ztor, User_Zhypo, User_EventType, User_Z1pt0, User_Z2pt5, User_Mb,
                               User_SubductionSlab, User_PNWbasinStrux, User_RelativeWeight_KBCG20,
                               User_RelativeWeight_PSHAB20, 0,0,0)
        outMedianMinusNSigma = NGAsubGMM.NGAsubGMM_MedianPlusMinusSigma(thisT, User_Region, User_Magnitude, User_Vs30, User_Rrup, User_AlphaBackarc,
                               User_AlphaNankai, User_Ztor, User_Zhypo, User_EventType, User_Z1pt0, User_Z2pt5, User_Mb,
                               User_SubductionSlab, User_PNWbasinStrux, User_RelativeWeight_KBCG20,
                               User_RelativeWeight_PSHAB20, -1*User_Nsigma,User_EpiInSigmaModels,User_NsampleEpi)
        outMedianPlusNSigma = NGAsubGMM.NGAsubGMM_MedianPlusMinusSigma(thisT, User_Region, User_Magnitude, User_Vs30, User_Rrup, User_AlphaBackarc,
                               User_AlphaNankai, User_Ztor, User_Zhypo, User_EventType, User_Z1pt0, User_Z2pt5, User_Mb,
                               User_SubductionSlab, User_PNWbasinStrux, User_RelativeWeight_KBCG20,
                               User_RelativeWeight_PSHAB20, +1*User_Nsigma,User_EpiInSigmaModels,User_NsampleEpi)
        outWeightedAvgData.append([thisT, PSA, outMedianMinusNSigma, outMedianPlusNSigma])

        #### Individual-Model Data:
        Prog_MbDefault = NGAsubGMM.getMbDefault("KBCG20", User_EventType, User_Region, User_SubductionSlab)
        if str(User_Mb).lower() == "default".lower():
            inUser_Mb = Prog_MbDefault
        else:
            inUser_Mb = User_Mb
        # end
        outKBCG20_MedianPSA = NGAsubGMM.KBCG20_medPSA(thisT, User_Magnitude, User_Rrup, User_AlphaBackarc, User_AlphaNankai,
                                            User_Ztor, User_EventType, User_Vs30, User_Z1pt0, User_Z2pt5, inUser_Mb,
                                            User_Region, User_PNWbasinStrux)
        outKBCG20_Tau = NGAsubGMM.KBCG20_sigmaTau(thisT)
        outKBCG20_Phi = NGAsubGMM.KBCG20_sigmaPhi(thisT)
        outKBCG20_SigmaAleatory = NGAsubGMM.KBCG20_sigmaAleatory(thisT)
        outKBCG20_SigmaEpistemic = NGAsubGMM.KBCG20_SigmaEpistemic(thisT, User_Magnitude, User_Rrup, User_AlphaBackarc,
                                                         User_AlphaNankai, User_Ztor, User_EventType, User_Vs30,
                                                         User_Z1pt0, User_Z2pt5, inUser_Mb, User_Region,
                                                         User_NsampleEpi, User_PNWbasinStrux)
        outKBCG20_SigmaTotal = NGAsubGMM.KBCG20_SigmaTotal(thisT, User_Magnitude, User_Rrup, User_AlphaBackarc, User_AlphaNankai,
                                                 User_Ztor, User_EventType, User_Vs30, User_Z1pt0, User_Z2pt5,
                                                 inUser_Mb, User_Region, User_NsampleEpi, User_PNWbasinStrux)
        outKBCG20_Median_minus_1_SigmaTotal = math.exp(
            math.log(outKBCG20_MedianPSA) - User_Nsigma * outKBCG20_SigmaTotal)
        outKBCG20_Median_plus_1_SigmaTotal = math.exp(
            math.log(outKBCG20_MedianPSA) + User_Nsigma * outKBCG20_SigmaTotal)
        outKBCG20_Median_minus_1_SigmaAleatory = math.exp(
            math.log(outKBCG20_MedianPSA) - User_Nsigma * outKBCG20_SigmaAleatory)
        outKBCG20_Median_plus_1_SigmaAleatory = math.exp(
            math.log(outKBCG20_MedianPSA) + User_Nsigma * outKBCG20_SigmaAleatory)
        outKBCG20_Median_minus_1_SigmaEpistemic = math.exp(
            math.log(outKBCG20_MedianPSA) - User_Nsigma * outKBCG20_SigmaEpistemic)
        outKBCG20_Median_plus_1_SigmaEpistemic = math.exp(
            math.log(outKBCG20_MedianPSA) + User_Nsigma * outKBCG20_SigmaEpistemic)
        outPSHAB20_MedianPSA= NGAsubGMM.PSHAB20_Median(User_EventType, User_Region, User_SubductionSlab, User_Rrup,
                                              User_Magnitude, User_Zhypo, thisT, User_Vs30, User_Z2pt5,
                                              User_PNWbasinStrux)
        outPSHAB20_Tau= NGAsubGMM.PSHAB20_Tau(thisT, User_Rrup, User_Vs30)
        outPSHAB20_PhiTot= NGAsubGMM.PSHAB20_PhiTot(thisT, User_Rrup, User_Vs30)
        outPSHAB20_PhiS2S= NGAsubGMM.PSHAB20_SigmaS2S(thisT, User_Rrup, User_Vs30)
        outPSHAB20_PhiSS= NGAsubGMM.PSHAB20_SigmaSS(thisT, User_Rrup, User_Vs30)
        outPSHAB20_SigmaAleatory= NGAsubGMM.PSHAB20_SigmaAleatory(thisT, User_Rrup, User_Vs30)
        outPSHAB20_SigmaEpistemic= NGAsubGMM.PSHAB20_SigmaEpistemic(thisT, User_EventType, User_SubductionSlab)
        outPSHAB20_SigmaTotal= NGAsubGMM.PSHAB20_SigmaTotal(thisT, User_Rrup,  User_Vs30, User_EventType, User_SubductionSlab )
        outPSHAB20_Median_minus_1_SigmaTotal = math.exp(
            math.log(outPSHAB20_MedianPSA) - User_Nsigma * outPSHAB20_SigmaTotal)
        outPSHAB20_Median_plus_1_SigmaTotal = math.exp(
            math.log(outPSHAB20_MedianPSA) + User_Nsigma * outPSHAB20_SigmaTotal)
        outPSHAB20_Median_minus_1_SigmaAleatory = math.exp(
            math.log(outPSHAB20_MedianPSA) - User_Nsigma * outPSHAB20_SigmaAleatory)
        outPSHAB20_Median_plus_1_SigmaAleatory = math.exp(
            math.log(outPSHAB20_MedianPSA) + User_Nsigma * outPSHAB20_SigmaAleatory)
        outPSHAB20_Median_minus_1_SigmaEpistemic = math.exp(
            math.log(outPSHAB20_MedianPSA) - User_Nsigma * outKBCG20_SigmaEpistemic)
        outPSHAB20_Median_plus_1_SigmaEpistemic = math.exp(
            math.log(outPSHAB20_MedianPSA) + User_Nsigma * outKBCG20_SigmaEpistemic)
        outIndivModelData.append([thisT, outKBCG20_MedianPSA, outKBCG20_Tau, outKBCG20_Phi, outKBCG20_SigmaAleatory,
                                  outKBCG20_SigmaEpistemic, outKBCG20_SigmaTotal, outKBCG20_Median_minus_1_SigmaTotal,
                                  outKBCG20_Median_plus_1_SigmaTotal, outKBCG20_Median_minus_1_SigmaAleatory,
                                  outKBCG20_Median_plus_1_SigmaAleatory, outKBCG20_Median_minus_1_SigmaEpistemic,
                                  outKBCG20_Median_plus_1_SigmaEpistemic, outPSHAB20_MedianPSA, outPSHAB20_Tau,
                                  outPSHAB20_PhiTot, outPSHAB20_PhiS2S, outPSHAB20_PhiSS, outPSHAB20_SigmaAleatory, outPSHAB20_SigmaEpistemic,
                                  outPSHAB20_SigmaTotal, outPSHAB20_Median_minus_1_SigmaTotal,
                                  outPSHAB20_Median_plus_1_SigmaTotal, outPSHAB20_Median_minus_1_SigmaAleatory,
                                  outPSHAB20_Median_plus_1_SigmaAleatory, outPSHAB20_Median_minus_1_SigmaEpistemic,outPSHAB20_Median_plus_1_SigmaEpistemic])
        
        
    if printSwitch:
        print('Scenario Input Data:')
    UserInputDataRows = ['Region', 'SubductionSlab', 'Magnitude', 'Vs30', 'Rrup', 'AlphaBackarc', 'AlphaNankai', 'Ztor',
                         'Zhypo', 'EventType', 'Z1pt0', 'Z2pt5', 'Mb', 'PNWbasinStrux', 'RelativeWeight_KBCG20',
                         'RelativeWeight_PSHAB20', 'EpiInSigmaModels', 'NsampleEpi', 'Nsigma']
    UserInputTable = pd.DataFrame(UserInputArray, index=UserInputDataRows)
    UserInputTable.columns = ['User Input']
    UserInputTable.index = UserInputDataRows
    if printSwitch:
        print(UserInputTable)
        print('Scenario Weighted-Average Data:')
    outWeightedAvgTable = pd.DataFrame(outWeightedAvgData)
    outWeightedAvgTable.columns = ['Period_(s)', 'PSA_median_(g)', 'PSA_median-N*Sigma_(g)',
                                   'PSA_median+N*Sigma_(g)']
    blankIndex = [''] * len(outWeightedAvgTable)
    outWeightedAvgTable.index = blankIndex
    if printSwitch:
        print(outWeightedAvgTable)
        print('Scenario Individual-Model Data:')
    outIndivModelTable = pd.DataFrame(outIndivModelData)
    outIndivModelTable.columns = ['Period_s', 'KBCG20_MedianPSA', 'KBCG20_Tau', 'KBCG20_Phi', 'KBCG20_SigmaAleatory',
                                  'KBCG20_SigmaEpistemic', 'KBCG20_SigmaTotal', 'KBCG20_Median_minus_1*SigmaTotal',
                                  'KBCG20_Median_plus_1*SigmaTotal', 'KBCG20_Median_minus_1*SigmaAleatory',
                                  'KBCG20_Median_plus_1*SigmaAleatory', 'KBCG20_Median_minus_1*SigmaEpistemic',
                                  'KBCG20_Median_plus_1*SigmaEpistemic', 'PSHAB20_MedianPSA', 'PSHAB20_Tau',
                                  'PSHAB20_PhiTot', 'PSHAB20_PhiS2S', 'PSHAB20_PhiSS', 'PSHAB20_SigmaAleatory', 'PSHAB20_SigmaEpistemic',
                                  'PSHAB20_SigmaTotal', 'PSHAB20_Median_minus_1*SigmaTotal',
                                  'PSHAB20_Median_plus_1*SigmaTotal', 'PSHAB20_Median_minus_1*SigmaAleatory',
                                  'PSHAB20_Median_plus_1*SigmaAleatory', 'PSHAB20_Median_minus_1*SigmaEpistemic',
                                  'PSHAB20_Median_plus_1*SigmaEpistemic']
    blankIndex = [''] * len(outIndivModelTable)
    outIndivModelTable.index = blankIndex
    if printSwitch:
        print(outIndivModelTable)
        print('done!')
    return UserInputTable,outWeightedAvgTable,outIndivModelTable


# end

def formatAx(axModel,Title,xLabel,yLabel,titleFontSize = 12, otherFontSize = 12):
    axModel.grid(True,color='grey')
    handles, labels = axModel.get_legend_handles_labels()
    if len(handles)>0:
        axModel.legend(fontsize=otherFontSize)
    axModel.set_title(Title, fontsize=titleFontSize)
    axModel.set_xlabel(xLabel, fontsize=otherFontSize)
    axModel.set_ylabel(yLabel, fontsize=otherFontSize)            
    axModel.tick_params('x', labelsize=otherFontSize, rotation=0)
    axModel.tick_params('y', labelsize=otherFontSize, rotation=0)
    
def formatPltScale(plt,xscale,yscale):
    plt.xscale(xscale)
    plt.yscale(yscale)
    

def RunNGAsubScenario_Button_clicked(b):
    global WidgetBasket,OutputBasket
    ClearOutput_Button_clicked(b)
    RunScenarioStudyFromWidgetBasket(WidgetBasket,OutputBasket)
    return 0    
    
def ClearOutput_Button_clicked(b):
    from IPython.display import clear_output
    from IPython.display import display 
    global WidgetBasket
    OutputSpace = WidgetBasket['OutputSpace']
    clear_output(wait=True)
    for i in range(10):
        OutputSpace.clear_output()
    display(WidgetBasket['ModelContainer'])
    #display(OutputSpace)
    return 0    
        
def makeNGAsubGMMInputWidgetBasket():
    #########################################################################################
    #########################################################################################
    #########################################################################################
    # program
    #  DO NOT edit lines below!!!
    #  scroll to the bottom of the script
    #########################################################################################
    
    import BraineryBytes as BB
    from ipywidgets import widgets, Output
    from IPython.display import display    
    
    global WidgetBasket
    global OutputBasket
    WidgetBasket = {}
    OutputBasket = {}
    OutputBasket['UserInputTable'] = {}
    OutputBasket['outWeightedAvgTable'] = {}
    OutputBasket['outIndivModelTable'] = {}
    
    thisDefaut = '0_Global'
    thisOptions = ['0_Global', '1_Alaska', '2_Cascadia', '3_CentralAmerica&Mexico', '4_Japan', '5_NewZealand', '6_SouthAmerica', '7_Taiwan']
    thisDescript = 'Region'
    Container_Region,WidgetBasket['Region'] = BB.makeDropdownMenu(thisDefaut,thisOptions,thisDescript,'H')
    
    thisDefaut = 'Global'
    thisOptions = ['Alaska','Aleutian','Cascadia','Central_America_N','Central_America_S','Global','Japan_Pac','Japan_Phi','New_Zealand_N','New_Zealand_S','South_America_N','South_America_S','Taiwan_E','Taiwan_W']
    thisDescript = 'Subducting Slab'
    Container_SubductionSlab,WidgetBasket['SubductionSlab'] = BB.makeDropdownMenu(thisDefaut,thisOptions,thisDescript,'H')
    
    Container_Magnitude, WidgetBasket['Magnitude'] = BB.makeFloatEntryWidget(8,'Moment Magnitude','H')
    Container_Vs30, WidgetBasket['Vs30'] = BB.makeFloatEntryWidget(760,'VS30 (m/sec)','H')
    Container_Rrup, WidgetBasket['Rrup'] = BB.makeFloatEntryWidget(200,'Rupture Distance (km)','H')
    Container_AlphaBackarc, WidgetBasket['AlphaBackarc'] = BB.makeFloatEntryWidget(0,'Fraction of Rrup in Backarc (Range: 0-1)','H')
    Container_AlphaNankai, WidgetBasket['AlphaNankai'] = BB.makeFloatEntryWidget(0,'Fraction of Rrup in Nankai Region (Range: 0-(1-AlphaBackArc))(Japan only)','H')
    Container_Ztor, WidgetBasket['Ztor'] = BB.makeFloatEntryWidget(10,'Z_tor (km) (KBCG20 only)','H')
    Container_Zhypo, WidgetBasket['Zhypo'] = BB.makeFloatEntryWidget(55,'Hypocentral Depth (km) (PSHAB20 only)','H')
    
    thisDefaut = '0_Interface'
    thisOptions = ['0_Interface', '1_Intraslab']
    thisDescript = 'Event Type'
    Container_EventType,WidgetBasket['EventType'] = BB.makeDropdownMenu(thisDefaut,thisOptions,thisDescript,'H')
    
    Container_Z1pt0, WidgetBasket['Z1pt0'] = BB.makeFloatEntryWidget(550,'Z1.0 input (m) (KBCG20 only)','H')
    Container_Z2pt5, WidgetBasket['Z2pt5'] = BB.makeFloatEntryWidget(2000,'Z2.5 input (m)','H')
    Container_Mb, WidgetBasket['Mb'] = BB.makeFloatEntryWidget(7.9,'Mb (KBCG20 only, can set = default)','H')
    
    thisDefaut = '0_NoBasin'
    thisOptions = ['0_NoBasin','1_InSeattleBasin','2_InOtherPNWbasin']
    thisDescript = 'PNW Basin Structure'
    Container_PNWbasinStrux,WidgetBasket['PNWbasinStrux'] = BB.makeDropdownMenu(thisDefaut,thisOptions,thisDescript,'H')
    
    Container_RelativeWeight_KBCG20, WidgetBasket['RelativeWeight_KBCG20'] = BB.makeFloatEntryWidget(1,'Relative Weight -- KBCG20 ','H')
    Container_RelativeWeight_PSHAB20, WidgetBasket['RelativeWeight_PSHAB20'] = BB.makeFloatEntryWidget(1,'Relative Weight -- PSHAB20 ','H')
    
    thisDefaut = '0_No'
    thisOptions = ['0_No','1_Yes']
    thisDescript = 'Apply Epistemic Uncertainty to Sigma Models'
    Container_EpiInSigmaModels,WidgetBasket['EpiInSigmaModels'] = BB.makeDropdownMenu(thisDefaut,thisOptions,thisDescript,'H')
    
    Container_NsampleEpi, WidgetBasket['NsampleEpi'] = BB.makeFloatEntryWidget(100,'Number of Samples in KBCG20 Epistemic-Uncertainty Calculation (0=none, Range: 100-800)','H')
    Container_Nsigma, WidgetBasket['Nsigma'] = BB.makeFloatEntryWidget(1.25,'Number of Sigma away from Median','H')
    
    thisDefaut = 'Log'
    thisOptions = ['Linear','Log-Linear','Linear-Log','Log']
    thisDescript = 'Plot Scales'
    Container_PlotScales,WidgetBasket['PlotScales']  = BB.makeDropdownMenu(thisDefaut,thisOptions,thisDescript,'H')
    
    
    Container_PeriodList, WidgetBasket['PeriodList'] = BB.makeFloatEntryWidget('0.01, 0.02, 0.03, 0.05, 0.075, 0.1, 0.15, 0.2, 0.25, 0.3, 0.4, 0.5, 0.75, 1, 1.5, 2, 3, 4, 5, 7.5,10,0,-1','List of Periods. range:0.01-10sec (PGA: T=0, PGV: T=-1)','H')
    

    RunNGAsubScenario_Button=widgets.Button(
        description = 'Run',
        #layout=widgets.Layout(width='50%', height='40px'),
        style= {'button_color':'#FCCCEF'}
    )
    RunNGAsubScenario_Button.style.font_weight = 'bold'
    RunNGAsubScenario_Button.add_class("mytext")
    RunNGAsubScenario_Button.on_click(RunNGAsubScenario_Button_clicked)
    WidgetBasket['RunButton'] = RunNGAsubScenario_Button

    ClearOutput_Button=widgets.Button(
        description = 'Clear output',
        #layout=widgets.Layout(width='50%', height='40px'),
        style= {'button_color':'#FCCCEF'}
    )
    ClearOutput_Button.style.font_weight = 'bold'
    ClearOutput_Button.add_class("mytext")
    ClearOutput_Button.on_click(ClearOutput_Button_clicked)
    WidgetBasket['ClearOutput'] = ClearOutput_Button

    ott0 = Output()
    WidgetBasket['OutputSpace'] = ott0
    
    ModelContainer4 = widgets.HBox(display='wrap',flex_wrap='wrap',children=[RunNGAsubScenario_Button,ClearOutput_Button])

    ModelContainer = widgets.VBox(display='wrap',flex_wrap='wrap',children=[Container_Region,Container_SubductionSlab,Container_Magnitude,Container_Vs30,Container_Rrup,Container_AlphaBackarc,Container_AlphaNankai,Container_Ztor,Container_Zhypo,Container_EventType,Container_Z1pt0,Container_Z2pt5,Container_Mb,Container_PNWbasinStrux,Container_RelativeWeight_KBCG20,Container_RelativeWeight_PSHAB20,Container_EpiInSigmaModels,Container_NsampleEpi,Container_Nsigma,Container_PeriodList,Container_PlotScales,ModelContainer4])
    
    display(ModelContainer)
    WidgetBasket['ModelContainer'] = ModelContainer    
    return WidgetBasket,OutputBasket

def RunScenarioStudyFromWidgetBasket(WidgetBasket,OutputBasket):
    import BraineryBytes as BB
    import NGAsubGMM
    import matplotlib.pyplot as plt
    from IPython.display import display  
    import pandas as pd
    
    global UserInputTable,outWeightedAvgTable,outIndivModelTable
    
    pd.set_option('display.max_rows', None)
    pd.set_option('display.max_columns', None)
    desired_width=320
    pd.set_option('display.width', desired_width)
    #pd.set_option('display.max_columns',60)    
    
    [titleFontSize,otherFontSize]=[8,6]
    User_Region = BB.convertType(WidgetBasket['Region'].value,'str');   # Region (Options: 0_Global, 1_Alaska, 2_Cascadia, 3_CentralAmerica&Mexico, 4_Japan, 5_NewZealand (PSHAB20 uses global model), 6_SouthAmerica, 7_Taiwan)
    User_SubductionSlab = BB.convertType(WidgetBasket['SubductionSlab'].value,'str');   # Subducting Slab (used to compute Mb) (Alaska,Aleutian,Cascadia,Central_America_N,Central_America_S,global,Japan_Pac,Japan_Phi,New_Zealand_N,New_Zealand_S,South_America_N,South_America_S,Taiwan_E,Taiwan_W)
    User_Magnitude = BB.convertType(WidgetBasket['Magnitude'].value,'float');   # Moment Magnitude
    User_Vs30 = BB.convertType(WidgetBasket['Vs30'].value,'float');   # VS30 (m/sec)
    User_Rrup = BB.convertType(WidgetBasket['Rrup'].value,'float');   # Rupture Distance (km)
    User_AlphaBackarc = BB.convertType(WidgetBasket['AlphaBackarc'].value,'float');   # Fraction of Rrup in Backarc (Range: 0-1)
    User_AlphaNankai = BB.convertType(WidgetBasket['AlphaNankai'].value,'float');   # Fraction of Rrup in Nankai Region (Range: 0-(1-AlphaBackArc))(Japan only)
    User_Ztor = BB.convertType(WidgetBasket['Ztor'].value,'float');   # Z_tor (km) (KBCG20 only)
    User_Zhypo = BB.convertType(WidgetBasket['Zhypo'].value,'float');   # Hypocentral Depth (km) (PSHAB20 only)
    User_EventType = BB.convertType(WidgetBasket['EventType'].value,'str');   # Event Type, (Options: 0_Interface, 1_Intraslab)
    User_Z1pt0 = BB.convertType(WidgetBasket['Z1pt0'].value,'float');   # Z1.0 input (m) (KBCG20 only)
    User_Z2pt5 = BB.convertType(WidgetBasket['Z2pt5'].value,'float');   # Z2.5 input (m)
    User_Mb = BB.convertType(WidgetBasket['Mb'].value,'float');   # Mb (KBCG20 only, can set = default)
    User_PNWbasinStrux = BB.convertType(WidgetBasket['PNWbasinStrux'].value,'str');   # PNW Basin Structure (Options: 0_NoBasin,1_InSeattleBasin,2_InOtherPNWbasin)(Cascadia Only)
    User_RelativeWeight_KBCG20 = BB.convertType(WidgetBasket['RelativeWeight_KBCG20'].value,'float');   # Relative Weight -- KBCG20 
    User_RelativeWeight_PSHAB20 = BB.convertType(WidgetBasket['RelativeWeight_PSHAB20'].value,'float');   # Relative Weight -- PSHAB20
    User_EpiInSigmaModels = BB.convertType(WidgetBasket['EpiInSigmaModels'].value,'str');   # Apply Epistemic Uncertainty to Sigma Models (Options: 0_None, 1_AllModels)
    User_NsampleEpi = BB.convertType(WidgetBasket['NsampleEpi'].value,'int');   # Number of Samples in Epistemic-Uncertainty Calculation (0=none, Range: 100-800)
    User_Nsigma = BB.convertType(WidgetBasket['Nsigma'].value,'float');   # Number of Sigma away from Median
    
    
    User_PeriodList = BB.convertType(WidgetBasket['PeriodList'].value,'floatArray');   # range:0.01-10sec (PGA: T=0, PGV: T=-1)


    UserInputTable,outWeightedAvgTable,outIndivModelTable = NGAsubGMM.RunScenarioStudy(User_Region, User_SubductionSlab, User_Magnitude, User_Vs30, User_Rrup, User_AlphaBackarc,\
                     User_AlphaNankai, User_Ztor, User_Zhypo, User_EventType, User_Z1pt0, User_Z2pt5, User_Mb,\
                     User_PNWbasinStrux, User_RelativeWeight_KBCG20, User_RelativeWeight_PSHAB20,\
                     User_EpiInSigmaModels, User_NsampleEpi, User_Nsigma, User_PeriodList,False)
        
    PlotScales = WidgetBasket['PlotScales'].value
    Period_scale='linear'   # options: 'log','linear'
    PSA_scale='linear'   # options: 'log','linear'
    if PlotScales in ['Linear-Log','Log']:
        PSA_scale='log'   # options: 'log','linear'
    if PlotScales in ['Log-Linear','Log']:
        Period_scale='log'   # options: 'log','linear'  
        
    OutputBasket['UserInputTable'] = UserInputTable
    OutputBasket['outWeightedAvgTable'] = outWeightedAvgTable
    OutputBasket['outIndivModelTable'] = outIndivModelTable
    OutputSpace = WidgetBasket['OutputSpace']
    thisIndexList = [idx for idx,t in enumerate(OutputBasket['outWeightedAvgTable']['Period_(s)']) if t>0]
    with OutputSpace: 
        thisFig = plt.figure('Weighted Spectra',figsize=(4,3), dpi=200)
        thisAx = thisFig.add_subplot(1,1,1)
        thisLine, = thisAx.plot(outWeightedAvgTable['Period_(s)'][thisIndexList],outWeightedAvgTable['PSA_median_(g)'][thisIndexList],'k')
        thisLine, = thisAx.plot(outWeightedAvgTable['Period_(s)'][thisIndexList],outWeightedAvgTable['PSA_median-N*Sigma_(g)'][thisIndexList],'k--')
        thisLine, = thisAx.plot(outWeightedAvgTable['Period_(s)'][thisIndexList],outWeightedAvgTable['PSA_median+N*Sigma_(g)'][thisIndexList],'k--')
        
        NGAsubGMM.formatAx(thisAx,'Weighted Spectra','Period (sec)','PSA (g)',titleFontSize,otherFontSize)
        NGAsubGMM.formatPltScale(plt,Period_scale,PSA_scale)
        
        thisFig = plt.figure('All Spectra',figsize=(4,3), dpi=200)
        thisAx = thisFig.add_subplot(1,1,1)
        thisLine, = thisAx.plot(outIndivModelTable['Period_s'][thisIndexList],outIndivModelTable['KBCG20_MedianPSA'][thisIndexList],'b',label = 'KBCG20',linewidth = 1)
        thisLine, = thisAx.plot(outIndivModelTable['Period_s'][thisIndexList],outIndivModelTable['KBCG20_Median_plus_1*SigmaTotal'][thisIndexList],'b--',linewidth = 1)
        thisLine, = thisAx.plot(outIndivModelTable['Period_s'][thisIndexList],outIndivModelTable['KBCG20_Median_minus_1*SigmaTotal'][thisIndexList],'b--',linewidth = 1)
        thisLine, = thisAx.plot(outIndivModelTable['Period_s'][thisIndexList],outIndivModelTable['PSHAB20_MedianPSA'][thisIndexList],'r',label = 'PSHAB20',linewidth = 1)
        thisLine, = thisAx.plot(outIndivModelTable['Period_s'][thisIndexList],outIndivModelTable['PSHAB20_Median_plus_1*SigmaTotal'][thisIndexList],'r--',linewidth = 1)
        thisLine, = thisAx.plot(outIndivModelTable['Period_s'][thisIndexList],outIndivModelTable['PSHAB20_Median_minus_1*SigmaTotal'][thisIndexList],'r--',linewidth = 1)
        thisLine, = thisAx.plot(outWeightedAvgTable['Period_(s)'][thisIndexList],outWeightedAvgTable['PSA_median_(g)'][thisIndexList],'k',label = 'Weighted',linewidth = 1.5)
        thisLine, = thisAx.plot(outWeightedAvgTable['Period_(s)'][thisIndexList],outWeightedAvgTable['PSA_median-N*Sigma_(g)'][thisIndexList],'k--',linewidth = 1.5)
        thisLine, = thisAx.plot(outWeightedAvgTable['Period_(s)'][thisIndexList],outWeightedAvgTable['PSA_median+N*Sigma_(g)'][thisIndexList],'k--',linewidth = 1.5)
        
        
        NGAsubGMM.formatAx(thisAx,'All Spectra','Period (sec)','PSA (g)',titleFontSize,otherFontSize)
        NGAsubGMM.formatPltScale(plt,Period_scale,PSA_scale)
        
        display("OutputBasket['UserInputTable']")
        display(UserInputTable)
        display("OutputBasket['outWeightedAvgTable']")
        display(outWeightedAvgTable)
        display("OutputBasket['outIndivModelTable']")
        display(outIndivModelTable)
        
    return OutputBasket


