
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDleftORrightNOTAND COMMA COMPARE DATE DOUBLE_QUOTE_WORD FLOAT IN INT LBRACK LPAREN NOT OR RBRACK RPAREN SINGLE_QUOTE_WORD WORDexpression : LPAREN expression RPARENexpression : variable COMPARE valueexpression : variable IN listlist : LBRACK list_vals RBRACKlist_vals : value COMMA value\n                     | list_vals COMMA valueexpression : NOT expressionexpression : expression AND expressionexpression : expression OR expressionvalue : variable\n                 | number\n                 | DATEvariable : WORD\n                    | SINGLE_QUOTE_WORD\n                    | DOUBLE_QUOTE_WORDnumber : INT\n                  | FLOAT'
    
_lr_action_items = {'LPAREN':([0,2,4,8,9,],[2,2,2,2,2,]),'NOT':([0,2,4,8,9,],[4,4,4,4,4,]),'WORD':([0,2,4,8,9,11,24,28,29,],[5,5,5,5,5,5,5,5,5,]),'SINGLE_QUOTE_WORD':([0,2,4,8,9,11,24,28,29,],[6,6,6,6,6,6,6,6,6,]),'DOUBLE_QUOTE_WORD':([0,2,4,8,9,11,24,28,29,],[7,7,7,7,7,7,7,7,7,]),'$end':([1,5,6,7,13,14,15,16,17,18,19,20,21,22,23,27,],[0,-13,-14,-15,-7,-8,-9,-1,-10,-2,-11,-12,-16,-17,-3,-4,]),'AND':([1,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,27,],[8,-13,-14,-15,8,-7,-8,-9,-1,-10,-2,-11,-12,-16,-17,-3,-4,]),'OR':([1,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,27,],[9,-13,-14,-15,9,-7,9,-9,-1,-10,-2,-11,-12,-16,-17,-3,-4,]),'COMPARE':([3,5,6,7,],[11,-13,-14,-15,]),'IN':([3,5,6,7,],[12,-13,-14,-15,]),'RPAREN':([5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,27,],[-13,-14,-15,16,-7,-8,-9,-1,-10,-2,-11,-12,-16,-17,-3,-4,]),'COMMA':([5,6,7,17,19,20,21,22,25,26,30,31,],[-13,-14,-15,-10,-11,-12,-16,-17,28,29,-6,-5,]),'RBRACK':([5,6,7,17,19,20,21,22,25,30,31,],[-13,-14,-15,-10,-11,-12,-16,-17,27,-6,-5,]),'DATE':([11,24,28,29,],[20,20,20,20,]),'INT':([11,24,28,29,],[21,21,21,21,]),'FLOAT':([11,24,28,29,],[22,22,22,22,]),'LBRACK':([12,],[24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,8,9,],[1,10,13,14,15,]),'variable':([0,2,4,8,9,11,24,28,29,],[3,3,3,3,3,17,17,17,17,]),'value':([11,24,28,29,],[18,26,30,31,]),'number':([11,24,28,29,],[19,19,19,19,]),'list':([12,],[23,]),'list_vals':([24,],[25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','parser.py',39),
  ('expression -> variable COMPARE value','expression',3,'p_expression_compare','parser.py',44),
  ('expression -> variable IN list','expression',3,'p_expression_in','parser.py',67),
  ('list -> LBRACK list_vals RBRACK','list',3,'p_list','parser.py',86),
  ('list_vals -> value COMMA value','list_vals',3,'p_list_vals','parser.py',91),
  ('list_vals -> list_vals COMMA value','list_vals',3,'p_list_vals','parser.py',92),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',106),
  ('expression -> expression AND expression','expression',3,'p_expression_and','parser.py',111),
  ('expression -> expression OR expression','expression',3,'p_expression_or','parser.py',116),
  ('value -> variable','value',1,'p_value','parser.py',128),
  ('value -> number','value',1,'p_value','parser.py',129),
  ('value -> DATE','value',1,'p_value','parser.py',130),
  ('variable -> WORD','variable',1,'p_variable','parser.py',135),
  ('variable -> SINGLE_QUOTE_WORD','variable',1,'p_variable','parser.py',136),
  ('variable -> DOUBLE_QUOTE_WORD','variable',1,'p_variable','parser.py',137),
  ('number -> INT','number',1,'p_number','parser.py',142),
  ('number -> FLOAT','number',1,'p_number','parser.py',143),
]
