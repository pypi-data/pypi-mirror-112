"use strict";
/* Copyright: Ankitects Pty Ltd and contributors
 * License: GNU AGPL, version 3 or later; http://www.gnu.org/licenses/agpl.html */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ankiPlatform = "desktop";
var typeans;
var _updatingQueue = Promise.resolve();
var onUpdateHook;
var onShownHook;
function _runHook(arr) {
    const promises = [];
    for (let i = 0; i < arr.length; i++) {
        promises.push(arr[i]());
    }
    return Promise.all(promises);
}
function _queueAction(action) {
    _updatingQueue = _updatingQueue.then(action);
}
function setInnerHTML(element, html) {
    for (const oldVideo of element.getElementsByTagName("video")) {
        oldVideo.pause();
        while (oldVideo.firstChild) {
            oldVideo.removeChild(oldVideo.firstChild);
        }
        oldVideo.load();
    }
    element.innerHTML = html;
    for (const oldScript of element.getElementsByTagName("script")) {
        const newScript = document.createElement("script");
        for (const attribute of oldScript.attributes) {
            newScript.setAttribute(attribute.name, attribute.value);
        }
        newScript.appendChild(document.createTextNode(oldScript.innerHTML));
        oldScript.parentNode.replaceChild(newScript, oldScript);
    }
}
function _updateQA(html, _unusused, onupdate, onshown) {
    return __awaiter(this, void 0, void 0, function* () {
        onUpdateHook = [onupdate];
        onShownHook = [onshown];
        const qa = document.getElementById("qa");
        const renderError = (kind) => (error) => {
            const errorMessage = String(error).substring(0, 2000);
            const errorStack = String(error.stack).substring(0, 2000);
            qa.innerHTML =
                `Invalid ${kind} on card: ${errorMessage}\n${errorStack}`.replace(/\n/g, "<br>");
        };
        // hide current card
        qa.style.opacity = "0";
        // update card
        try {
            setInnerHTML(qa, html);
        }
        catch (error) {
            renderError("HTML")(error);
        }
        yield _runHook(onUpdateHook);
        // wait for mathjax to ready
        yield MathJax.startup.promise
            .then(() => {
            // clear MathJax buffers from previous typesets
            MathJax.typesetClear();
            return MathJax.typesetPromise([qa]);
        })
            .catch(renderError("MathJax"));
        // and reveal card when processing is done
        qa.style.opacity = "1";
        yield _runHook(onShownHook);
    });
}
function _showQuestion(q, a, bodyclass) {
    _queueAction(() => _updateQA(q, null, function () {
        // return to top of window
        window.scrollTo(0, 0);
        document.body.className = bodyclass;
    }, function () {
        // focus typing area if visible
        typeans = document.getElementById("typeans");
        if (typeans) {
            typeans.focus();
        }
        // preload images
        allImagesLoaded().then(() => preloadAnswerImages(q, a));
    }));
}
function _showAnswer(a, bodyclass) {
    _queueAction(() => _updateQA(a, null, function () {
        if (bodyclass) {
            //  when previewing
            document.body.className = bodyclass;
        }
        // avoid scrolling to the answer until images load
        allImagesLoaded().then(scrollToAnswer);
    }, function () { }));
}
const _flagColours = {
    1: "#e25252",
    2: "#ffb347",
    3: "#54c414",
    4: "#578cff",
    5: "#ff82ee",
    6: "#00d1b5",
    7: "#9649dd",
};
function _drawFlag(flag) {
    const elem = document.getElementById("_flag");
    if (flag === 0) {
        elem.setAttribute("hidden", "");
        return;
    }
    elem.removeAttribute("hidden");
    elem.style.color = _flagColours[flag];
}
function _drawMark(mark) {
    const elem = document.getElementById("_mark");
    if (!mark) {
        elem.setAttribute("hidden", "");
    }
    else {
        elem.removeAttribute("hidden");
    }
}
function _typeAnsPress() {
    if (window.event.code === "Enter") {
        pycmd("ans");
    }
}
function _emulateMobile(enabled) {
    const list = document.documentElement.classList;
    if (enabled) {
        list.add("mobile");
    }
    else {
        list.remove("mobile");
    }
}
function allImagesLoaded() {
    return Promise.all(Array.from(document.getElementsByTagName("img")).map(imageLoaded));
}
function imageLoaded(img) {
    return img.complete
        ? Promise.resolve()
        : new Promise((resolve) => {
            img.addEventListener("load", () => resolve());
            img.addEventListener("error", () => resolve());
        });
}
function scrollToAnswer() {
    var _a;
    (_a = document.getElementById("answer")) === null || _a === void 0 ? void 0 : _a.scrollIntoView();
}
function injectPreloadLink(href, as) {
    const link = document.createElement("link");
    link.rel = "preload";
    link.href = href;
    link.as = as;
    document.head.appendChild(link);
}
function clearPreloadLinks() {
    document.head
        .querySelectorAll("link[rel='preload']")
        .forEach((link) => link.remove());
}
function extractImageSrcs(html) {
    const fragment = document.createRange().createContextualFragment(html);
    const srcs = [...fragment.querySelectorAll("img[src]")].map((img) => img.src);
    return srcs;
}
function preloadAnswerImages(qHtml, aHtml) {
    clearPreloadLinks();
    const aSrcs = extractImageSrcs(aHtml);
    if (aSrcs.length) {
        const qSrcs = extractImageSrcs(qHtml);
        const diff = aSrcs.filter((src) => !qSrcs.includes(src));
        diff.forEach((src) => injectPreloadLink(src, "image"));
    }
}
//# sourceMappingURL=data:application/json;base64,