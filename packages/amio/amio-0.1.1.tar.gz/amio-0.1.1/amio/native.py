# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _native
else:
    import _native

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def AudioClip_init(bytes, channels, framerate):
    return _native.AudioClip_init(bytes, channels, framerate)

def AudioClip_del(interface, clip_id):
    return _native.AudioClip_del(interface, clip_id)

def InputChunk_get_playspec_id():
    return _native.InputChunk_get_playspec_id()

def InputChunk_get_starting_frame():
    return _native.InputChunk_get_starting_frame()

def InputChunk_get_was_transport_rolling():
    return _native.InputChunk_get_was_transport_rolling()

def InputChunk_get_samples(bytearray):
    return _native.InputChunk_get_samples(bytearray)

def begin_defining_playspec(size, insert_at, start_from):
    return _native.begin_defining_playspec(size, insert_at, start_from)

def set_entry_in_playspec(n, clip_id, clip_frame_a, clip_frame_b, play_at_frame, repeat_interval, gain_l, gain_r):
    return _native.set_entry_in_playspec(n, clip_id, clip_frame_a, clip_frame_b, play_at_frame, repeat_interval, gain_l, gain_r)

def iface_process_messages_on_python_queue(interface_id):
    return _native.iface_process_messages_on_python_queue(interface_id)

def iface_get_logs(interface_id, bytearray):
    return _native.iface_get_logs(interface_id, bytearray)

def iface_set_playspec(interface_id):
    return _native.iface_set_playspec(interface_id)

def iface_get_frame_rate(interface_id):
    return _native.iface_get_frame_rate(interface_id)

def iface_get_position(interface_id):
    return _native.iface_get_position(interface_id)

def iface_set_position(interface_id, position):
    return _native.iface_set_position(interface_id, position)

def iface_get_transport_rolling(interface_id):
    return _native.iface_get_transport_rolling(interface_id)

def iface_set_transport_rolling(interface_id, rolling):
    return _native.iface_set_transport_rolling(interface_id, rolling)

def iface_get_current_playspec_id(interface_id):
    return _native.iface_get_current_playspec_id(interface_id)

def iface_begin_reading_input_chunk(interface_id):
    return _native.iface_begin_reading_input_chunk(interface_id)

def iface_close(interface_id):
    return _native.iface_close(interface_id)

def create_jack_interface(client_name):
    return _native.create_jack_interface(client_name)


