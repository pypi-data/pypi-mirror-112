{"version":3,"sources":["webpack:///./app/views/settings/account/notifications/notificationSettings.tsx","webpack:///./app/views/settings/account/accountNotifications.tsx"],"names":["changedData","notificationType","notificationSettings","state","updatedNotificationSettings","getStateToPutForDefault","getParentIds","setState","mergeNotificationSettings","legacyData","this","Object","fromEntries","NOTIFICATION_SETTINGS_TYPES","decideDefault","assign","NOTIFICATION_SETTING_FIELDS","getData","data","help","to","title","saveOnBlur","apiMethod","apiEndpoint","initialData","getInitialData","t","fields","getFields","SELF_NOTIFICATION_SETTINGS_TYPES","type","icon","AsyncComponent","FINE_TUNE_FOOTERS","text","path","AccountNotifications","props","organizations","some","organization","features","includes","undefined","forms","accountNotificationFields","renderFooter","FineTuningFooter","AsyncView","FineTuneLink","Link","css","direction","size","withOrganizations"],"mappings":"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","file":"chunks/app_views_settings_account_accountNotifications_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import React from 'react';\n\nimport AlertLink from 'app/components/alertLink';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Link from 'app/components/links/link';\nimport {IconMail} from 'app/icons';\nimport {t} from 'app/locale';\nimport {\n  NOTIFICATION_SETTINGS_TYPES,\n  NotificationSettingsObject,\n  SELF_NOTIFICATION_SETTINGS_TYPES,\n} from 'app/views/settings/account/notifications/constants';\nimport FeedbackAlert from 'app/views/settings/account/notifications/feedbackAlert';\nimport {NOTIFICATION_SETTING_FIELDS} from 'app/views/settings/account/notifications/fields2';\nimport {\n  decideDefault,\n  getParentIds,\n  getStateToPutForDefault,\n  mergeNotificationSettings,\n} from 'app/views/settings/account/notifications/utils';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {FieldObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = AsyncComponent['props'];\n\ntype State = {\n  notificationSettings: NotificationSettingsObject;\n  legacyData: {[key: string]: string};\n} & AsyncComponent['state'];\n\nclass NotificationSettings extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n      legacyData: {},\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [\n      ['notificationSettings', `/users/me/notification-settings/`],\n      ['legacyData', '/users/me/notifications/'],\n    ];\n  }\n\n  getStateToPutForDefault = (\n    changedData: {[key: string]: string},\n    notificationType: string\n  ) => {\n    /**\n     * Update the current providers' parent-independent notification settings\n     * with the new value. If the new value is \"never\", then also update all\n     * parent-specific notification settings to \"default\". If the previous value\n     * was \"never\", then assume providerList should be \"email\" only.\n     */\n\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForDefault(\n      notificationType,\n      notificationSettings,\n      changedData,\n      getParentIds(notificationType, notificationSettings)\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getInitialData(): {[key: string]: string} {\n    const {notificationSettings} = this.state;\n\n    return Object.fromEntries(\n      NOTIFICATION_SETTINGS_TYPES.map(notificationType => [\n        notificationType,\n        decideDefault(notificationType, notificationSettings),\n      ])\n    );\n  }\n\n  getFields(): FieldObject[] {\n    return NOTIFICATION_SETTINGS_TYPES.map(\n      notificationType =>\n        Object.assign({}, NOTIFICATION_SETTING_FIELDS[notificationType], {\n          getData: data => this.getStateToPutForDefault(data, notificationType),\n          help: (\n            <React.Fragment>\n              {NOTIFICATION_SETTING_FIELDS[notificationType].help}\n              &nbsp;\n              <Link to={`/settings/account/notifications/${notificationType}`}>\n                Fine tune\n              </Link>\n            </React.Fragment>\n          ),\n        }) as FieldObject\n    );\n  }\n\n  renderBody() {\n    const {legacyData} = this.state;\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title=\"Notifications\" />\n        <TextBlock>Control alerts that you receive.</TextBlock>\n        <FeedbackAlert />\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={this.getInitialData()}\n        >\n          <JsonForm title={t('Notifications')} fields={this.getFields()} />\n        </Form>\n        <Form\n          initialData={legacyData}\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notifications/\"\n        >\n          <JsonForm\n            title={t('My Activity')}\n            fields={SELF_NOTIFICATION_SETTINGS_TYPES.map(\n              type => NOTIFICATION_SETTING_FIELDS[type] as FieldObject\n            )}\n          />\n        </Form>\n        <AlertLink to=\"/settings/account/emails\" icon={<IconMail />}>\n          {t('Looking to add or remove an email address? Use the emails panel.')}\n        </AlertLink>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NotificationSettings;\n","import styled from '@emotion/styled';\n\nimport AlertLink from 'app/components/alertLink';\nimport Link from 'app/components/links/link';\nimport {PanelFooter} from 'app/components/panels';\nimport accountNotificationFields from 'app/data/forms/accountNotificationSettings';\nimport {IconChevron, IconMail} from 'app/icons';\nimport {t} from 'app/locale';\nimport {OrganizationSummary} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport AsyncView from 'app/views/asyncView';\nimport NotificationSettings from 'app/views/settings/account/notifications/notificationSettings';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nconst FINE_TUNE_FOOTERS = {\n  [t('Alerts')]: {\n    text: t('Fine tune alerts by project'),\n    path: 'alerts/',\n  },\n  [t('Workflow Notifications')]: {\n    text: t('Fine tune workflow notifications by project'),\n    path: 'workflow/',\n  },\n  [t('Email Routing')]: {\n    text: t('Fine tune email routing by project'),\n    path: 'email/',\n  },\n  [t('Weekly Reports')]: {\n    text: t('Fine tune weekly reports by organization'),\n    path: 'reports/',\n  },\n  [t('Deploy Notifications')]: {\n    text: t('Fine tune deploy notifications by organization'),\n    path: 'deploy/',\n  },\n};\n\ntype Props = AsyncView['props'] & {\n  organizations: OrganizationSummary[];\n};\n\ntype State = AsyncView['state'] & {\n  data: Record<string, unknown> | null;\n};\n\nclass AccountNotifications extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['data', '/users/me/notifications/']];\n  }\n\n  getTitle() {\n    return 'Notifications';\n  }\n\n  renderBody() {\n    const {organizations} = this.props;\n    if (\n      organizations.some(organization =>\n        organization.features.includes('notification-platform')\n      )\n    ) {\n      return <NotificationSettings />;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title=\"Notifications\" />\n        <Form\n          initialData={this.state.data ?? undefined}\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notifications/\"\n        >\n          <JsonForm\n            forms={accountNotificationFields}\n            renderFooter={({title}) => {\n              if (typeof title !== 'string') {\n                return null;\n              }\n              if (FINE_TUNE_FOOTERS[title]) {\n                return <FineTuningFooter {...FINE_TUNE_FOOTERS[title]} />;\n              }\n              return null;\n            }}\n          />\n          <AlertLink to=\"/settings/account/emails\" icon={<IconMail />}>\n            {t('Looking to add or remove an email address? Use the emails panel.')}\n          </AlertLink>\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst FineTuneLink = styled(Link)`\n  display: flex;\n  justify-content: space-between;\n  padding: 15px 20px;\n  color: inherit;\n`;\n\ntype FooterProps = {\n  path: string;\n  text: string;\n};\n\nconst FineTuningFooter = ({path, text}: FooterProps) => (\n  <PanelFooter css={{borderTop: 'none'}}>\n    <FineTuneLink to={`/settings/account/notifications/${path}`}>\n      <span>{text}</span>\n      <IconChevron direction=\"right\" size=\"15px\" />\n    </FineTuneLink>\n  </PanelFooter>\n);\n\nexport default withOrganizations(AccountNotifications);\n"],"sourceRoot":""}