{"version":3,"sources":["webpack:///./app/actions/repositoryActions.tsx","webpack:///./app/components/charts/components/markLine.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx","webpack:///./app/views/releases/detail/emptyState.tsx","webpack:///./app/views/releases/detail/repositorySwitcher.tsx","webpack:///./app/views/releases/detail/utils.tsx","webpack:///./app/views/releases/detail/withReleaseRepos.tsx","webpack:///./app/views/releases/utils/sessionTerm.tsx"],"names":["Reflux","MarkLine","props","symbol","RepositoryStoreConfig","listenables","RepoActions","state","orgSlug","undefined","repositories","repositoriesLoading","repositoriesError","init","this","resetRepositories","trigger","loadRepositories","loadRepositoriesError","err","loadRepositoriesSuccess","data","get","INITIAL_STATE","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","RepositoryStore","getInitialState","organization","slug","repoData","RepositoryActions","componentDidMount","fetchRepositories","api","params","path","requestPromise","method","then","res","Sentry","scope","setLevel","setFingerprint","getRepositories","onStoreUpdate","setState","render","EmptyState","children","RepositorySwitcher","createRef","activeRepo","router","location","push","query","cursor","setButtonDropDownWidth","dropdownButtonWidth","dropdownButton","current","offsetWidth","activeRepository","name","StyledDropdownControl","minMenuWidth","label","Fragment","FilterText","t","buttonProps","forwardRef","map","repo","repoName","onSelect","handleRepoFilterChange","eventKey","isActive","RepoLabel","PureComponent","DropdownControl","space","p","theme","borderRadius","button","border","gray300","overflowEllipsis","getFilesByRepository","fileList","reduce","filesByRepository","file","filename","author","type","hasOwnProperty","authors","types","Set","email","add","getCommitsByRepository","commitList","commitsByRepository","commit","repositoryName","repository","getQuery","perPage","pick","Object","values","URL_PARAM","per_page","repo_name","getReposToRender","repos","getReleaseEventView","selection","version","projects","environments","datetime","start","end","period","apdexField","features","includes","apdexThreshold","discoverQuery","id","fields","QueryResults","formatString","range","environment","getUtcDateString","EventView","releaseComparisonChartLabels","ReleaseComparisonChartType","releaseComparisonChartHelp","commonTermsDescription","SessionTerm","generateReleaseMarkLine","title","position","seriesName","markLine","silent","lineStyle","color","formatter","font","fontSize","xAxis","withApi","withOrganization","withRepositories","releaseRepos","isLoading","fetchReleaseRepos","nextProps","setActiveReleaseRepo","prevProps","prevState","release","length","activeReleaseRepo","activeCommitRepo","matchedRepository","find","commitRepo","addErrorMessage","orgId","project","context","encodeURIComponent","fullWidth","dashedBorder","icon","size","description","action","priority","to","projectSlug","React","ReleaseContext","sessionTerm","CRASHES","CRASHED","ABNORMAL","CRASH_FREE_USERS","CRASH_FREE_SESSIONS","HEALTHY","ERRORED","UNHANDLED","ADOPTION","CRASH_FREE","STABILITY","mobileTermsDescription","desktopTermDescriptions","crashed","getSessionTermDescription","term","platform","split","healthy","errored","unhandled","getTermDescriptions"],"mappings":"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","file":"chunks/app_views_releases_detail_emptyState_tsx-app_views_releases_detail_repositorySwitcher_tsx-app-d8bc44.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'resetRepositories',\n  'loadRepositories',\n  'loadRepositoriesError',\n  'loadRepositoriesSuccess',\n]);\n","import 'echarts/lib/component/markLine';\n\nimport {EChartOption} from 'echarts';\n\n/**\n * eCharts markLine\n *\n * See https://echarts.apache.org/en/option.html#series-line.markLine\n */\nexport default function MarkLine(\n  props: EChartOption.SeriesLine['markLine']\n): EChartOption.SeriesLine['markLine'] {\n  return {\n    // The second symbol is a very ugly arrow, we don't want it\n    symbol: ['none', 'none'],\n    ...props,\n  };\n}\n","import Reflux from 'reflux';\n\nimport RepoActions from 'app/actions/repositoryActions';\nimport {Repository} from 'app/types';\n\ntype RepositoryStoreInterface = {\n  get(): {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  state: {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  loadRepositories(orgSlug: string): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  loadRepositoriesError(error: Error): void;\n};\n\nexport const RepositoryStoreConfig: Reflux.StoreDefinition & RepositoryStoreInterface = {\n  listenables: RepoActions,\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\ntype RepositoryStore = Reflux.Store & RepositoryStoreInterface;\n\nconst RepositoryStore = Reflux.createStore(RepositoryStoreConfig) as RepositoryStore;\n\nexport default RepositoryStore;\n","import * as React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {getRepositories} from 'app/actionCreators/repositories';\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedProps = {\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nconst withRepositories = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  >({\n    displayName: `withRepositories(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(RepositoryStore, 'onStoreUpdate') as any],\n\n    getInitialState() {\n      const {organization} = this.props as P & DependentProps;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryActions.resetRepositories();\n      }\n\n      return repoData.orgSlug === orgSlug\n        ? {...INITIAL_STATE, ...repoData}\n        : {...INITIAL_STATE};\n    },\n\n    componentDidMount() {\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    },\n\n    fetchRepositories() {\n      const {api, organization} = this.props as P & DependentProps;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    },\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    },\n\n    render() {\n      return <WrappedComponent {...(this.props as P & DependentProps)} {...this.state} />;\n    },\n  });\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Repository} from 'app/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryActions.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryActions.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryActions.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n","import * as React from 'react';\n\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport {Panel, PanelBody} from 'app/components/panels';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst EmptyState = ({children}: Props) => (\n  <Panel>\n    <PanelBody>\n      <EmptyStateWarning>\n        <p>{children}</p>\n      </EmptyStateWarning>\n    </PanelBody>\n  </Panel>\n);\n\nexport default EmptyState;\n","import {createRef, Fragment, PureComponent} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport DropdownControl, {DropdownItem} from 'app/components/dropdownControl';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Repository} from 'app/types';\n\ntype Props = {\n  repositories: Array<Repository>;\n  router: InjectedRouter;\n  location: Location;\n  activeRepository?: Repository;\n};\n\ntype State = {\n  dropdownButtonWidth?: number;\n};\n\nclass RepositorySwitcher extends PureComponent<Props, State> {\n  state: State = {};\n\n  componentDidMount() {\n    this.setButtonDropDownWidth();\n  }\n  setButtonDropDownWidth() {\n    const dropdownButtonWidth = this.dropdownButton?.current?.offsetWidth;\n    if (dropdownButtonWidth) {\n      this.setState({dropdownButtonWidth});\n    }\n  }\n\n  dropdownButton = createRef<HTMLButtonElement>();\n  handleRepoFilterChange = (activeRepo: string) => {\n    const {router, location} = this.props;\n\n    router.push({\n      ...location,\n      query: {...location.query, cursor: undefined, activeRepo},\n    });\n  };\n\n  render() {\n    const {activeRepository, repositories} = this.props;\n    const {dropdownButtonWidth} = this.state;\n\n    const activeRepo = activeRepository?.name;\n\n    return (\n      <StyledDropdownControl\n        minMenuWidth={dropdownButtonWidth}\n        label={\n          <Fragment>\n            <FilterText>{`${t('Filter')}:`}</FilterText>\n            {activeRepo}\n          </Fragment>\n        }\n        buttonProps={{forwardRef: this.dropdownButton}}\n      >\n        {repositories\n          .map(repo => repo.name)\n          .map(repoName => (\n            <DropdownItem\n              key={repoName}\n              onSelect={this.handleRepoFilterChange}\n              eventKey={repoName}\n              isActive={repoName === activeRepo}\n            >\n              <RepoLabel>{repoName}</RepoLabel>\n            </DropdownItem>\n          ))}\n      </StyledDropdownControl>\n    );\n  }\n}\n\nexport default RepositorySwitcher;\n\nconst StyledDropdownControl = styled(DropdownControl)<{\n  minMenuWidth: State['dropdownButtonWidth'];\n}>`\n  margin-bottom: ${space(1)};\n  > *:nth-child(2) {\n    right: auto;\n    width: auto;\n    ${p => p.minMenuWidth && `min-width: calc(${p.minMenuWidth}px + 10px);`}\n    border-radius: ${p => p.theme.borderRadius};\n    border-top-left-radius: 0px;\n    border: 1px solid ${p => p.theme.button.default.border};\n    top: calc(100% - 1px);\n  }\n`;\n\nconst FilterText = styled('em')`\n  font-style: normal;\n  color: ${p => p.theme.gray300};\n  margin-right: ${space(0.5)};\n`;\n\nconst RepoLabel = styled('div')`\n  ${overflowEllipsis}\n`;\n","import {Location} from 'history';\nimport pick from 'lodash/pick';\n\nimport MarkLine from 'app/components/charts/components/markLine';\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\nimport {t} from 'app/locale';\nimport {\n  Commit,\n  CommitFile,\n  FilesByRepository,\n  GlobalSelection,\n  LightWeightOrganization,\n  ReleaseComparisonChartType,\n  Repository,\n} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport EventView from 'app/utils/discover/eventView';\nimport {Theme} from 'app/utils/theme';\nimport {QueryResults} from 'app/utils/tokenizeSearch';\n\nimport {commonTermsDescription, SessionTerm} from '../utils/sessionTerm';\n\nexport type CommitsByRepository = {\n  [key: string]: Commit[];\n};\n\n/**\n * Convert list of individual file changes into a per-file summary grouped by repository\n */\nexport function getFilesByRepository(fileList: CommitFile[]) {\n  return fileList.reduce<FilesByRepository>((filesByRepository, file) => {\n    const {filename, repoName, author, type} = file;\n\n    if (!filesByRepository.hasOwnProperty(repoName)) {\n      filesByRepository[repoName] = {};\n    }\n\n    if (!filesByRepository[repoName].hasOwnProperty(filename)) {\n      filesByRepository[repoName][filename] = {\n        authors: {},\n        types: new Set(),\n      };\n    }\n\n    if (author.email) {\n      filesByRepository[repoName][filename].authors[author.email] = author;\n    }\n\n    filesByRepository[repoName][filename].types.add(type);\n\n    return filesByRepository;\n  }, {});\n}\n\n/**\n * Convert list of individual commits into a summary grouped by repository\n */\nexport function getCommitsByRepository(commitList: Commit[]): CommitsByRepository {\n  return commitList.reduce((commitsByRepository, commit) => {\n    const repositoryName = commit.repository?.name ?? t('unknown');\n\n    if (!commitsByRepository.hasOwnProperty(repositoryName)) {\n      commitsByRepository[repositoryName] = [];\n    }\n\n    commitsByRepository[repositoryName].push(commit);\n\n    return commitsByRepository;\n  }, {});\n}\n\n/**\n * Get request query according to the url params and active repository\n */\n\ntype GetQueryProps = {\n  location: Location;\n  perPage?: number;\n  activeRepository?: Repository;\n};\n\nexport function getQuery({location, perPage = 40, activeRepository}: GetQueryProps) {\n  const query = {\n    ...pick(location.query, [...Object.values(URL_PARAM), 'cursor']),\n    per_page: perPage,\n  };\n\n  if (!activeRepository) {\n    return query;\n  }\n\n  return {...query, repo_name: activeRepository.name};\n}\n\n/**\n * Get repositories to render according to the activeRepository\n */\nexport function getReposToRender(repos: Array<string>, activeRepository?: Repository) {\n  if (!activeRepository) {\n    return repos;\n  }\n  return [activeRepository.name];\n}\n\n/**\n * Get high level transaction information for this release\n */\nexport function getReleaseEventView(\n  selection: GlobalSelection,\n  version: string,\n  organization: LightWeightOrganization\n): EventView {\n  const {projects, environments, datetime} = selection;\n  const {start, end, period} = datetime;\n\n  const apdexField = organization.features.includes('project-transaction-threshold')\n    ? 'apdex()'\n    : `apdex(${organization.apdexThreshold})`;\n\n  const discoverQuery = {\n    id: undefined,\n    version: 2,\n    name: `${t('Release Apdex')}`,\n    fields: [apdexField],\n    query: new QueryResults([\n      `release:${version}`,\n      'event.type:transaction',\n      'count():>0',\n    ]).formatString(),\n    range: period,\n    environment: environments,\n    projects,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n  } as const;\n\n  return EventView.fromSavedQuery(discoverQuery);\n}\n\nexport const releaseComparisonChartLabels = {\n  [ReleaseComparisonChartType.CRASH_FREE_SESSIONS]: t('Crash Free Sessions'),\n  [ReleaseComparisonChartType.CRASH_FREE_USERS]: t('Crash Free Users'),\n  [ReleaseComparisonChartType.SESSION_COUNT]: t('Session Count'),\n  [ReleaseComparisonChartType.USER_COUNT]: t('User Count'),\n};\n\nexport const releaseComparisonChartHelp = {\n  [ReleaseComparisonChartType.CRASH_FREE_SESSIONS]:\n    commonTermsDescription[SessionTerm.CRASH_FREE_SESSIONS],\n  [ReleaseComparisonChartType.CRASH_FREE_USERS]:\n    commonTermsDescription[SessionTerm.CRASH_FREE_USERS],\n  [ReleaseComparisonChartType.SESSION_COUNT]: t(\n    'The number of sessions in a given period.'\n  ),\n  [ReleaseComparisonChartType.USER_COUNT]: t('The number of users in a given period.'),\n};\n\nexport function generateReleaseMarkLine(title: string, position: number, theme: Theme) {\n  return {\n    seriesName: title,\n    type: 'line',\n    data: [],\n    markLine: MarkLine({\n      silent: true,\n      lineStyle: {color: theme.gray300, type: 'solid'},\n      label: {\n        position: 'insideEndBottom',\n        formatter: title,\n        font: 'Rubik',\n        fontSize: 11,\n      } as any, // TODO(ts): weird echart types,\n      data: [\n        {\n          xAxis: position,\n        },\n      ] as any, // TODO(ts): weird echart types\n    }),\n  };\n}\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport {Body, Main} from 'app/components/layouts/thirds';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel} from 'app/components/panels';\nimport {IconCommit} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Organization, Repository} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withRepositories from 'app/utils/withRepositories';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport {ReleaseContext} from '.';\n\n// These props are required when using this HoC\ntype DependentProps = RouteComponentProps<{orgId: string; release: string}, {}>;\n\ntype HoCsProps = {\n  api: Client;\n  organization: Organization;\n  repositories?: Repository[];\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\n\ntype State = {\n  releaseRepos: Repository[];\n  isLoading: boolean;\n  activeReleaseRepo?: Repository;\n};\n\nconst withReleaseRepos = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  withApi(\n    withOrganization(\n      withRepositories(\n        class extends React.Component<P & HoCsProps, State> {\n          static displayName = `withReleaseRepos(${getDisplayName(WrappedComponent)})`;\n\n          state: State = {\n            releaseRepos: [],\n            isLoading: true,\n          };\n\n          componentDidMount() {\n            this.fetchReleaseRepos();\n          }\n\n          UNSAFE_componentWillReceiveProps(nextProps: P & HoCsProps) {\n            this.setActiveReleaseRepo(nextProps);\n          }\n\n          componentDidUpdate(prevProps: P & HoCsProps, prevState: State) {\n            if (\n              this.props.params.release !== prevProps.params.release ||\n              (!!prevProps.repositoriesLoading && !this.props.repositoriesLoading)\n            ) {\n              this.fetchReleaseRepos();\n              return;\n            }\n\n            if (prevState.releaseRepos.length !== this.state.releaseRepos.length) {\n              this.setActiveReleaseRepo(this.props);\n            }\n          }\n\n          static contextType = ReleaseContext;\n\n          setActiveReleaseRepo(props: P & HoCsProps) {\n            const {releaseRepos, activeReleaseRepo} = this.state;\n\n            if (!releaseRepos.length) {\n              return;\n            }\n\n            const activeCommitRepo = props.location.query?.activeRepo;\n\n            if (!activeCommitRepo) {\n              this.setState({\n                activeReleaseRepo: releaseRepos[0] ?? null,\n              });\n              return;\n            }\n\n            if (activeCommitRepo === activeReleaseRepo?.name) {\n              return;\n            }\n\n            const matchedRepository = releaseRepos.find(\n              commitRepo => commitRepo.name === activeCommitRepo\n            );\n\n            if (matchedRepository) {\n              this.setState({\n                activeReleaseRepo: matchedRepository,\n              });\n              return;\n            }\n\n            addErrorMessage(t('The repository you were looking for was not found.'));\n          }\n\n          async fetchReleaseRepos() {\n            const {params, api, repositories, repositoriesLoading} = this.props;\n\n            if (repositoriesLoading === undefined || repositoriesLoading === true) {\n              return;\n            }\n\n            if (!repositories?.length) {\n              this.setState({isLoading: false});\n              return;\n            }\n\n            const {release, orgId} = params;\n            const {project} = this.context;\n\n            this.setState({isLoading: true});\n\n            try {\n              const releaseRepos = await api.requestPromise(\n                `/projects/${orgId}/${project.slug}/releases/${encodeURIComponent(\n                  release\n                )}/repositories/`\n              );\n              this.setState({releaseRepos, isLoading: false});\n              this.setActiveReleaseRepo(this.props);\n            } catch (error) {\n              Sentry.captureException(error);\n              addErrorMessage(\n                t(\n                  'An error occured while trying to fetch the repositories of the release: %s',\n                  release\n                )\n              );\n            }\n          }\n\n          render() {\n            const {isLoading, activeReleaseRepo, releaseRepos} = this.state;\n            const {\n              repositoriesLoading,\n              repositories,\n              params,\n              router,\n              location,\n              organization,\n            } = this.props;\n\n            if (isLoading || repositoriesLoading) {\n              return <LoadingIndicator />;\n            }\n\n            const noRepositoryOrgRelatedFound = !repositories?.length;\n\n            if (noRepositoryOrgRelatedFound) {\n              const {orgId} = params;\n              return (\n                <Body>\n                  <Main fullWidth>\n                    <Panel dashedBorder>\n                      <EmptyMessage\n                        icon={<IconCommit size=\"xl\" />}\n                        title={t('Releases are better with commit data!')}\n                        description={t(\n                          'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n                        )}\n                        action={\n                          <Button priority=\"primary\" to={`/settings/${orgId}/repos/`}>\n                            {t('Connect a repository')}\n                          </Button>\n                        }\n                      />\n                    </Panel>\n                  </Main>\n                </Body>\n              );\n            }\n\n            const noReleaseReposFound = !releaseRepos.length;\n\n            if (noReleaseReposFound) {\n              return (\n                <Body>\n                  <Main fullWidth>\n                    <Panel dashedBorder>\n                      <EmptyMessage\n                        icon={<IconCommit size=\"xl\" />}\n                        title={t('Releases are better with commit data!')}\n                        description={t(\n                          'No commits associated with this release have been found.'\n                        )}\n                      />\n                    </Panel>\n                  </Main>\n                </Body>\n              );\n            }\n\n            if (activeReleaseRepo === undefined) {\n              return <LoadingIndicator />;\n            }\n\n            const {release} = params;\n            const orgSlug = organization.slug;\n\n            return (\n              <WrappedComponent\n                {...(this.props as P)} // this is just to satisfy the compiler\n                orgSlug={orgSlug}\n                projectSlug={this.context.project.slug}\n                release={release}\n                router={router}\n                location={location}\n                releaseRepos={releaseRepos}\n                activeReleaseRepo={activeReleaseRepo}\n              />\n            );\n          }\n        }\n      )\n    )\n  );\n\nexport default withReleaseRepos;\n","import {PlatformKey} from 'app/data/platformCategories';\nimport {t} from 'app/locale';\n\nexport enum SessionTerm {\n  CRASHES = 'crashes',\n  CRASHED = 'crashed',\n  ABNORMAL = 'abnormal',\n  CRASH_FREE = 'crashFree',\n  CRASH_FREE_USERS = 'crash-free-users',\n  CRASH_FREE_SESSIONS = 'crash-free-sessions',\n  HEALTHY = 'healthy',\n  ERRORED = 'errored',\n  UNHANDLED = 'unhandled',\n  STABILITY = 'stability',\n  ADOPTION = 'adoption',\n}\n\nexport const sessionTerm = {\n  [SessionTerm.CRASHES]: t('Crashes'),\n  [SessionTerm.CRASHED]: t('Crashed'),\n  [SessionTerm.ABNORMAL]: t('Abnormal'),\n  [SessionTerm.CRASH_FREE_USERS]: t('Crash Free Users'),\n  [SessionTerm.CRASH_FREE_SESSIONS]: t('Crash Free Sessions'),\n  [SessionTerm.HEALTHY]: t('Healthy'),\n  [SessionTerm.ERRORED]: t('Errored'),\n  [SessionTerm.UNHANDLED]: t('Unhandled'),\n  [SessionTerm.ADOPTION]: t('Adoption'),\n  duration: t('Session Duration'),\n  otherCrashed: t('Other Crashed'),\n  otherAbnormal: t('Other Abnormal'),\n  otherErrored: t('Other Errored'),\n  otherHealthy: t('Other Healthy'),\n  otherCrashFreeUsers: t('Other Crash Free Users'),\n  otherCrashFreeSessions: t('Other Crash Free Sessions'),\n  otherReleases: t('Other Releases'),\n};\n\n// This should never be used directly (except in tests)\nexport const commonTermsDescription = {\n  [SessionTerm.CRASHES]: t('Number of sessions with a crashed state'),\n  [SessionTerm.CRASH_FREE]: t(\n    'Percentage of sessions/users who did not experience a crash.'\n  ),\n  [SessionTerm.CRASH_FREE_USERS]: t(\n    'Percentage of unique users with non-crashed sessions'\n  ),\n  [SessionTerm.CRASH_FREE_SESSIONS]: t('Percentage of non-crashed sessions'),\n  [SessionTerm.STABILITY]: t('The percentage of crash free sessions.'),\n  [SessionTerm.ADOPTION]: t(\n    'Adoption compares the sessions or users of a release with the total sessions or users for this project in the last 24 hours.'\n  ),\n};\n\n// This should never be used directly (except in tests)\nexport const mobileTermsDescription = {\n  [SessionTerm.CRASHED]: t(\n    'The process was terminated due to an unhandled exception or a request to the server that ended with an error'\n  ),\n  [SessionTerm.CRASH_FREE_SESSIONS]: t('Percentage of non-crashed sessions'),\n  [SessionTerm.ABNORMAL]: t(\n    'An unknown session exit. Like due to loss of power or killed by the operating system'\n  ),\n  [SessionTerm.HEALTHY]: t('A session without errors'),\n  [SessionTerm.ERRORED]: t('A session with errors'),\n  [SessionTerm.UNHANDLED]: t('Not handled by user code'),\n};\n\n// This should never be used directly (except in tests)\nexport const desktopTermDescriptions = {\n  crashed: t('The application crashed with a hard crash (eg. segfault)'),\n  [SessionTerm.ABNORMAL]: t(\n    'The application did not properly end the session, for example, due to force-quit'\n  ),\n  [SessionTerm.HEALTHY]: t(\n    'The application exited normally and did not observe any errors'\n  ),\n  [SessionTerm.ERRORED]: t(\n    'The application exited normally but observed error events while running'\n  ),\n  [SessionTerm.UNHANDLED]: t('The application crashed with a hard crash'),\n};\n\nfunction getTermDescriptions(platform: PlatformKey | null) {\n  const technology =\n    platform === 'react-native' ||\n    platform === 'java-spring' ||\n    platform === 'apple-ios' ||\n    platform === 'dotnet-aspnetcore'\n      ? platform\n      : platform?.split('-')[0];\n\n  switch (technology) {\n    case 'dotnet':\n    case 'java':\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n      };\n    case 'java-spring':\n    case 'dotnet-aspnetcore':\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n        [SessionTerm.CRASHES]: t(\n          'A request that resulted in an unhandled exception and hence a Server Error response'\n        ),\n      };\n    case 'android':\n    case 'cordova':\n    case 'react-native':\n    case 'flutter':\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n        [SessionTerm.CRASHED]: t(\n          'An unhandled exception that resulted in the application crashing'\n        ),\n      };\n\n    case 'apple': {\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n        [SessionTerm.CRASHED]: t('An error that resulted in the application crashing'),\n      };\n    }\n    case 'node':\n    case 'javascript':\n      return {\n        ...commonTermsDescription,\n        [SessionTerm.CRASHED]: t(\n          'During the session an unhandled global error/promise rejection occurred.'\n        ),\n        [SessionTerm.ABNORMAL]: t('Non applicable for Javascript.'),\n        [SessionTerm.HEALTHY]: t('No errors were captured during session life-time.'),\n        [SessionTerm.ERRORED]: t(\n          'During the session at least one handled error occurred.'\n        ),\n        [SessionTerm.UNHANDLED]:\n          \"An error was captured by the global 'onerror' or 'onunhandledrejection' handler.\",\n      };\n    case 'apple-ios':\n    case 'minidump':\n    case 'native':\n      return {\n        ...commonTermsDescription,\n        ...desktopTermDescriptions,\n      };\n    case 'rust':\n      return {\n        ...commonTermsDescription,\n        ...desktopTermDescriptions,\n        [SessionTerm.CRASHED]: t('The application had an unrecoverable error (a panic)'),\n      };\n    default:\n      return {\n        ...commonTermsDescription,\n        [SessionTerm.CRASHED]: t('Number of users who experienced an unhandled error'),\n        [SessionTerm.ABNORMAL]: t('An unknown session exit'),\n        [SessionTerm.HEALTHY]: mobileTermsDescription.healthy,\n        [SessionTerm.ERRORED]: mobileTermsDescription.errored,\n        [SessionTerm.UNHANDLED]: mobileTermsDescription.unhandled,\n      };\n  }\n}\n\nexport function getSessionTermDescription(\n  term: SessionTerm,\n  platform: PlatformKey | null\n) {\n  return getTermDescriptions(platform)[term];\n}\n"],"sourceRoot":""}