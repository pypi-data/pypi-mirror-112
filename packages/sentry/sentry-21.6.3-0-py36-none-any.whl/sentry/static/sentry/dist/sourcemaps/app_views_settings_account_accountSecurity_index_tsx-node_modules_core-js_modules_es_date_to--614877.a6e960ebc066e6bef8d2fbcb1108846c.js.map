{"version":3,"sources":["webpack:///./app/data/forms/accountPassword.tsx","webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx","webpack:///./app/views/settings/account/accountSecurity/components/twoFactorRequired.tsx","webpack:///./app/views/settings/account/passwordForm.tsx","webpack:///./app/views/settings/account/accountSecurity/index.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///../node_modules/core-js/internals/date-to-primitive.js","webpack:///../node_modules/core-js/modules/es.date.to-primitive.js","webpack:///../node_modules/core-js/modules/es.symbol.to-primitive.js"],"names":["getUserIsNotManaged","user","isManaged","route","title","fields","name","type","autoComplete","label","placeholder","help","visible","required","validate","id","form","passwordVerify","passwordNew","getPendingInvite","data","Cookies","queryString","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","AsyncView","this","getTitle","renderComponent","AsyncComponent","message","t","RemoveConfirm","props","StyledAlert","Alert","space","icon","size","tct","link","href","PasswordForm","ConfigStore","apiMethod","apiEndpoint","initialData","onSubmitSuccess","_change","model","resetForm","addSuccessMessage","onSubmitError","addErrorMessage","hideFooter","forms","accountPasswordFields","additionalFieldProps","renderFooter","Actions","priority","renderHeader","PanelItem","AccountSecurity","api","requestPromise","method","all","window","assign","slugs","orgsRequire2fa","slug","length","handleRefresh","openEmailVerification","onClose","actionMessage","authenticators","countEnrolled","deleteDisabled","onDisable","hasVerifiedEmail","isEmpty","tabs","underlined","index","alignRight","flexibleControlStateSize","onClick","handleSessionClose","auth","authId","description","isBackupInterface","isEnrolled","configureButton","AuthenticatorPanelItem","AuthenticatorHeader","AuthenticatorTitle","AuthenticatorStatus","enabled","AuthenticatorName","className","handleAdd2FAClicked","formatOrgSlugs","disabled","onConfirm","Description","CircleIndicator","TextBlock","FormPanel","access","otherProps","sanitizeQuerySelector","undefined","field","defaultValue","fieldWithoutDefaultValue","disabledReason","highlighted","React","JsonForm","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","every","formPanelProps","shouldDisplayForm","features","state","formGroup","i","renderForm","withRouter","anObject","toPrimitive","module","exports","hint","TypeError","createNonEnumerableProperty","dateToPrimitive","TO_PRIMITIVE","wellKnownSymbol","DatePrototype","Date","prototype","defineWellKnownSymbol"],"mappings":"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","file":"chunks/app_views_settings_account_accountSecurity_index_tsx-node_modules_core-js_modules_es_date_to--614877.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {JsonFormObject} from 'app/views/settings/components/forms/type';\n\nconst getUserIsNotManaged = ({user}) => !user.isManaged;\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Password',\n    fields: [\n      {\n        name: 'password',\n        type: 'secret',\n        autoComplete: 'current-password',\n        label: 'Current Password',\n        placeholder: '',\n        help: 'Your current password',\n        visible: getUserIsNotManaged,\n        required: true,\n      },\n      {\n        name: 'passwordNew',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: 'New Password',\n        placeholder: '',\n        help: '',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => (form[id] !== form.passwordVerify ? [[id, '']] : []),\n      },\n      {\n        name: 'passwordVerify',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: 'Verify New Password',\n        placeholder: '',\n        help: 'Verify your new password',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => {\n          // If password is set, and passwords don't match, then return an error\n          if (form.passwordNew && form.passwordNew !== form[id]) {\n            return [[id, 'Passwords do not match']];\n          }\n\n          return [];\n        },\n      },\n    ],\n  },\n];\n\nexport const route = '/settings/account/security/';\nexport default formGroups;\n","import Cookies from 'js-cookie';\nimport * as queryString from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return queryString.parse(data) as any;\n}\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent() as React.ReactChild}\n      </DocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import * as React from 'react';\n\nimport Confirm from 'app/components/confirm';\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n","import styled from '@emotion/styled';\n\nimport Alert from 'app/components/alert';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconFlag} from 'app/icons';\nimport {tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport getPendingInvite from 'app/utils/getPendingInvite';\n\nconst TwoFactorRequired = () =>\n  !getPendingInvite() ? null : (\n    <StyledAlert data-test-id=\"require-2fa\" type=\"error\" icon={<IconFlag size=\"md\" />}>\n      {tct(\n        'You have been invited to an organization that requires [link:two-factor authentication].' +\n          ' Setup two-factor authentication below to join your organization.',\n        {\n          link: <ExternalLink href=\"https://docs.sentry.io/accounts/require-2fa/\" />,\n        }\n      )}\n    </StyledAlert>\n  );\n\nconst StyledAlert = styled(Alert)`\n  margin: ${space(3)} 0;\n`;\n\nexport default TwoFactorRequired;\n","import styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport Button from 'app/components/button';\nimport {PanelAlert, PanelItem} from 'app/components/panels';\nimport accountPasswordFields from 'app/data/forms/accountPassword';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\n\ntype OnSubmitSuccess = Parameters<NonNullable<Form['props']['onSubmitSuccess']>>;\n\nfunction PasswordForm() {\n  function handleSubmitSuccess(_change: OnSubmitSuccess[0], model: OnSubmitSuccess[1]) {\n    // Reset form on success\n    model.resetForm();\n    addSuccessMessage('Password has been changed');\n  }\n\n  function handleSubmitError() {\n    addErrorMessage('Error changing password');\n  }\n\n  const user = ConfigStore.get('user');\n\n  return (\n    <Form\n      apiMethod=\"PUT\"\n      apiEndpoint=\"/users/me/password/\"\n      initialData={{}}\n      onSubmitSuccess={handleSubmitSuccess}\n      onSubmitError={handleSubmitError}\n      hideFooter\n    >\n      <JsonForm\n        forms={accountPasswordFields}\n        additionalFieldProps={{user}}\n        renderFooter={() => (\n          <Actions>\n            <Button type=\"submit\" priority=\"primary\">\n              {t('Change password')}\n            </Button>\n          </Actions>\n        )}\n        renderHeader={() => (\n          <PanelAlert type=\"info\">\n            {t('Changing your password will invalidate all logged in sessions.')}\n          </PanelAlert>\n        )}\n      />\n    </Form>\n  );\n}\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nexport default PasswordForm;\n","import * as ReactRouter from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {openEmailVerification} from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport ListLink from 'app/components/links/listLink';\nimport NavTabs from 'app/components/navTabs';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tooltip from 'app/components/tooltip';\nimport {IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Authenticator, OrganizationSummary} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport AsyncView from 'app/views/asyncView';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport TwoFactorRequired from 'app/views/settings/account/accountSecurity/components/twoFactorRequired';\nimport PasswordForm from 'app/views/settings/account/passwordForm';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Field from 'app/views/settings/components/forms/field';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = {\n  authenticators: Authenticator[] | null;\n  orgsRequire2fa: OrganizationSummary[];\n  countEnrolled: number;\n  deleteDisabled: boolean;\n  hasVerifiedEmail: boolean;\n  handleRefresh: () => void;\n  onDisable: (auth: Authenticator) => void;\n} & AsyncView['props'] &\n  ReactRouter.WithRouterProps;\n\n/**\n * Lists 2fa devices + password change form\n */\nclass AccountSecurity extends AsyncView<Props> {\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [];\n  }\n\n  handleSessionClose = async () => {\n    try {\n      await this.api.requestPromise('/auth/', {\n        method: 'DELETE',\n        data: {all: true},\n      });\n      window.location.assign('/auth/login/');\n    } catch (err) {\n      addErrorMessage(t('There was a problem closing all sessions'));\n      throw err;\n    }\n  };\n\n  formatOrgSlugs = () => {\n    const {orgsRequire2fa} = this.props;\n    const slugs = orgsRequire2fa.map(({slug}) => slug);\n\n    return [slugs.slice(0, -1).join(', '), slugs.slice(-1)[0]].join(\n      slugs.length > 1 ? ' and ' : ''\n    );\n  };\n\n  handleAdd2FAClicked = () => {\n    const {handleRefresh} = this.props;\n    openEmailVerification({\n      onClose: () => {\n        handleRefresh();\n      },\n      actionMessage: 'enrolling a 2FA device',\n    });\n  };\n\n  renderBody() {\n    const {authenticators, countEnrolled, deleteDisabled, onDisable, hasVerifiedEmail} =\n      this.props;\n    const isEmpty = !authenticators?.length;\n    return (\n      <div>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={recreateRoute('', this.props)} index>\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('session-history/', this.props)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        {!isEmpty && countEnrolled === 0 && <TwoFactorRequired />}\n\n        <PasswordForm />\n\n        <Panel>\n          <PanelHeader>{t('Sessions')}</PanelHeader>\n          <PanelBody>\n            <Field\n              alignRight\n              flexibleControlStateSize\n              label={t('Sign out of all devices')}\n              help={t(\n                'Signing out of all devices will sign you out of this device as well.'\n              )}\n            >\n              <Button data-test-id=\"signoutAll\" onClick={this.handleSessionClose}>\n                {t('Sign out of all devices')}\n              </Button>\n            </Field>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Two-Factor Authentication')}</PanelHeader>\n\n          {isEmpty && (\n            <EmptyMessage>{t('No available authenticators to add')}</EmptyMessage>\n          )}\n\n          <PanelBody>\n            {!isEmpty &&\n              authenticators?.map(auth => {\n                const {\n                  id,\n                  authId,\n                  description,\n                  isBackupInterface,\n                  isEnrolled,\n                  configureButton,\n                  name,\n                } = auth;\n                return (\n                  <AuthenticatorPanelItem key={id}>\n                    <AuthenticatorHeader>\n                      <AuthenticatorTitle>\n                        <AuthenticatorStatus enabled={isEnrolled} />\n                        <AuthenticatorName>{name}</AuthenticatorName>\n                      </AuthenticatorTitle>\n\n                      <Actions>\n                        {!isBackupInterface && !isEnrolled && hasVerifiedEmail && (\n                          <Button\n                            to={`/settings/account/security/mfa/${id}/enroll/`}\n                            size=\"small\"\n                            priority=\"primary\"\n                            className=\"enroll-button\"\n                          >\n                            {t('Add')}\n                          </Button>\n                        )}\n                        {!isBackupInterface && !isEnrolled && !hasVerifiedEmail && (\n                          <Button\n                            onClick={this.handleAdd2FAClicked}\n                            size=\"small\"\n                            priority=\"primary\"\n                            className=\"enroll-button\"\n                          >\n                            {t('Add')}\n                          </Button>\n                        )}\n\n                        {isEnrolled && authId && (\n                          <Button\n                            to={`/settings/account/security/mfa/${authId}/`}\n                            size=\"small\"\n                            className=\"details-button\"\n                          >\n                            {configureButton}\n                          </Button>\n                        )}\n\n                        {!isBackupInterface && isEnrolled && (\n                          <Tooltip\n                            title={t(\n                              `Two-factor authentication is required for organization(s): ${this.formatOrgSlugs()}.`\n                            )}\n                            disabled={!deleteDisabled}\n                          >\n                            <RemoveConfirm\n                              onConfirm={() => onDisable(auth)}\n                              disabled={deleteDisabled}\n                            >\n                              <Button\n                                size=\"small\"\n                                label={t('delete')}\n                                icon={<IconDelete />}\n                              />\n                            </RemoveConfirm>\n                          </Tooltip>\n                        )}\n                      </Actions>\n\n                      {isBackupInterface && !isEnrolled ? t('requires 2FA') : null}\n                    </AuthenticatorHeader>\n\n                    <Description>{description}</Description>\n                  </AuthenticatorPanelItem>\n                );\n              })}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst AuthenticatorName = styled('span')`\n  font-size: 1.2em;\n`;\n\nconst AuthenticatorPanelItem = styled(PanelItem)`\n  flex-direction: column;\n`;\n\nconst AuthenticatorHeader = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst AuthenticatorTitle = styled('div')`\n  flex: 1;\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n\nconst AuthenticatorStatus = styled(CircleIndicator)`\n  margin-right: ${space(1)};\n`;\n\nconst Description = styled(TextBlock)`\n  margin-top: ${space(2)};\n  margin-bottom: 0;\n`;\n\nexport default AccountSecurity;\n","import * as React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {Scope} from 'app/types';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  additionalFieldProps?: {[key: string]: any};\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.hash !== nextProps.location.hash) {\n      const hash = nextProps.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(JsonForm);\n","'use strict';\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\n\n// `Date.prototype[@@toPrimitive](hint)` method implementation\n// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive\nmodule.exports = function (hint) {\n  if (hint !== 'string' && hint !== 'number' && hint !== 'default') {\n    throw TypeError('Incorrect hint');\n  } return toPrimitive(anObject(this), hint !== 'number');\n};\n","var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar dateToPrimitive = require('../internals/date-to-primitive');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\nvar DatePrototype = Date.prototype;\n\n// `Date.prototype[@@toPrimitive]` method\n// https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive\nif (!(TO_PRIMITIVE in DatePrototype)) {\n  createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);\n}\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.toPrimitive` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.toprimitive\ndefineWellKnownSymbol('toPrimitive');\n"],"sourceRoot":""}