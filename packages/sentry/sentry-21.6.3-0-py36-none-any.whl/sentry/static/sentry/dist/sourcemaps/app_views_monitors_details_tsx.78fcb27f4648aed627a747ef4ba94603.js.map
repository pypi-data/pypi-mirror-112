{"version":3,"sources":["webpack:///./app/views/monitors/checkInIcon.tsx","webpack:///./app/views/monitors/monitorCheckIns.tsx","webpack:///./app/views/monitors/monitorHeaderActions.tsx","webpack:///./app/utils/logging.tsx","webpack:///./app/views/monitors/monitorHeader.tsx","webpack:///./app/components/issueList.tsx","webpack:///./app/views/monitors/monitorIssues.tsx","webpack:///./app/views/monitors/monitorStats.tsx","webpack:///./app/views/monitors/details.tsx","webpack:///./app/views/monitors/monitorIcon.tsx"],"names":["p","size","color","status","theme","error","success","disabled","MonitorCheckIns","monitor","this","props","id","query","per_page","ErrorWrapper","state","checkInList","map","checkIn","CheckInIconWrapper","TimeSinceWrapper","date","dateCreated","duration","seconds","AsyncComponent","DivMargin","space","MonitorHeaderActions","api","orgId","onUpdate","ButtonContainer","gap","icon","to","t","onClick","data","addLoadingMessage","requestPromise","method","then","resp","clearIndicators","err","ex","Sentry","scope","window","console","addErrorMessage","onConfirm","redirectPath","browserHistory","message","withApi","MonitorHeader","className","name","lastCheckIn","nextCheckIn","IssueList","getInitialState","location","endpoint","clear","request","cursor","_","jqXHR","setState","loading","issueIds","item","pageLinks","getResponseHeader","fetchData","nextProps","nextLocation","pathname","search","remountComponent","style","margin","onRetry","emptyText","panelStyle","noBorder","border","borderRadius","noMargin","marginBottom","renderEmpty","renderLoading","renderError","length","issue","pagination","renderResults","React","withRouter","MonitorIssues","project","limit","MonitorStats","until","Math","floor","Date","getTime","since","resolution","emptyStats","seriesName","failed","stats","forEach","ok","timestamp","ts","push","toString","value","colors","withPadding","title","description","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","stacked","height","series","params","monitorId","Fragment","paddingBottom","AsyncView"],"mappings":"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","file":"chunks/app_views_monitors_details_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import styled from '@emotion/styled';\n\ntype Props = {\n  size: number | string;\n  status: 'error' | 'ok';\n  color?: string;\n};\n\nexport default styled('div')<Props>`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n\n  ${p =>\n    p.color\n      ? `background: ${p.color};`\n      : `background: ${\n          p.status === 'error'\n            ? p.theme.error\n            : p.status === 'ok'\n            ? p.theme.success\n            : p.theme.disabled\n        };`};\n`;\n","import styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Duration from 'app/components/duration';\nimport {PanelBody, PanelItem} from 'app/components/panels';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\nimport {Monitor} from 'app/views/monitors/types';\n\nimport CheckInIcon from './checkInIcon';\n\ntype CheckIn = {\n  dateCreated: string;\n  duration: number;\n  id: string;\n  status: 'ok' | 'error';\n};\n\ntype Props = {\n  monitor: Monitor;\n} & AsyncComponent['props'];\n\ntype State = {\n  checkInList: CheckIn[];\n} & AsyncComponent['state'];\n\nexport default class MonitorCheckIns extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {monitor} = this.props;\n    return [\n      ['checkInList', `/monitors/${monitor.id}/checkins/`, {query: {per_page: 10}}],\n    ];\n  }\n\n  renderError() {\n    return <ErrorWrapper>{super.renderError()}</ErrorWrapper>;\n  }\n\n  renderBody() {\n    return (\n      <PanelBody>\n        {this.state.checkInList.map(checkIn => (\n          <PanelItem key={checkIn.id}>\n            <CheckInIconWrapper>\n              <CheckInIcon status={checkIn.status} size={16} />\n            </CheckInIconWrapper>\n            <TimeSinceWrapper>\n              <TimeSince date={checkIn.dateCreated} />\n            </TimeSinceWrapper>\n            <div>{checkIn.duration && <Duration seconds={checkIn.duration / 100} />}</div>\n          </PanelItem>\n        ))}\n      </PanelBody>\n    );\n  }\n}\n\nconst DivMargin = styled('div')`\n  margin-right: ${space(2)};\n`;\n\nconst CheckInIconWrapper = styled(DivMargin)`\n  display: flex;\n  align-items: center;\n`;\n\nconst TimeSinceWrapper = styled(DivMargin)``;\n\nconst ErrorWrapper = styled('div')`\n  margin: ${space(3)} ${space(3)} 0;\n`;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport Confirm from 'app/components/confirm';\nimport {IconDelete, IconEdit} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {logException} from 'app/utils/logging';\nimport withApi from 'app/utils/withApi';\n\nimport {Monitor} from './types';\n\ntype Props = {\n  api: Client;\n  monitor: Monitor;\n  orgId: string;\n  onUpdate: (data: Monitor) => void;\n};\n\nconst MonitorHeaderActions = ({api, monitor, orgId, onUpdate}: Props) => {\n  const handleDelete = () => {\n    const redirectPath = `/organizations/${orgId}/monitors/`;\n    addLoadingMessage(t('Deleting Monitor...'));\n\n    api\n      .requestPromise(`/monitors/${monitor.id}/`, {\n        method: 'DELETE',\n      })\n      .then(() => {\n        browserHistory.push(redirectPath);\n      })\n      .catch(() => {\n        addErrorMessage(t('Unable to remove monitor.'));\n      });\n  };\n\n  const updateMonitor = (data: Partial<Monitor>) => {\n    addLoadingMessage();\n    api\n      .requestPromise(`/monitors/${monitor.id}/`, {\n        method: 'PUT',\n        data,\n      })\n      .then(resp => {\n        clearIndicators();\n        onUpdate?.(resp);\n      })\n      .catch(err => {\n        logException(err);\n        addErrorMessage(t('Unable to update monitor.'));\n      });\n  };\n\n  const toggleStatus = () =>\n    updateMonitor({\n      status: monitor.status === 'disabled' ? 'active' : 'disabled',\n    });\n\n  return (\n    <ButtonContainer>\n      <ButtonBar gap={1}>\n        <Button\n          size=\"small\"\n          icon={<IconEdit size=\"xs\" />}\n          to={`/organizations/${orgId}/monitors/${monitor.id}/edit/`}\n        >\n          &nbsp;\n          {t('Edit')}\n        </Button>\n        <Button size=\"small\" onClick={toggleStatus}>\n          {monitor.status !== 'disabled' ? t('Pause') : t('Enable')}\n        </Button>\n        <Confirm\n          onConfirm={handleDelete}\n          message={t(\n            'Deleting this monitor is permanent. Are you sure you wish to continue?'\n          )}\n        >\n          <Button size=\"small\" icon={<IconDelete size=\"xs\" />}>\n            {t('Delete')}\n          </Button>\n        </Confirm>\n      </ButtonBar>\n    </ButtonContainer>\n  );\n};\n\nconst ButtonContainer = styled('div')`\n  margin-bottom: ${space(3)};\n  display: flex;\n  flex-shrink: 1;\n`;\n\nexport default withApi(MonitorHeaderActions);\n","import * as Sentry from '@sentry/react';\n\nexport function logException(ex: Error, context?: any): void {\n  Sentry.withScope(scope => {\n    if (context) {\n      scope.setExtra('context', context);\n    }\n\n    Sentry.captureException(ex);\n  });\n  /* eslint no-console:0 */\n  window.console && console.error && console.error(ex);\n}\n","import * as React from 'react';\n\nimport TimeSince from 'app/components/timeSince';\nimport {t} from 'app/locale';\n\nimport MonitorHeaderActions from './monitorHeaderActions';\nimport MonitorIcon from './monitorIcon';\n\ntype Props = React.ComponentProps<typeof MonitorHeaderActions>;\n\nconst MonitorHeader = ({monitor, orgId, onUpdate}: Props) => (\n  <div className=\"release-details\">\n    <div className=\"row\">\n      <div className=\"col-sm-6 col-xs-10\">\n        <h3>{monitor.name}</h3>\n        <div className=\"release-meta\">{monitor.id}</div>\n      </div>\n      <div className=\"col-sm-2 hidden-xs\">\n        <h6 className=\"nav-header\">{t('Last Check-in')}</h6>\n        {monitor.lastCheckIn && <TimeSince date={monitor.lastCheckIn} />}\n      </div>\n      <div className=\"col-sm-2 hidden-xs\">\n        <h6 className=\"nav-header\">{t('Next Check-in')}</h6>\n        {monitor.nextCheckIn && <TimeSince date={monitor.nextCheckIn} />}\n      </div>\n      <div className=\"col-sm-2\">\n        <h6 className=\"nav-header\">{t('Status')}</h6>\n        <MonitorIcon status={monitor.status} size={16} />\n      </div>\n    </div>\n    <MonitorHeaderActions orgId={orgId} monitor={monitor} onUpdate={onUpdate} />\n  </div>\n);\n\nexport default MonitorHeader;\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\n\nimport {Client} from 'app/api';\nimport CompactIssue from 'app/components/issues/compactIssue';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {IconSearch} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Group} from 'app/types';\nimport withApi from 'app/utils/withApi';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\ntype Props = WithRouterProps & {\n  api: Client;\n  endpoint: string;\n  emptyText?: string;\n  query?: Record<string, any>;\n  pagination?: boolean;\n  renderEmpty?: () => React.ReactElement;\n  noBorder?: boolean;\n  noMargin?: boolean;\n};\n\ntype State = {\n  issueIds: Array<string>;\n  loading: boolean;\n  error: boolean;\n  pageLinks: string | null;\n  data: Array<Group>;\n};\n\nclass IssueList extends React.Component<Props, State> {\n  state: State = this.getInitialState();\n\n  getInitialState(): State {\n    return {\n      issueIds: [],\n      loading: true,\n      error: false,\n      pageLinks: null,\n      data: [],\n    };\n  }\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const {location} = this.props;\n    const nextLocation = nextProps.location;\n\n    if (!location) {\n      return;\n    }\n\n    if (\n      location.pathname !== nextLocation.pathname ||\n      location.search !== nextLocation.search\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  remountComponent() {\n    this.setState(this.getInitialState(), this.fetchData);\n  }\n\n  fetchData = () => {\n    const {location, api, endpoint, query} = this.props;\n    api.clear();\n    api.request(endpoint, {\n      method: 'GET',\n      query: {\n        cursor: (location && location.query && location.query.cursor) || '',\n        ...query,\n      },\n      success: (data, _, jqXHR) => {\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n          issueIds: data.map(item => item.id),\n          pageLinks: jqXHR?.getResponseHeader('Link') ?? null,\n        });\n      },\n      error: () => {\n        this.setState({loading: false, error: true});\n      },\n    });\n  };\n\n  renderError() {\n    return (\n      <div style={{margin: `${space(2)} ${space(2)} 0`}}>\n        <LoadingError onRetry={this.fetchData} />\n      </div>\n    );\n  }\n\n  renderLoading() {\n    return (\n      <div style={{margin: '18px 18px 0'}}>\n        <LoadingIndicator />\n      </div>\n    );\n  }\n\n  renderEmpty() {\n    const {emptyText} = this.props;\n    const {noBorder, noMargin} = this.props;\n    const panelStyle: React.CSSProperties = noBorder ? {border: 0, borderRadius: 0} : {};\n    if (noMargin) {\n      panelStyle.marginBottom = 0;\n    }\n\n    return (\n      <Panel style={panelStyle}>\n        <EmptyMessage icon={<IconSearch size=\"xl\" />}>\n          {emptyText ? emptyText : t('Nothing to show here, move along.')}\n        </EmptyMessage>\n      </Panel>\n    );\n  }\n\n  renderResults() {\n    const {noBorder, noMargin, renderEmpty} = this.props;\n    const {loading, error, issueIds, data} = this.state;\n\n    if (loading) {\n      return this.renderLoading();\n    }\n\n    if (error) {\n      return this.renderError();\n    }\n\n    if (issueIds.length > 0) {\n      const panelStyle: React.CSSProperties = noBorder\n        ? {border: 0, borderRadius: 0}\n        : {};\n      if (noMargin) {\n        panelStyle.marginBottom = 0;\n      }\n\n      return (\n        <Panel style={panelStyle}>\n          <PanelBody className=\"issue-list\">\n            {data.map(issue => (\n              <CompactIssue key={issue.id} id={issue.id} data={issue} />\n            ))}\n          </PanelBody>\n        </Panel>\n      );\n    }\n\n    return renderEmpty?.() || this.renderEmpty();\n  }\n\n  render() {\n    const {pageLinks} = this.state;\n    const {pagination} = this.props;\n\n    return (\n      <React.Fragment>\n        {this.renderResults()}\n        {pagination && pageLinks && <Pagination pageLinks={pageLinks} {...this.props} />}\n      </React.Fragment>\n    );\n  }\n}\n\nexport {IssueList};\n\nexport default withRouter(withApi(IssueList));\n","import IssueList from 'app/components/issueList';\nimport {t} from 'app/locale';\n\nimport {Monitor} from './types';\n\ntype Props = {\n  orgId: string;\n  monitor: Monitor;\n};\n\nconst MonitorIssues = ({orgId, monitor}: Props) => (\n  <IssueList\n    endpoint={`/organizations/${orgId}/issues/`}\n    query={{\n      query: 'monitor.id:\"' + monitor.id + '\"',\n      project: monitor.project.id,\n      limit: 5,\n    }}\n    pagination={false}\n    emptyText={t('No issues found')}\n    noBorder\n    noMargin\n  />\n);\n\nexport default MonitorIssues;\n","import AsyncComponent from 'app/components/asyncComponent';\nimport MiniBarChart from 'app/components/charts/miniBarChart';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport theme from 'app/utils/theme';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nimport {Monitor, MonitorStat} from './types';\n\ntype Props = AsyncComponent['props'] & {\n  monitor: Monitor;\n};\n\ntype State = AsyncComponent['state'] & {\n  stats: MonitorStat[] | null;\n};\n\ntype Stat = {name: string; value: number};\n\nexport default class MonitorStats extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {monitor} = this.props;\n    const until = Math.floor(new Date().getTime() / 1000);\n    const since = until - 3600 * 24 * 30;\n    return [\n      [\n        'stats',\n        `/monitors/${monitor.id}/stats/`,\n        {\n          query: {\n            since,\n            until,\n            resolution: '1d',\n          },\n        },\n      ],\n    ];\n  }\n\n  renderBody() {\n    let emptyStats = true;\n    const success = {\n      seriesName: t('Successful'),\n      data: [] as Stat[],\n    };\n    const failed = {\n      seriesName: t('Failed'),\n      data: [] as Stat[],\n    };\n    this.state.stats?.forEach(p => {\n      if (p.ok || p.error) {\n        emptyStats = false;\n      }\n      const timestamp = p.ts * 1000;\n      success.data.push({name: timestamp.toString(), value: p.ok});\n      failed.data.push({name: timestamp.toString(), value: p.error});\n    });\n    const colors = [theme.green300, theme.red300];\n\n    return (\n      <Panel>\n        <PanelBody withPadding>\n          {!emptyStats ? (\n            <MiniBarChart\n              isGroupedByDate\n              showTimeInTooltip\n              labelYAxisExtents\n              stacked\n              colors={colors}\n              height={150}\n              series={[success, failed]}\n            />\n          ) : (\n            <EmptyMessage\n              title={t('Nothing recorded in the last 30 days.')}\n              description={t('All check-ins for this monitor.')}\n            />\n          )}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\n\nimport MonitorCheckIns from './monitorCheckIns';\nimport MonitorHeader from './monitorHeader';\nimport MonitorIssues from './monitorIssues';\nimport MonitorStats from './monitorStats';\nimport {Monitor} from './types';\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{orgId: string; monitorId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  monitor: Monitor | null;\n};\n\nclass MonitorDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params, location} = this.props;\n    return [['monitor', `/monitors/${params.monitorId}/`, {query: location.query}]];\n  }\n\n  getTitle() {\n    if (this.state.monitor) {\n      return `${this.state.monitor.name} - Monitors - ${this.props.params.orgId}`;\n    }\n    return `Monitors - ${this.props.params.orgId}`;\n  }\n\n  onUpdate = (data: Monitor) =>\n    this.setState(state => ({monitor: {...state.monitor, ...data}}));\n\n  renderBody() {\n    const {monitor} = this.state;\n\n    if (monitor === null) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        <MonitorHeader\n          monitor={monitor}\n          orgId={this.props.params.orgId}\n          onUpdate={this.onUpdate}\n        />\n\n        <MonitorStats monitor={monitor} />\n\n        <Panel style={{paddingBottom: 0}}>\n          <PanelHeader>{t('Related Issues')}</PanelHeader>\n\n          <MonitorIssues monitor={monitor} orgId={this.props.params.orgId} />\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Recent Check-ins')}</PanelHeader>\n\n          <MonitorCheckIns monitor={monitor} />\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nexport default MonitorDetails;\n","import styled from '@emotion/styled';\n\nimport {Status} from './types';\n\nexport default styled('div')<{size: number; status: Status}>`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n\n  ${p =>\n    p.color\n      ? `background: ${p.color};`\n      : `background: ${\n          p.status === 'error'\n            ? p.theme.error\n            : p.status === 'ok'\n            ? p.theme.success\n            : p.theme.disabled\n        };`};\n`;\n"],"sourceRoot":""}