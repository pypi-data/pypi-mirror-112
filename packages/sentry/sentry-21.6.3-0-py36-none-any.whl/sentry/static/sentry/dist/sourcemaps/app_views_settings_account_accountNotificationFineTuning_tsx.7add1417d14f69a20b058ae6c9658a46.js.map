{"version":3,"sources":["webpack:///./app/views/settings/account/notifications/fields.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByOrganization.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByProjects.tsx","webpack:///./app/views/settings/account/notifications/notificationSettingsByType.tsx","webpack:///./app/views/settings/account/accountNotificationFineTuning.tsx","webpack:///./app/views/settings/components/defaultSearchBar.tsx"],"names":["ACCOUNT_NOTIFICATION_FIELDS","alerts","title","description","t","type","choices","defaultValue","defaultFieldName","workflow","deploy","reports","email","NotificationSettingsByOrganization","this","props","notificationType","notificationSettings","onChange","organizations","saveOnBlur","apiMethod","apiEndpoint","initialData","getParentData","fields","map","organization","getParentField","React","withOrganizations","Object","values","project","length","stateProjects","state","projects","fromEntries","groupByOrganization","sortProjects","name","projectsPageLinks","canSearch","getProjectCount","MIN_PROJECTS_FOR_SEARCH","shouldPaginate","MIN_PROJECTS_FOR_PAGINATION","renderSearchInput","stateKey","url","placeholder","children","defaultSearchBar","StyledSearchWrapper","entries","getGroupedProjects","groupTitle","parents","parent","pageLinks","AsyncComponent","SearchWrapper","changedData","updatedNotificationSettings","getStateToPutForProvider","setState","mergeNotificationSettings","getStateToPutForDefault","getParentIds","parentId","getStateToPutForParent","query","getCurrentDefault","isEverythingDisabled","provider","providerListToString","getCurrentProviders","assign","NOTIFICATION_SETTING_FIELDS","help","getData","data","push","getInitialData","isGroupedByProject","getFields","PanelBodyLineItem","PanelBody","p","theme","innerBorder","AccountNotificationsByProject","field","projectsByOrg","fieldConfig","org","id","label","slug","Fragment","projectFields","f","AccountNotificationsByOrganization","AccountNotificationsByOrganizationContainer","AccountNotificationFineTuning","fineTuneType","params","endpoints","emails","filter","isVerified","sort","a","b","isPrimary","includes","some","features","notifications","fineTuneData","isProject","getEndpoints","hasProjects","emailChoices","hasButtons","Heading","AsyncView","space"],"mappings":"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","file":"chunks/app_views_settings_account_accountNotificationFineTuning_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {t} from 'app/locale';\n\nexport type FineTuneField = {\n  title: string;\n  description: string;\n  type: 'select';\n  choices?: string[][];\n  defaultValue?: string;\n  defaultFieldName?: string;\n};\n\nexport const ACCOUNT_NOTIFICATION_FIELDS: Record<string, FineTuneField> = {\n  alerts: {\n    title: 'Project Alerts',\n    description: t('Control alerts that you receive per project.'),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['1', t('On')],\n      ['0', t('Off')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'subscribeByDefault',\n  },\n  workflow: {\n    title: 'Workflow Notifications',\n    description: t(\n      'Control workflow notifications, e.g. changes in issue assignment, resolution status, and comments.'\n    ),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['0', t('Always')],\n      ['1', t('Only on issues I subscribe to')],\n      ['2', t('Never')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'workflowNotifications',\n  },\n  deploy: {\n    title: t('Deploy Notifications'),\n    description: t(\n      'Control deploy notifications that include release, environment, and commit overviews.'\n    ),\n    type: 'select',\n    choices: [\n      ['-1', t('Default')],\n      ['2', t('Always')],\n      ['3', t('Only on deploys with my commits')],\n      ['4', t('Never')],\n    ],\n    defaultValue: '-1',\n    defaultFieldName: 'deployNotifications',\n  },\n  reports: {\n    title: t('Weekly Reports'),\n    description: t(\n      \"Reports contain a summary of what's happened within the organization.\"\n    ),\n    type: 'select',\n    // API only saves organizations that have this disabled, so we should default to \"On\"\n    defaultValue: '1',\n    choices: [\n      ['1', t('On')],\n      ['0', t('Off')],\n    ],\n    defaultFieldName: 'weeklyReports',\n  },\n\n  email: {\n    title: t('Email Routing'),\n    description: t(\n      'On a per project basis, route emails to an alternative email address.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices\n  },\n};\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport {OrganizationSummary} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport {\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'app/views/settings/account/notifications/constants';\nimport {\n  getParentData,\n  getParentField,\n} from 'app/views/settings/account/notifications/utils';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\n\ntype Props = {\n  notificationType: string;\n  notificationSettings: NotificationSettingsObject;\n  organizations: OrganizationSummary[];\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject;\n};\n\ntype State = {};\n\nclass NotificationSettingsByOrganization extends React.Component<Props, State> {\n  render() {\n    const {notificationType, notificationSettings, onChange, organizations} = this.props;\n\n    return (\n      <Form\n        saveOnBlur\n        apiMethod=\"PUT\"\n        apiEndpoint=\"/users/me/notification-settings/\"\n        initialData={getParentData(notificationType, notificationSettings, organizations)}\n      >\n        <JsonForm\n          title={t('Organizations')}\n          fields={organizations.map(organization =>\n            getParentField(notificationType, notificationSettings, organization, onChange)\n          )}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default withOrganizations(NotificationSettingsByOrganization);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Pagination from 'app/components/pagination';\nimport {t} from 'app/locale';\nimport {Project} from 'app/types';\nimport {sortProjects} from 'app/utils';\nimport {\n  MIN_PROJECTS_FOR_PAGINATION,\n  MIN_PROJECTS_FOR_SEARCH,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'app/views/settings/account/notifications/constants';\nimport {\n  getParentData,\n  getParentField,\n  groupByOrganization,\n} from 'app/views/settings/account/notifications/utils';\nimport {\n  RenderSearch,\n  SearchWrapper,\n} from 'app/views/settings/components/defaultSearchBar';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\n\ntype Props = {\n  notificationType: string;\n  notificationSettings: NotificationSettingsObject;\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject;\n} & AsyncComponent['props'];\n\ntype State = {\n  projects: Project[];\n} & AsyncComponent['state'];\n\nclass NotificationSettingsByProjects extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      projects: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['projects', '/projects/']];\n  }\n\n  getProjectCount = (): number => {\n    /** Check the notification settings for how many projects there are. */\n    const {notificationType, notificationSettings} = this.props;\n\n    return Object.values(notificationSettings[notificationType]?.project || {}).length;\n  };\n\n  getGroupedProjects = (): {[key: string]: Project[]} => {\n    /**\n     * The UI expects projects to be grouped by organization but can also use\n     * this function to make a single group with all organizations.\n     */\n    const {projects: stateProjects} = this.state;\n\n    return Object.fromEntries(\n      Object.values(groupByOrganization(sortProjects(stateProjects))).map(\n        ({organization, projects}) => [`${organization.name} Projects`, projects]\n      )\n    );\n  };\n\n  renderBody() {\n    const {notificationType, notificationSettings, onChange} = this.props;\n    const {projects, projectsPageLinks} = this.state;\n\n    const canSearch = this.getProjectCount() >= MIN_PROJECTS_FOR_SEARCH;\n    const shouldPaginate = projects.length >= MIN_PROJECTS_FOR_PAGINATION;\n\n    // eslint-disable-next-line react/prop-types\n    const renderSearch: RenderSearch = ({defaultSearchBar}) => (\n      <StyledSearchWrapper>{defaultSearchBar}</StyledSearchWrapper>\n    );\n    return (\n      <React.Fragment>\n        {canSearch &&\n          this.renderSearchInput({\n            stateKey: 'projects',\n            url: '/projects/',\n            placeholder: t('Search Projects'),\n            children: renderSearch,\n          })}\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={getParentData(notificationType, notificationSettings, projects)}\n        >\n          {projects.length === 0 ? (\n            <EmptyMessage>{t('No projects found')}</EmptyMessage>\n          ) : (\n            Object.entries(this.getGroupedProjects()).map(([groupTitle, parents]) => (\n              <JsonForm\n                key={groupTitle}\n                title={groupTitle}\n                fields={parents.map(parent =>\n                  getParentField(notificationType, notificationSettings, parent, onChange)\n                )}\n              />\n            ))\n          )}\n        </Form>\n        {canSearch && shouldPaginate && (\n          <Pagination pageLinks={projectsPageLinks} {...this.props} />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NotificationSettingsByProjects;\n\nconst StyledSearchWrapper = styled(SearchWrapper)`\n  * {\n    width: 100%;\n  }\n`;\n","import React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport {t} from 'app/locale';\nimport {\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n} from 'app/views/settings/account/notifications/constants';\nimport FeedbackAlert from 'app/views/settings/account/notifications/feedbackAlert';\nimport {ACCOUNT_NOTIFICATION_FIELDS} from 'app/views/settings/account/notifications/fields';\nimport {NOTIFICATION_SETTING_FIELDS} from 'app/views/settings/account/notifications/fields2';\nimport NotificationSettingsByOrganization from 'app/views/settings/account/notifications/notificationSettingsByOrganization';\nimport NotificationSettingsByProjects from 'app/views/settings/account/notifications/notificationSettingsByProjects';\nimport {\n  getCurrentDefault,\n  getCurrentProviders,\n  getParentIds,\n  getStateToPutForDefault,\n  getStateToPutForParent,\n  getStateToPutForProvider,\n  isEverythingDisabled,\n  isGroupedByProject,\n  mergeNotificationSettings,\n  providerListToString,\n} from 'app/views/settings/account/notifications/utils';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {FieldObject} from 'app/views/settings/components/forms/type';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype Props = {\n  notificationType: string;\n} & AsyncComponent['props'];\n\ntype State = {\n  notificationSettings: NotificationSettingsObject;\n} & AsyncComponent['state'];\n\nclass NotificationSettingsByType extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      notificationSettings: {},\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {notificationType} = this.props;\n\n    const query = {type: notificationType};\n    return [['notificationSettings', `/users/me/notification-settings/`, {query}]];\n  }\n\n  /* Methods responsible for updating state and hitting the API. */\n\n  getStateToPutForProvider = (\n    changedData: NotificationSettingsByProviderObject\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForProvider(\n      notificationType,\n      notificationSettings,\n      changedData\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getStateToPutForDefault = (\n    changedData: NotificationSettingsByProviderObject\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForDefault(\n      notificationType,\n      notificationSettings,\n      changedData,\n      getParentIds(notificationType, notificationSettings)\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n\n    return updatedNotificationSettings;\n  };\n\n  getStateToPutForParent = (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ): NotificationSettingsObject => {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const updatedNotificationSettings = getStateToPutForParent(\n      notificationType,\n      notificationSettings,\n      changedData,\n      parentId\n    );\n\n    this.setState({\n      notificationSettings: mergeNotificationSettings(\n        notificationSettings,\n        updatedNotificationSettings\n      ),\n    });\n    return updatedNotificationSettings;\n  };\n\n  /* Methods responsible for rendering the page. */\n\n  getInitialData(): {[key: string]: string} {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const initialData = {\n      [notificationType]: getCurrentDefault(notificationType, notificationSettings),\n    };\n    if (!isEverythingDisabled(notificationType, notificationSettings)) {\n      initialData.provider = providerListToString(\n        getCurrentProviders(notificationType, notificationSettings)\n      );\n    }\n    return initialData;\n  }\n\n  getFields(): FieldObject[] {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const fields = [\n      Object.assign({}, NOTIFICATION_SETTING_FIELDS[notificationType], {\n        help: t('This is the default for all projects.'),\n        getData: data => this.getStateToPutForDefault(data),\n      }),\n    ];\n    if (!isEverythingDisabled(notificationType, notificationSettings)) {\n      fields.push(\n        Object.assign(\n          {\n            help: t('Where personal notifications will be sent.'),\n            getData: data => this.getStateToPutForProvider(data),\n          },\n          NOTIFICATION_SETTING_FIELDS.provider\n        )\n      );\n    }\n    return fields as FieldObject[];\n  }\n\n  renderBody() {\n    const {notificationType} = this.props;\n    const {notificationSettings} = this.state;\n\n    const {title, description} = ACCOUNT_NOTIFICATION_FIELDS[notificationType];\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n        <FeedbackAlert />\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/users/me/notification-settings/\"\n          initialData={this.getInitialData()}\n        >\n          <JsonForm\n            title={\n              isGroupedByProject(notificationType)\n                ? t('All Projects')\n                : t('All Organizations')\n            }\n            fields={this.getFields()}\n          />\n        </Form>\n        {!isEverythingDisabled(notificationType, notificationSettings) &&\n          (isGroupedByProject(notificationType) ? (\n            <NotificationSettingsByProjects\n              notificationType={notificationType}\n              notificationSettings={notificationSettings}\n              onChange={this.getStateToPutForParent}\n            />\n          ) : (\n            <NotificationSettingsByOrganization\n              notificationType={notificationType}\n              notificationSettings={notificationSettings}\n              onChange={this.getStateToPutForParent}\n            />\n          ))}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default NotificationSettingsByType;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {fields} from 'app/data/forms/accountNotificationSettings';\nimport {t} from 'app/locale';\nimport {Organization, Project, UserEmail} from 'app/types';\nimport withOrganizations from 'app/utils/withOrganizations';\nimport AsyncView from 'app/views/asyncView';\nimport {\n  ACCOUNT_NOTIFICATION_FIELDS,\n  FineTuneField,\n} from 'app/views/settings/account/notifications/fields';\nimport NotificationSettingsByType from 'app/views/settings/account/notifications/notificationSettingsByType';\nimport {\n  groupByOrganization,\n  isGroupedByProject,\n} from 'app/views/settings/account/notifications/utils';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst PanelBodyLineItem = styled(PanelBody)`\n  font-size: 1.4rem;\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\ntype ANBPProps = {\n  projects: Project[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByProject = ({projects, field}: ANBPProps) => {\n  const projectsByOrg = groupByOrganization(projects);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = Object.values(projectsByOrg).map(org => ({\n    name: org.organization.name,\n    projects: org.projects.map(project => ({\n      ...fieldConfig,\n      // `name` key refers to field name\n      // we use project.id because slugs are not unique across orgs\n      name: project.id,\n      label: project.slug,\n    })),\n  }));\n\n  return (\n    <Fragment>\n      {data.map(({name, projects: projectFields}) => (\n        <div key={name}>\n          <PanelHeader>{name}</PanelHeader>\n          {projectFields.map(f => (\n            <PanelBodyLineItem key={f.name}>\n              <SelectField\n                defaultValue={f.defaultValue}\n                name={f.name}\n                choices={f.choices}\n                label={f.label}\n              />\n            </PanelBodyLineItem>\n          ))}\n        </div>\n      ))}\n    </Fragment>\n  );\n};\n\ntype ANBOProps = {\n  organizations: Organization[];\n  field: FineTuneField;\n};\n\nconst AccountNotificationsByOrganization = ({organizations, field}: ANBOProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {title, description, ...fieldConfig} = field;\n\n  // Display as select box in this view regardless of the type specified in the config\n  const data = organizations.map(org => ({\n    ...fieldConfig,\n    // `name` key refers to field name\n    // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)\n    name: org.id,\n    label: org.slug,\n  }));\n\n  return (\n    <Fragment>\n      {data.map(f => (\n        <PanelBodyLineItem key={f.name}>\n          <SelectField\n            defaultValue={f.defaultValue}\n            name={f.name}\n            choices={f.choices}\n            label={f.label}\n          />\n        </PanelBodyLineItem>\n      ))}\n    </Fragment>\n  );\n};\n\nconst AccountNotificationsByOrganizationContainer = withOrganizations(\n  AccountNotificationsByOrganization\n);\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{fineTuneType: string}, {}> & {\n    organizations: Organization[];\n  };\n\ntype State = AsyncView['state'] & {\n  emails: UserEmail[] | null;\n  projects: Project[] | null;\n  notifications: Record<string, any> | null;\n  fineTuneData: Record<string, any> | null;\n};\n\nclass AccountNotificationFineTuning extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {fineTuneType} = this.props.params;\n    const endpoints = [\n      ['notifications', '/users/me/notifications/'],\n      ['fineTuneData', `/users/me/notifications/${fineTuneType}/`],\n    ];\n\n    if (isGroupedByProject(fineTuneType)) {\n      endpoints.push(['projects', '/projects/']);\n    }\n\n    endpoints.push(['emails', '/users/me/emails/']);\n    if (fineTuneType === 'email') {\n      endpoints.push(['emails', '/users/me/emails/']);\n    }\n\n    return endpoints as ReturnType<AsyncView['getEndpoints']>;\n  }\n\n  // Return a sorted list of user's verified emails\n  get emailChoices() {\n    return (\n      this.state.emails\n        ?.filter(({isVerified}) => isVerified)\n        ?.sort((a, b) => {\n          // Sort by primary -> email\n          if (a.isPrimary) {\n            return -1;\n          } else if (b.isPrimary) {\n            return 1;\n          }\n\n          return a.email < b.email ? -1 : 1;\n        }) ?? []\n    );\n  }\n\n  renderBody() {\n    const {params, organizations} = this.props;\n    const {fineTuneType} = params;\n\n    if (\n      ['alerts', 'deploy', 'workflow'].includes(fineTuneType) &&\n      organizations.some(organization =>\n        organization.features.includes('notification-platform')\n      )\n    ) {\n      return <NotificationSettingsByType notificationType={fineTuneType} />;\n    }\n\n    const {notifications, projects, fineTuneData, projectsPageLinks} = this.state;\n\n    const isProject = isGroupedByProject(fineTuneType);\n    const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];\n    const {title, description} = field;\n\n    const [stateKey, url] = isProject ? this.getEndpoints()[2] : [];\n    const hasProjects = !!projects?.length;\n\n    if (fineTuneType === 'email') {\n      // Fetch verified email addresses\n      field.choices = this.emailChoices.map(({email}) => [email, email]);\n    }\n\n    if (!notifications || !fineTuneData) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n\n        {field &&\n          field.defaultFieldName &&\n          // not implemented yet\n          field.defaultFieldName !== 'weeklyReports' && (\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/users/me/notifications/\"\n              initialData={notifications}\n            >\n              <JsonForm\n                title={`Default ${title}`}\n                fields={[fields[field.defaultFieldName]]}\n              />\n            </Form>\n          )}\n        <Panel>\n          <PanelBody>\n            <PanelHeader hasButtons={isProject}>\n              <Heading>{isProject ? t('Projects') : t('Organizations')}</Heading>\n              <div>\n                {isProject &&\n                  this.renderSearchInput({\n                    placeholder: t('Search Projects'),\n                    url,\n                    stateKey,\n                  })}\n              </div>\n            </PanelHeader>\n\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint={`/users/me/notifications/${fineTuneType}/`}\n              initialData={fineTuneData}\n            >\n              {isProject && hasProjects && (\n                <AccountNotificationsByProject projects={projects!} field={field} />\n              )}\n\n              {isProject && !hasProjects && (\n                <EmptyMessage>{t('No projects found')}</EmptyMessage>\n              )}\n\n              {!isProject && (\n                <AccountNotificationsByOrganizationContainer field={field} />\n              )}\n            </Form>\n          </PanelBody>\n        </Panel>\n\n        {projects && <Pagination pageLinks={projectsPageLinks} {...this.props} />}\n      </div>\n    );\n  }\n}\n\nconst Heading = styled('div')`\n  flex: 1;\n`;\n\nexport default withOrganizations(AccountNotificationFineTuning);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport AsyncView from 'app/views/asyncView';\n\nexport type RenderSearch = React.ComponentProps<\n  typeof AsyncView.prototype.renderSearchInput\n>['children'];\n\nexport const SearchWrapper = styled('div')`\n  display: flex;\n  grid-template-columns: 1fr max-content;\n  grid-gap: ${space(1.5)};\n  margin-top: ${space(4)};\n  margin-bottom: ${space(1.5)};\n  position: relative;\n`;\n"],"sourceRoot":""}