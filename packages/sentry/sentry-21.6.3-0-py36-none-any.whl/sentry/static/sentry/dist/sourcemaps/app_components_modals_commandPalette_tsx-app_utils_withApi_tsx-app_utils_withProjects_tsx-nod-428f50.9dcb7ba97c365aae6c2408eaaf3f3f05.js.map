{"version":3,"sources":["webpack:///./app/actions/projectActions.tsx","webpack:///./app/actions/teamActions.tsx","webpack:///./app/components/modals/commandPalette.tsx","webpack:///./app/stores/projectsStore.tsx","webpack:///./app/utils/withApi.tsx","webpack:///./app/utils/withProjects.tsx","webpack:///../node_modules/lodash/flattenDepth.js"],"names":["Reflux","CommandPalette","analytics","this","props","theme","Body","injectedCss","css","entryPoint","minSearch","maxResults","dropdownStyle","border","renderInput","getInputProps","InputWrapper","StyledInput","autoFocus","type","placeholder","t","Component","withTheme","modalCss","space","Input","storeConfig","itemsById","loading","init","reset","listenTo","ProjectActions","onAddTeam","onChangeSlug","onCreateSuccess","loadInitialData","onStatsLoadSuccess","onRemoveTeam","onUpdateSuccess","TeamActions","onDeleteTeam","items","reduce","map","project","id","trigger","Set","Object","keys","prevSlug","newSlug","prevProject","getBySlug","newProject","slug","data","getById","assign","touchedIds","entries","forEach","projectId","stats","push","teamSlug","projectIds","getWithTeam","projectWithTeam","removeTeamFromProject","projectSlug","team","teams","newTeams","filter","getAll","find","values","sort","a","b","getBySlugs","slugs","includes","getState","projects","WrappedComponent","persistInFlight","api","Client","clear","React","getDisplayName","WithProjects","ProjectsStore","setState","undefined","unsubscribe","state","loadingProjects","baseFlatten","toInteger","module","exports","array","depth","length"],"mappings":"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","file":"chunks/app_components_modals_commandPalette_tsx-app_utils_withApi_tsx-app_utils_withProjects_tsx-nod-428f50.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'addTeam',\n  'addTeamError',\n  'addTeamSuccess',\n  'changeSlug',\n  'createSuccess',\n  'loadProjects',\n  'loadStats',\n  'loadStatsError',\n  'loadStatsForProjectSuccess',\n  'loadStatsSuccess',\n  'removeProject',\n  'removeProjectError',\n  'removeProjectSuccess',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'reset',\n  'setActive',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n","import Reflux from 'reflux';\n\nconst TeamActions = Reflux.createActions([\n  'createTeam',\n  'createTeamError',\n  'createTeamSuccess',\n  'fetchAll',\n  'fetchAllError',\n  'fetchAllSuccess',\n  'fetchDetails',\n  'fetchDetailsError',\n  'fetchDetailsSuccess',\n  'loadTeams',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n\nexport default TeamActions;\n","import {Component} from 'react';\nimport {ClassNames, css, withTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport Search from 'app/components/search';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {analytics} from 'app/utils/analytics';\nimport {Theme} from 'app/utils/theme';\nimport Input from 'app/views/settings/components/forms/controls/input';\n\ntype Props = ModalRenderProps & {\n  theme: Theme;\n};\n\nclass CommandPalette extends Component<Props> {\n  componentDidMount() {\n    analytics('omnisearch.open', {});\n  }\n\n  render() {\n    const {theme, Body} = this.props;\n\n    return (\n      <Body>\n        <ClassNames>\n          {({css: injectedCss}) => (\n            <Search\n              entryPoint=\"command_palette\"\n              minSearch={1}\n              maxResults={10}\n              dropdownStyle={injectedCss`\n                width: 100%;\n                border: transparent;\n                border-top-left-radius: 0;\n                border-top-right-radius: 0;\n                position: initial;\n                box-shadow: none;\n                border-top: 1px solid ${theme.border};\n              `}\n              renderInput={({getInputProps}) => (\n                <InputWrapper>\n                  <StyledInput\n                    autoFocus\n                    {...getInputProps({\n                      type: 'text',\n                      placeholder: t('Search for projects, teams, settings, etc...'),\n                    })}\n                  />\n                </InputWrapper>\n              )}\n            />\n          )}\n        </ClassNames>\n      </Body>\n    );\n  }\n}\n\nexport default withTheme(CommandPalette);\n\nexport const modalCss = css`\n  [role='document'] {\n    padding: 0;\n  }\n`;\n\nconst InputWrapper = styled('div')`\n  padding: ${space(0.25)};\n`;\n\nconst StyledInput = styled(Input)`\n  width: 100%;\n  padding: ${space(1)};\n  border-radius: 8px;\n\n  outline: none;\n  border: none;\n  box-shadow: none;\n\n  :focus,\n  :active,\n  :hover {\n    outline: none;\n    border: none;\n    box-shadow: none;\n  }\n`;\n","import Reflux from 'reflux';\n\nimport ProjectActions from 'app/actions/projectActions';\nimport TeamActions from 'app/actions/teamActions';\nimport {Project, Team} from 'app/types';\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\ntype StatsData = Record<string, Project['stats']>;\n\n/**\n * Attributes that need typing but aren't part of the external interface,\n */\ntype Internals = {\n  itemsById: Record<string, Project>;\n  loading: boolean;\n};\n\ntype ProjectsStoreInterface = {\n  init: () => void;\n  reset: () => void;\n  loadInitialData: (projects: Project[]) => void;\n  onStatsLoadSuccess: (data: StatsData) => void;\n  onChangeSlug: (prevSlug: string, newSlug: string) => void;\n  onCreateSuccess: (project: Project) => void;\n  onUpdateSuccess: (data: Partial<Project>) => void;\n  onDeleteTeam: (slug: string) => void;\n  onRemoveTeam: (teamSlug: string, projectSlug: string) => void;\n  onAddTeam: (team: Team, projectSlug: string) => void;\n  removeTeamFromProject: (teamSlug: string, project: Project) => void;\n  getWithTeam: (teamSlug: string) => Project[];\n  getAll: () => Project[];\n  getBySlugs: (slug: string[]) => Project[];\n  getState: (slugs?: string[]) => State;\n  getById: (id?: string) => Project | undefined;\n  getBySlug: (slug?: string) => Project | undefined;\n};\n\nconst storeConfig: Reflux.StoreDefinition & Internals & ProjectsStoreInterface = {\n  itemsById: {},\n  loading: true,\n\n  init() {\n    this.reset();\n\n    this.listenTo(ProjectActions.addTeamSuccess, this.onAddTeam);\n    this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);\n    this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);\n    this.listenTo(ProjectActions.loadProjects, this.loadInitialData);\n    this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess);\n    this.listenTo(ProjectActions.removeTeamSuccess, this.onRemoveTeam);\n    this.listenTo(ProjectActions.reset, this.reset);\n    this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);\n\n    this.listenTo(TeamActions.removeTeamSuccess, this.onDeleteTeam);\n  },\n\n  reset() {\n    this.itemsById = {};\n    this.loading = true;\n  },\n\n  loadInitialData(items: Project[]) {\n    this.itemsById = items.reduce((map, project) => {\n      map[project.id] = project;\n      return map;\n    }, {});\n    this.loading = false;\n    this.trigger(new Set(Object.keys(this.itemsById)));\n  },\n\n  onChangeSlug(prevSlug: string, newSlug: string) {\n    const prevProject = this.getBySlug(prevSlug);\n\n    // This shouldn't happen\n    if (!prevProject) {\n      return;\n    }\n\n    const newProject = {\n      ...prevProject,\n      slug: newSlug,\n    };\n\n    this.itemsById = {\n      ...this.itemsById,\n      [newProject.id]: newProject,\n    };\n\n    // Ideally we'd always trigger this.itemsById, but following existing patterns\n    // so we don't break things\n    this.trigger(new Set([prevProject.id]));\n  },\n\n  onCreateSuccess(project: Project) {\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: project,\n    };\n    this.trigger(new Set([project.id]));\n  },\n\n  onUpdateSuccess(data: Partial<Project>) {\n    const project = this.getById(data.id);\n    if (!project) {\n      return;\n    }\n    const newProject = Object.assign({}, project, data);\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: newProject,\n    };\n    this.trigger(new Set([data.id]));\n  },\n\n  onStatsLoadSuccess(data) {\n    const touchedIds: string[] = [];\n    Object.entries(data || {}).forEach(([projectId, stats]) => {\n      if (projectId in this.itemsById) {\n        this.itemsById[projectId].stats = stats;\n        touchedIds.push(projectId);\n      }\n    });\n    this.trigger(new Set(touchedIds));\n  },\n\n  /**\n   * Listener for when a team is completely removed\n   *\n   * @param teamSlug Team Slug\n   */\n  onDeleteTeam(teamSlug: string) {\n    // Look for team in all projects\n    const projectIds = this.getWithTeam(teamSlug).map(projectWithTeam => {\n      this.removeTeamFromProject(teamSlug, projectWithTeam);\n      return projectWithTeam.id;\n    });\n\n    this.trigger(new Set([projectIds]));\n  },\n\n  onRemoveTeam(teamSlug: string, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n    if (!project) {\n      return;\n    }\n\n    this.removeTeamFromProject(teamSlug, project);\n    this.trigger(new Set([project.id]));\n  },\n\n  onAddTeam(team: Team, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    // Don't do anything if we can't find a project\n    if (!project) {\n      return;\n    }\n\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: {\n        ...project,\n        teams: [...project.teams, team],\n      },\n    };\n\n    this.trigger(new Set([project.id]));\n  },\n\n  // Internal method, does not trigger\n  removeTeamFromProject(teamSlug: string, project: Project) {\n    const newTeams = project.teams.filter(({slug}) => slug !== teamSlug);\n\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: {\n        ...project,\n        teams: newTeams,\n      },\n    };\n  },\n\n  /**\n   * Returns a list of projects that has the specified team\n   *\n   * @param {String} teamSlug Slug of team to find in projects\n   */\n  getWithTeam(teamSlug: string) {\n    return this.getAll().filter(({teams}) => teams.find(({slug}) => slug === teamSlug));\n  },\n\n  getAll() {\n    return Object.values(this.itemsById).sort((a: Project, b: Project) => {\n      if (a.slug > b.slug) {\n        return 1;\n      }\n      if (a.slug < b.slug) {\n        return -1;\n      }\n      return 0;\n    });\n  },\n\n  getById(id) {\n    return this.getAll().find(project => project.id === id);\n  },\n\n  getBySlug(slug) {\n    return this.getAll().find(project => project.slug === slug);\n  },\n\n  getBySlugs(slugs: string[]) {\n    return this.getAll().filter(project => slugs.includes(project.slug));\n  },\n\n  getState(slugs?: string[]): State {\n    return {\n      projects: slugs ? this.getBySlugs(slugs) : this.getAll(),\n      loading: this.loading,\n    };\n  },\n};\n\ntype ProjectsStore = Reflux.Store & ProjectsStoreInterface;\n\nconst ProjectsStore = Reflux.createStore(storeConfig) as ProjectsStore;\n\nexport default ProjectsStore;\n","import * as React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n","import * as React from 'react';\n\nimport ProjectsStore from 'app/stores/projectsStore';\nimport {Project} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedProjectsProps = {\n  projects: Project[];\n  loadingProjects?: boolean;\n};\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\n/**\n * Higher order component that uses ProjectsStore and provides a list of projects\n */\nfunction withProjects<P extends InjectedProjectsProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithProjects extends React.Component<\n    Omit<P, keyof InjectedProjectsProps> & Partial<InjectedProjectsProps>,\n    State\n  > {\n    static displayName = `withProjects(${getDisplayName(WrappedComponent)})`;\n\n    state: State = ProjectsStore.getState();\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = ProjectsStore.listen(\n      () => this.setState(ProjectsStore.getState()),\n      undefined\n    );\n\n    render() {\n      return (\n        <WrappedComponent\n          {...(this.props as P)}\n          projects={this.state.projects}\n          loadingProjects={this.state.loading}\n        />\n      );\n    }\n  }\n\n  return WithProjects;\n}\n\nexport default withProjects;\n","var baseFlatten = require('./_baseFlatten'),\n    toInteger = require('./toInteger');\n\n/**\n * Recursively flatten `array` up to `depth` times.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @param {number} [depth=1] The maximum recursion depth.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * var array = [1, [2, [3, [4]], 5]];\n *\n * _.flattenDepth(array, 1);\n * // => [1, 2, [3, [4]], 5]\n *\n * _.flattenDepth(array, 2);\n * // => [1, 2, 3, [4], 5]\n */\nfunction flattenDepth(array, depth) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  depth = depth === undefined ? 1 : toInteger(depth);\n  return baseFlatten(array, depth);\n}\n\nmodule.exports = flattenDepth;\n"],"sourceRoot":""}