{"version":3,"sources":["webpack:///./app/components/events/interfaces/frame/utils.tsx","webpack:///./app/components/events/interfaces/rawStacktraceContent.tsx","webpack:///./app/components/events/interfaces/types.tsx","webpack:///./app/components/issueDiff/renderGroupingInfo.tsx","webpack:///./app/components/issueDiff/index.tsx","webpack:///./app/components/modals/diffModal.tsx","webpack:///./app/utils/getStacktraceBody.tsx","webpack:///./app/utils/withApi.tsx","webpack:///../node_modules/core-js/modules/es.array.flat.js"],"names":["trimPackage","pkg","pieces","split","test","length","replace","getPlatform","dataPlatform","platform","getFrameHint","frame","symbolicatorStatus","func","warningIcon","size","color","errorIcon","match","t","SymbolicatorStatus","isDotnet","getPythonFrame","result","defined","filename","module","lineNo","colNo","context","forEach","item","trim","ljust","str","len","Array","Math","max","join","render","data","exception","frames","frameIdx","push","getJavaScriptFrame","getRubyFrame","idx","funcName","getPHPFrame","getJavaFrame","instructionAddr","symbolAddr","getNativeFrame","getFrame","reverse","unshift","type","value","getJavaPreamble","getPreamble","renderGroupVariant","variant","title","hash","description","rv","component","renderComponent","contributes","name","id","hint","name_or_id","values","line","groupingInfo","Object","map","flat","IssueDiff","loading","groupingDiff","baseEvent","targetEvent","SplitDiffAsync","undefined","setState","state","fetchData","issueId","eventId","props","orgId","project","api","paramEventId","requestPromise","event","eventID","slug","renderGroupingInfo","getStacktraceBody","this","baseIssueId","targetIssueId","baseEventId","targetEventId","Promise","all","fetchEventData","then","addErrorMessage","className","DiffComponent","showDiffToggle","features","includes","StyledIssueDiff","HeaderWrapper","merged","active","barId","onClick","toggleDiffMode","i","base","target","Component","withApi","shouldForwardProp","p","isPropValid","theme","backgroundSecondary","space","background","DiffModal","Body","CloseButton","modalCss","entries","exc","find","msg","formatted","filter","stacktrace","rawStacktraceContent","reduce","acc","concat","WrappedComponent","persistInFlight","Client","clear","React","getDisplayName","$","flattenIntoArray","toObject","toLength","toInteger","arraySpeciesCreate","proto","depthArg","arguments","O","sourceLen","A"],"mappings":"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","file":"chunks/app_components_modals_diffModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import {SymbolicatorStatus} from 'app/components/events/interfaces/types';\nimport {IconQuestion, IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport {Frame, PlatformType} from 'app/types';\n\nexport function trimPackage(pkg: string) {\n  const pieces = pkg.split(/^([a-z]:\\\\|\\\\\\\\)/i.test(pkg) ? '\\\\' : '/');\n  const filename = pieces[pieces.length - 1] || pieces[pieces.length - 2] || pkg;\n  return filename.replace(/\\.(dylib|so|a|dll|exe)$/, '');\n}\n\nexport function getPlatform(dataPlatform: PlatformType | null, platform: string) {\n  // prioritize the frame platform but fall back to the platform\n  // of the stack trace / exception\n  return dataPlatform || platform;\n}\n\nexport function getFrameHint(frame: Frame) {\n  // returning [hintText, hintIcon]\n  const {symbolicatorStatus} = frame;\n  const func = frame.function || '<unknown>';\n  // Custom color used to match adjacent text.\n  const warningIcon = <IconQuestion size=\"xs\" color={'#2c45a8' as any} />;\n  const errorIcon = <IconWarning size=\"xs\" color=\"red300\" />;\n\n  if (func.match(/^@objc\\s/)) {\n    return [t('Objective-C -> Swift shim frame'), warningIcon];\n  }\n  if (func.match(/^__?hidden#\\d+/)) {\n    return [t('Hidden function from bitcode build'), errorIcon];\n  }\n  if (!symbolicatorStatus && func === '<unknown>') {\n    // Only render this if the event was not symbolicated.\n    return [t('No function name was supplied by the client SDK.'), warningIcon];\n  }\n\n  if (\n    func === '<unknown>' ||\n    (func === '<redacted>' && symbolicatorStatus === SymbolicatorStatus.MISSING_SYMBOL)\n  ) {\n    switch (symbolicatorStatus) {\n      case SymbolicatorStatus.MISSING_SYMBOL:\n        return [t('The symbol was not found within the debug file.'), warningIcon];\n      case SymbolicatorStatus.UNKNOWN_IMAGE:\n        return [t('No image is specified for the address of the frame.'), warningIcon];\n      case SymbolicatorStatus.MISSING:\n        return [\n          t('The debug file could not be retrieved from any of the sources.'),\n          errorIcon,\n        ];\n      case SymbolicatorStatus.MALFORMED:\n        return [t('The retrieved debug file could not be processed.'), errorIcon];\n      default:\n    }\n  }\n\n  if (func === '<redacted>') {\n    return [t('Unknown system frame. Usually from beta SDKs'), warningIcon];\n  }\n\n  return [null, null];\n}\n\nexport function isDotnet(platform: string) {\n  // csharp platform represents .NET and can be F#, VB or any language targeting CLS (the Common Language Specification)\n  return platform === 'csharp';\n}\n","import {trimPackage} from 'app/components/events/interfaces/frame/utils';\nimport {ExceptionValue, Frame} from 'app/types';\nimport {StacktraceType} from 'app/types/stacktrace';\nimport {defined, trim} from 'app/utils';\n\nfunction getJavaScriptFrame(frame: Frame): string {\n  let result = '';\n  if (defined(frame.function)) {\n    result += '  at ' + frame.function + '(';\n  } else {\n    result += '  at ? (';\n  }\n  if (defined(frame.filename)) {\n    result += frame.filename;\n  } else if (defined(frame.module)) {\n    result += frame.module;\n  }\n  if (defined(frame.lineNo) && frame.lineNo >= 0) {\n    result += ':' + frame.lineNo;\n  }\n  if (defined(frame.colNo) && frame.colNo >= 0) {\n    result += ':' + frame.colNo;\n  }\n  result += ')';\n  return result;\n}\n\nfunction getRubyFrame(frame: Frame): string {\n  let result = '  from ';\n  if (defined(frame.filename)) {\n    result += frame.filename;\n  } else if (defined(frame.module)) {\n    result += '(' + frame.module + ')';\n  } else {\n    result += '?';\n  }\n  if (defined(frame.lineNo) && frame.lineNo >= 0) {\n    result += ':' + frame.lineNo;\n  }\n  if (defined(frame.colNo) && frame.colNo >= 0) {\n    result += ':' + frame.colNo;\n  }\n  if (defined(frame.function)) {\n    result += ':in `' + frame.function + \"'\";\n  }\n  return result;\n}\n\nexport function getPHPFrame(frame: Frame, idx: number): string {\n  const funcName = frame.function === 'null' ? '{main}' : frame.function;\n  return `#${idx} ${frame.filename || frame.module}(${frame.lineNo}): ${funcName}`;\n}\n\nexport function getPythonFrame(frame: Frame): string {\n  let result = '';\n  if (defined(frame.filename)) {\n    result += '  File \"' + frame.filename + '\"';\n  } else if (defined(frame.module)) {\n    result += '  Module \"' + frame.module + '\"';\n  } else {\n    result += '  ?';\n  }\n  if (defined(frame.lineNo) && frame.lineNo >= 0) {\n    result += ', line ' + frame.lineNo;\n  }\n  if (defined(frame.colNo) && frame.colNo >= 0) {\n    result += ', col ' + frame.colNo;\n  }\n  if (defined(frame.function)) {\n    result += ', in ' + frame.function;\n  }\n  if (defined(frame.context)) {\n    frame.context.forEach(item => {\n      if (item[0] === frame.lineNo) {\n        result += '\\n    ' + trim(item[1]);\n      }\n    });\n  }\n  return result;\n}\n\nexport function getJavaFrame(frame: Frame): string {\n  let result = '    at';\n  if (defined(frame.module)) {\n    result += ' ' + frame.module + '.';\n  }\n  if (defined(frame.function)) {\n    result += frame.function;\n  }\n  if (defined(frame.filename)) {\n    result += '(' + frame.filename;\n    if (defined(frame.lineNo) && frame.lineNo >= 0) {\n      result += ':' + frame.lineNo;\n    }\n    result += ')';\n  }\n  return result;\n}\n\nfunction ljust(str: string, len: number) {\n  return str + Array(Math.max(0, len - str.length) + 1).join(' ');\n}\n\nexport function getNativeFrame(frame: Frame): string {\n  let result = '  ';\n  if (defined(frame.package)) {\n    result += ljust(trimPackage(frame.package), 20);\n  }\n  if (defined(frame.instructionAddr)) {\n    result += ljust(frame.instructionAddr, 12);\n  }\n  result += ' ' + (frame.function || frame.symbolAddr);\n  if (defined(frame.filename)) {\n    result += ' (' + frame.filename;\n    if (defined(frame.lineNo) && frame.lineNo >= 0) {\n      result += ':' + frame.lineNo;\n    }\n    result += ')';\n  }\n  return result;\n}\n\nexport function getJavaPreamble(exception: ExceptionValue): string {\n  let result = `${exception.type}: ${exception.value}`;\n  if (exception.module) {\n    result = `${exception.module}.${result}`;\n  }\n  return result;\n}\n\nfunction getPreamble(exception: ExceptionValue, platform: string | undefined): string {\n  switch (platform) {\n    case 'java':\n      return getJavaPreamble(exception);\n    default:\n      return exception.type + ': ' + exception.value;\n  }\n}\n\nfunction getFrame(frame: Frame, frameIdx: number, platform: string | undefined): string {\n  if (frame.platform) {\n    platform = frame.platform;\n  }\n  switch (platform) {\n    case 'javascript':\n      return getJavaScriptFrame(frame);\n    case 'ruby':\n      return getRubyFrame(frame);\n    case 'php':\n      return getPHPFrame(frame, frameIdx);\n    case 'python':\n      return getPythonFrame(frame);\n    case 'java':\n      return getJavaFrame(frame);\n    case 'objc':\n    // fallthrough\n    case 'cocoa':\n    // fallthrough\n    case 'native':\n      return getNativeFrame(frame);\n    default:\n      return getPythonFrame(frame);\n  }\n}\n\nexport default function render(\n  data: StacktraceType,\n  platform?: string,\n  exception?: ExceptionValue\n) {\n  const frames: string[] = [];\n\n  (data?.frames ?? []).forEach((frame, frameIdx) => {\n    frames.push(getFrame(frame, frameIdx, platform));\n  });\n\n  if (platform !== 'python') {\n    frames.reverse();\n  }\n\n  if (exception) {\n    frames.unshift(getPreamble(exception, platform));\n  }\n\n  return frames.join('\\n');\n}\n","export enum SymbolicatorStatus {\n  SYMBOLICATED = 'symbolicated',\n  MISSING_SYMBOL = 'missing_symbol',\n  UNKNOWN_IMAGE = 'unknown_image',\n  MISSING = 'missing',\n  MALFORMED = 'malformed',\n}\n","import {t} from 'app/locale';\nimport {EventGroupComponent, EventGroupInfo, EventGroupVariant} from 'app/types';\n\nfunction renderGroupingInfo(groupingInfo: EventGroupInfo): string[] {\n  return Object.values(groupingInfo).map(renderGroupVariant).flat();\n}\n\nfunction renderGroupVariant(variant: EventGroupVariant): string[] {\n  const title = [t('Type: %s', variant.type)];\n\n  if (variant.hash) {\n    title.push(t('Hash: %s', variant.hash));\n  }\n\n  if (variant.description) {\n    title.push(t('Description: %s', variant.description));\n  }\n\n  const rv = [title.join('\\n')];\n\n  if (variant.component) {\n    rv.push(renderComponent(variant.component).join('\\n'));\n  }\n\n  return rv;\n}\n\nfunction renderComponent(component: EventGroupComponent): string[] {\n  if (!component.contributes) {\n    return [];\n  }\n\n  const {name, id, hint} = component;\n  const name_or_id = name || id;\n  const title = name_or_id && hint ? `${name_or_id} (${hint})` : name_or_id;\n  const rv = title ? [title] : [];\n\n  if (component.values) {\n    for (const value of component.values) {\n      if (typeof value === 'string') {\n        rv.push(`  ${value}`);\n        continue;\n      }\n\n      for (const line of renderComponent(value)) {\n        rv.push(`  ${line}`);\n      }\n    }\n  }\n\n  return rv;\n}\n\nexport default renderGroupingInfo;\n","import {Component} from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport SplitDiff from 'app/components/splitDiff';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Project} from 'app/types';\nimport getStacktraceBody from 'app/utils/getStacktraceBody';\nimport withApi from 'app/utils/withApi';\n\nimport renderGroupingInfo from './renderGroupingInfo';\n\nconst defaultProps = {\n  baseEventId: 'latest',\n  targetEventId: 'latest',\n};\n\ntype DefaultProps = typeof defaultProps;\n\ntype Props = {\n  api: Client;\n  baseIssueId: string;\n  targetIssueId: string;\n  orgId: string;\n  project: Project;\n  baseEventId?: string;\n  targetEventId?: string;\n  className?: string;\n};\n\ntype State = {\n  loading: boolean;\n  groupingDiff: boolean;\n  baseEvent: Array<string>;\n  targetEvent: Array<string>;\n  SplitDiffAsync?: typeof SplitDiff;\n};\n\nclass IssueDiff extends Component<Props, State> {\n  static defaultProps: DefaultProps = defaultProps;\n\n  state: State = {\n    loading: true,\n    groupingDiff: false,\n    baseEvent: [],\n    targetEvent: [],\n\n    // `SplitDiffAsync` is an async-loaded component\n    // This will eventually contain a reference to the exported component from `./splitDiff`\n    SplitDiffAsync: undefined,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData() {\n    const {baseIssueId, targetIssueId, baseEventId, targetEventId} = this.props;\n\n    // Fetch component and event data\n    Promise.all([\n      import('../splitDiff'),\n      this.fetchEventData(baseIssueId, baseEventId ?? 'latest'),\n      this.fetchEventData(targetIssueId, targetEventId ?? 'latest'),\n    ])\n      .then(([{default: SplitDiffAsync}, baseEvent, targetEvent]) => {\n        this.setState({\n          SplitDiffAsync,\n          baseEvent,\n          targetEvent,\n          loading: false,\n        });\n      })\n      .catch(() => {\n        addErrorMessage(t('Error loading events'));\n      });\n  }\n\n  toggleDiffMode = () => {\n    this.setState(\n      state => ({groupingDiff: !state.groupingDiff, loading: true}),\n      this.fetchData\n    );\n  };\n\n  fetchEventData = async (issueId: string, eventId: string) => {\n    const {orgId, project, api} = this.props;\n    const {groupingDiff} = this.state;\n\n    let paramEventId = eventId;\n\n    if (eventId === 'latest') {\n      const event = await api.requestPromise(`/issues/${issueId}/events/latest/`);\n      paramEventId = event.eventID;\n    }\n\n    if (groupingDiff) {\n      const groupingInfo = await api.requestPromise(\n        `/projects/${orgId}/${project.slug}/events/${paramEventId}/grouping-info/`\n      );\n      return renderGroupingInfo(groupingInfo);\n    }\n\n    const event = await api.requestPromise(\n      `/projects/${orgId}/${project.slug}/events/${paramEventId}/`\n    );\n    return getStacktraceBody(event);\n  };\n\n  render() {\n    const {className, project} = this.props;\n    const {\n      SplitDiffAsync: DiffComponent,\n      loading,\n      groupingDiff,\n      baseEvent,\n      targetEvent,\n    } = this.state;\n\n    const showDiffToggle = project.features.includes('similarity-view-v2');\n\n    return (\n      <StyledIssueDiff className={className} loading={loading}>\n        {loading && <LoadingIndicator />}\n        {!loading && showDiffToggle && (\n          <HeaderWrapper>\n            <ButtonBar merged active={groupingDiff ? 'grouping' : 'event'}>\n              <Button barId=\"event\" size=\"small\" onClick={this.toggleDiffMode}>\n                {t('Diff stack trace and message')}\n              </Button>\n              <Button barId=\"grouping\" size=\"small\" onClick={this.toggleDiffMode}>\n                {t('Diff grouping information')}\n              </Button>\n            </ButtonBar>\n          </HeaderWrapper>\n        )}\n        {!loading &&\n          DiffComponent &&\n          baseEvent.map((value, i) => (\n            <DiffComponent\n              key={i}\n              base={value}\n              target={targetEvent[i] ?? ''}\n              type=\"words\"\n            />\n          ))}\n      </StyledIssueDiff>\n    );\n  }\n}\n\nexport default withApi(IssueDiff);\n\n// required for tests which do not provide API as context\nexport {IssueDiff};\n\nconst StyledIssueDiff = styled('div', {\n  shouldForwardProp: p => typeof p === 'string' && isPropValid(p) && p !== 'loading',\n})<Pick<State, 'loading'>>`\n  background-color: ${p => p.theme.backgroundSecondary};\n  overflow: auto;\n  padding: ${space(1)};\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n\n  ${p =>\n    p.loading &&\n    `\n        background-color: ${p.theme.background};\n        justify-content: center;\n        align-items: center;\n      `};\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  margin-bottom: ${space(2)};\n`;\n","import * as React from 'react';\nimport {css} from '@emotion/react';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport IssueDiff from 'app/components/issueDiff';\n\ntype Props = ModalRenderProps & React.ComponentProps<typeof IssueDiff>;\n\nconst DiffModal = ({className, Body, CloseButton, ...props}: Props) => (\n  <Body>\n    <CloseButton />\n    <IssueDiff className={className} {...props} />\n  </Body>\n);\n\nconst modalCss = css`\n  position: absolute;\n  left: 20px;\n  right: 20px;\n  top: 20px;\n  bottom: 20px;\n  display: flex;\n  padding: 0;\n  width: auto;\n\n  [role='document'] {\n    overflow: scroll;\n    height: 100%;\n    display: flex;\n    flex: 1;\n  }\n\n  section {\n    display: flex;\n    width: 100%;\n  }\n`;\n\nexport {modalCss};\n\nexport default DiffModal;\n","import rawStacktraceContent from 'app/components/events/interfaces/rawStacktraceContent';\nimport {Event} from 'app/types/event';\n\nexport default function getStacktraceBody(event: Event) {\n  if (!event || !event.entries) {\n    return [];\n  }\n\n  // TODO(billyvg): This only accounts for the first exception, will need navigation to be able to\n  // diff multiple exceptions\n  //\n  // See: https://github.com/getsentry/sentry/issues/6055\n  const exc = event.entries.find(({type}) => type === 'exception');\n\n  if (!exc) {\n    // Look for a message if not an exception\n    const msg = event.entries.find(({type}) => type === 'message');\n    if (!msg) {\n      return [];\n    }\n    return msg?.data?.formatted && [msg.data.formatted];\n  }\n\n  if (!exc.data) {\n    return [];\n  }\n\n  // TODO(ts): This should be verified when EntryData has the correct type\n  return exc.data.values\n    .filter(value => !!value.stacktrace)\n    .map(value => rawStacktraceContent(value.stacktrace, event.platform, value))\n    .reduce((acc, value) => acc.concat(value), []);\n}\n","import * as React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n","'use strict';\nvar $ = require('../internals/export');\nvar flattenIntoArray = require('../internals/flatten-into-array');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar toInteger = require('../internals/to-integer');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.flat` method\n// https://tc39.es/ecma262/#sec-array.prototype.flat\n$({ target: 'Array', proto: true }, {\n  flat: function flat(/* depthArg = 1 */) {\n    var depthArg = arguments.length ? arguments[0] : undefined;\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A = arraySpeciesCreate(O, 0);\n    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));\n    return A;\n  }\n});\n"],"sourceRoot":""}