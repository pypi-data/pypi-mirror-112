{"version":3,"sources":["webpack:///./app/components/confirmDelete.tsx","webpack:///./app/views/settings/components/forms/richListField.tsx"],"names":["ConfirmDelete","message","confirmInput","props","bypass","disableConfirmButton","renderMessage","type","flexibleControlStateSize","inline","label","t","placeholder","onChange","e","target","value","RichList","items","disabled","onBlur","data","triggerChange","index","splice","item","onAddItem","addItem","onEditItem","omit","updateItem","onRemoveItem","removeItem","renderItem","removeConfirm","error","warning","Item","onClick","undefined","StatusIcon","title","containerDisplayMode","color","SettingsButton","icon","size","borderless","DeleteButtonWrapper","event","preventDefault","stopPropagation","confirmText","name","priority","onConfirm","DeleteButton","addDropdown","onSelect","onSelectDropdownItem","isOpen","isCircled","addButtonText","ItemList","this","map","renderDropdown","React","RichListField","field","fieldProps","otherProps","length","p","theme","button","borderRadius","fontSizeSmall","space","background","border","ItemButton","Button","gray300"],"mappings":"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","file":"chunks/app_views_settings_components_forms_richListField_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\n\nimport Alert from 'app/components/alert';\nimport Confirm from 'app/components/confirm';\nimport {t} from 'app/locale';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport Field from 'app/views/settings/components/forms/field';\n\ntype Props = Omit<React.ComponentProps<typeof Confirm>, 'renderConfirmMessage'> & {\n  /**\n   * The string that the user must enter to confirm the deletion\n   */\n  confirmInput: string;\n};\n\nconst ConfirmDelete = ({message, confirmInput, ...props}: Props) => (\n  <Confirm\n    {...props}\n    bypass={false}\n    disableConfirmButton\n    renderMessage={({disableConfirmButton}) => (\n      <React.Fragment>\n        <Alert type=\"error\">{message}</Alert>\n        <Field\n          flexibleControlStateSize\n          inline={false}\n          label={t(\n            'Please enter %s to confirm the deletion',\n            <code>{confirmInput}</code>\n          )}\n        >\n          <Input\n            type=\"text\"\n            placeholder={confirmInput}\n            onChange={e => disableConfirmButton(e.target.value !== confirmInput)}\n          />\n        </Field>\n      </React.Fragment>\n    )}\n  />\n);\n\nexport default ConfirmDelete;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport Button from 'app/components/button';\nimport ConfirmDelete from 'app/components/confirmDelete';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport {Item as ListItem} from 'app/components/dropdownAutoComplete/types';\nimport DropdownButton from 'app/components/dropdownButton';\nimport Tooltip from 'app/components/tooltip';\nimport {IconAdd, IconDelete, IconSettings, IconWarning} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype ConfirmDeleteProps = Partial<React.ComponentProps<typeof ConfirmDelete>>;\ntype DropdownProps = Omit<React.ComponentProps<typeof DropdownAutoComplete>, 'children'>;\n\ntype UpdatedItem = ListItem | Record<string, string>;\n\ntype DefaultProps = {\n  /**\n   * Text used for the add item button.\n   */\n  addButtonText: string;\n\n  /**\n   * Callback invoked when an item is added via the dropdown menu.\n   *\n   * The callback is expected to call `addItem(item)`\n   */\n  onAddItem: RichListCallback;\n\n  /**\n   * Callback invoked when an item is removed.\n   *\n   * The callback is expected to call `removeItem(item)`\n   */\n  onRemoveItem: RichListCallback;\n};\n\n/**\n * You can get better typing by specifying the item type\n * when using this component.\n *\n * The callback parameter accepts a more general type than `ListItem` as the\n * callback handler can perform arbitrary logic and extend the payload in\n * ways that are hard to type.\n */\nexport type RichListCallback = (\n  item: ListItem,\n  callback: (item: UpdatedItem) => void\n) => void;\n\nexport type RichListProps = {\n  /**\n   * Render function to render an item.\n   */\n  renderItem: (item: ListItem) => React.ReactNode;\n\n  /**\n   * The list of items to render.\n   */\n  value: ListItem[];\n\n  /**\n   * Configuration for the add item dropdown.\n   */\n  addDropdown: DropdownProps;\n\n  /**\n   * Disables all controls in the rich list.\n   */\n  disabled: boolean;\n\n  onBlur?: InputField['props']['onBlur'];\n  onChange?: InputField['props']['onChange'];\n\n  /**\n   * Properties for the confirm delete dialog. If missing, the item will be\n   * removed immediately.\n   */\n  removeConfirm?: Omit<ConfirmDeleteProps, 'onConfirm'> & {\n    onConfirm?: (item: ListItem) => void;\n  };\n\n  /**\n   * Callback invoked when an item is interacted with.\n   *\n   * The callback is expected to call `editItem(item)`\n   */\n  onEditItem?: RichListCallback;\n} & Partial<DefaultProps>;\n\nclass RichList extends React.PureComponent<RichListProps, {}> {\n  static defaultProps: DefaultProps = {\n    addButtonText: t('Add item'),\n    onAddItem: (item, addItem) => addItem(item),\n    onRemoveItem: (item, removeItem) => removeItem(item),\n  };\n\n  triggerChange = (items: UpdatedItem[]) => {\n    if (!this.props.disabled) {\n      this.props.onChange?.(items, {});\n      this.props.onBlur?.(items, {});\n    }\n  };\n\n  addItem = (data: UpdatedItem) => {\n    const items = [...this.props.value, data];\n    this.triggerChange(items);\n  };\n\n  updateItem = (data: UpdatedItem, index: number) => {\n    const items = [...this.props.value] as UpdatedItem[];\n    items.splice(index, 1, data);\n    this.triggerChange(items);\n  };\n\n  removeItem = (index: number) => {\n    const items = [...this.props.value];\n    items.splice(index, 1);\n    this.triggerChange(items);\n  };\n\n  onSelectDropdownItem = (item: ListItem) => {\n    if (!this.props.disabled && this.props.onAddItem) {\n      this.props.onAddItem(item, this.addItem);\n    }\n  };\n\n  onEditItem = (item: ListItem, index: number) => {\n    if (!this.props.disabled) {\n      this.props.onEditItem?.(omit(item, 'error') as ListItem, data =>\n        this.updateItem(data, index)\n      );\n    }\n  };\n\n  onRemoveItem = (item: ListItem, index: number) => {\n    if (!this.props.disabled) {\n      this.props.onRemoveItem?.(item, () => this.removeItem(index));\n    }\n  };\n\n  renderItem = (item: ListItem, index: number) => {\n    const {disabled, renderItem, onEditItem, removeConfirm} = this.props;\n\n    const error = item.error;\n    const warning = item.warning;\n\n    return (\n      <Item\n        disabled={!!disabled}\n        key={index}\n        onClick={\n          (error || warning) && onEditItem && !disabled\n            ? () => this.onEditItem(item, index)\n            : undefined\n        }\n      >\n        {renderItem(item)}\n        {error ? (\n          <StatusIcon>\n            <Tooltip title={error} containerDisplayMode=\"inline-flex\">\n              <IconWarning color=\"red300\" />\n            </Tooltip>\n          </StatusIcon>\n        ) : warning ? (\n          <StatusIcon>\n            <Tooltip title={warning} containerDisplayMode=\"inline-flex\">\n              <IconWarning color=\"yellow300\" />\n            </Tooltip>\n          </StatusIcon>\n        ) : (\n          onEditItem && (\n            <SettingsButton\n              onClick={() => this.onEditItem(item, index)}\n              disabled={disabled}\n              icon={<IconSettings />}\n              size=\"zero\"\n              label={t('Edit Item')}\n              borderless\n            />\n          )\n        )}\n        <DeleteButtonWrapper\n          onClick={event => {\n            event.preventDefault();\n            event.stopPropagation();\n          }}\n        >\n          {removeConfirm ? (\n            <ConfirmDelete\n              confirmText={t('Remove')}\n              disabled={disabled}\n              {...removeConfirm}\n              confirmInput={item.name}\n              priority=\"danger\"\n              onConfirm={() => {\n                this.onRemoveItem(item, index);\n                removeConfirm.onConfirm?.(item);\n              }}\n            >\n              <DeleteButton\n                disabled={disabled}\n                size=\"zero\"\n                icon={<IconDelete size=\"xs\" />}\n                label={t('Delete Item')}\n                borderless\n              />\n            </ConfirmDelete>\n          ) : (\n            <DeleteButton\n              disabled={disabled}\n              size=\"zero\"\n              icon={<IconDelete size=\"xs\" />}\n              label={t('Delete Item')}\n              onClick={() => this.onRemoveItem(item, index)}\n              borderless\n            />\n          )}\n        </DeleteButtonWrapper>\n      </Item>\n    );\n  };\n\n  renderDropdown = () => {\n    const {disabled} = this.props;\n\n    return (\n      <DropdownAutoComplete\n        {...this.props.addDropdown}\n        disabled={disabled}\n        onSelect={this.onSelectDropdownItem}\n      >\n        {({isOpen}) => (\n          <DropdownButton\n            disabled={disabled}\n            icon={<IconAdd size=\"xs\" isCircled />}\n            isOpen={isOpen}\n            size=\"small\"\n          >\n            {this.props.addButtonText}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  };\n\n  render() {\n    return (\n      <ItemList>\n        {this.props.value.map(this.renderItem)}\n        {this.renderDropdown()}\n      </ItemList>\n    );\n  }\n}\n\n/**\n * A 'rich' dropdown that provides action hooks for when item\n * are selected/created/removed.\n *\n * An example usage is the debug image selector where each 'source' option\n * requires additional configuration data.\n */\nexport default function RichListField(props: RichListProps & InputField['props']) {\n  return (\n    <InputField\n      {...props}\n      field={(fieldProps: RichListProps) => {\n        const {value, ...otherProps} = fieldProps;\n\n        // We must not render this field until `setValue` has been applied by the\n        // model, which is done after the field is mounted for the first time. To\n        // check this, we cannot use Array.isArray because the value passed in by\n        // the model might actually be an ObservableArray.\n        if (typeof value === 'string' || value?.length === undefined) {\n          return null;\n        }\n        return <RichList {...otherProps} value={[...value]} />;\n      }}\n    />\n  );\n}\n\nconst ItemList = styled('ul')`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  padding: 0;\n`;\n\nconst Item = styled('li')<{\n  disabled: boolean;\n  onClick?: (event: React.MouseEvent) => void;\n}>`\n  position: relative;\n  display: flex;\n  align-items: center;\n  border-radius: ${p => p.theme.button.borderRadius};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  line-height: ${p => p.theme.fontSizeSmall};\n  text-transform: none;\n  margin: 0 10px 5px 0;\n  white-space: nowrap;\n  padding: ${space(1)} 36px ${space(1)} ${space(1.5)};\n  /* match adjacent elements */\n  height: 32px;\n  overflow: hidden;\n  background-color: ${p => p.theme.button.default.background};\n  border: 1px solid ${p => p.theme.button.default.border};\n  color: ${p => p.theme.button.default.color};\n  opacity: ${p => (p.disabled ? 0.65 : null)};\n  cursor: ${p => (p.disabled ? 'not-allowed' : p.onClick ? 'pointer' : 'default')};\n`;\n\nconst ItemButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n  &:hover {\n    color: ${p => (p.disabled ? p.theme.gray300 : p.theme.button.default.color)};\n  }\n`;\n\nconst SettingsButton = styled(ItemButton)`\n  margin-left: 10px;\n`;\n\nconst DeleteButton = styled(ItemButton)`\n  height: 100%;\n  width: 100%;\n`;\n\nconst StatusIcon = styled('div')`\n  margin-left: 10px;\n  display: inline-flex;\n`;\n\nconst DeleteButtonWrapper = styled('div')`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1;\n  right: 0;\n  width: 36px;\n  height: 100%;\n`;\n"],"sourceRoot":""}