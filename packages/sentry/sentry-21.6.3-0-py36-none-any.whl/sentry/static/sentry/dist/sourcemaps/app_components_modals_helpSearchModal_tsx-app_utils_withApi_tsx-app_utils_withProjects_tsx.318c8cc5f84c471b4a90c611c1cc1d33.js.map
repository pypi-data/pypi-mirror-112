{"version":3,"sources":["webpack:///./app/actions/projectActions.tsx","webpack:///./app/actions/teamActions.tsx","webpack:///./app/components/hook.tsx","webpack:///./app/utils/parseHtmlMarks.tsx","webpack:///./app/components/search/sources/helpSource.tsx","webpack:///./app/components/helpSearch.tsx","webpack:///./app/components/modals/helpSearchModal.tsx","webpack:///./app/stores/projectsStore.tsx","webpack:///./app/utils/withApi.tsx","webpack:///./app/utils/withProjects.tsx"],"names":["Reflux","Hook","name","props","HookComponent","hooks","HookStore","map","cb","hookName","handleHooks","undefined","this","unsubscribe","setState","children","state","length","React","parseHtmlMarks","key","htmlString","markTags","highlightPreTag","highlightPostTag","indices","value","openIndex","indexOf","openIndexEnd","closeIndex","slice","closeIndexEnd","push","MARK_TAGS","HelpSource","loading","results","SentryGlobalSearch","debounce","unbouncedSearch","query","doSearch","nextProps","platforms","search","platform","standardSDKSlug","slug","searchResults","mapSearchResults","isLoading","items","forEach","section","sectionItems","hits","hit","title","description","text","item","sourceType","resultType","site","dompurify","extra","context","context1","to","url","matches","score","sectionHeading","sectionCount","emptyHeaderItem","empty","withLatestContext","withRouter","renderResult","itemProps","highlighted","SectionHeading","t","Count","tn","Empty","HelpSearch","sources","minSearch","closeOnSelect","renderItem","space","p","theme","backgroundSecondary","innerBorder","fontSizeSmall","gray300","subText","fontSizeMedium","HelpSearchModal","Body","closeModal","organization","placeholder","injectedCss","css","entryPoint","dropdownStyle","border","renderInput","getInputProps","InputWrapper","Input","autoFocus","type","label","resultFooter","modalCss","withTheme","withOrganization","storeConfig","itemsById","init","reset","listenTo","ProjectActions","onAddTeam","onChangeSlug","onCreateSuccess","loadInitialData","onStatsLoadSuccess","onRemoveTeam","onUpdateSuccess","TeamActions","onDeleteTeam","reduce","project","id","trigger","Set","Object","keys","prevSlug","newSlug","prevProject","getBySlug","newProject","data","getById","assign","touchedIds","entries","projectId","stats","teamSlug","projectIds","getWithTeam","projectWithTeam","removeTeamFromProject","projectSlug","team","teams","newTeams","filter","getAll","find","values","sort","a","b","getBySlugs","slugs","includes","getState","projects","WrappedComponent","persistInFlight","api","Client","clear","getDisplayName","WithProjects","ProjectsStore","loadingProjects"],"mappings":"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","file":"chunks/app_components_modals_helpSearchModal_tsx-app_utils_withApi_tsx-app_utils_withProjects_tsx.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'addTeam',\n  'addTeamError',\n  'addTeamSuccess',\n  'changeSlug',\n  'createSuccess',\n  'loadProjects',\n  'loadStats',\n  'loadStatsError',\n  'loadStatsForProjectSuccess',\n  'loadStatsSuccess',\n  'removeProject',\n  'removeProjectError',\n  'removeProjectSuccess',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'reset',\n  'setActive',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n","import Reflux from 'reflux';\n\nconst TeamActions = Reflux.createActions([\n  'createTeam',\n  'createTeamError',\n  'createTeamSuccess',\n  'fetchAll',\n  'fetchAllError',\n  'fetchAllSuccess',\n  'fetchDetails',\n  'fetchDetailsError',\n  'fetchDetailsSuccess',\n  'loadTeams',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n\nexport default TeamActions;\n","import * as React from 'react';\n\nimport HookStore from 'app/stores/hookStore';\nimport {HookName, Hooks} from 'app/types/hooks';\n\ntype Props<H extends HookName> = {\n  /**\n   * The name of the hook as listed in hookstore.add(hookName, callback)\n   */\n  name: H;\n  /**\n   * If children are provided as a function to the Hook, the hooks will be\n   * passed down as a render prop.\n   */\n  children?: (opts: {hooks: Array<Hooks[H]>}) => React.ReactNode;\n} & Omit<Parameters<Hooks[H]>[0], 'name'>;\n\ntype HookState<H extends HookName> = {\n  hooks: Array<Hooks[H]>;\n};\n\n/**\n * Instead of accessing the HookStore directly, use this.\n *\n * If the hook slot needs to perform anything w/ the hooks, you can pass a\n * function as a child and you will receive an object with a `hooks` key\n *\n * Example:\n *\n *   <Hook name=\"my-hook\">\n *     {({hooks}) => hooks.map(hook => (\n *       <Wrapper>{hook}</Wrapper>\n *     ))}\n *   </Hook>\n */\nfunction Hook<H extends HookName>({name, ...props}: Props<H>) {\n  class HookComponent extends React.Component<{}, HookState<H>> {\n    static displayName = `Hook(${name})`;\n\n    state = {\n      hooks: HookStore.get(name).map(cb => cb(props)),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    handleHooks(hookName: HookName, hooks: Array<Hooks[H]>) {\n      // Make sure that the incoming hook update matches this component's hook name\n      if (hookName !== name) {\n        return;\n      }\n\n      this.setState({hooks: hooks.map(cb => cb(props))});\n    }\n\n    unsubscribe = HookStore.listen(\n      (hookName: HookName, hooks: Array<Hooks[H]>) => this.handleHooks(hookName, hooks),\n      undefined\n    );\n\n    render() {\n      const {children} = props;\n\n      if (!this.state.hooks || !this.state.hooks.length) {\n        return null;\n      }\n\n      if (typeof children === 'function') {\n        return children({hooks: this.state.hooks});\n      }\n\n      return this.state.hooks;\n    }\n  }\n\n  return <HookComponent />;\n}\n\nexport default Hook;\n","type Options = {\n  key: string;\n  htmlString: string;\n  markTags: {\n    highlightPreTag: string;\n    highlightPostTag: string;\n  };\n};\n\n/**\n * Parses the \"marked\" html strings into a {key, value, indices} (similar to\n * Fuse.js) object, where the indices are a set of zero indexed [start, end]\n * indices for what should be highlighted.\n *\n * @param key The key of the field, this mimics the Fuse match object\n * @param htmlString The html string to parse\n * @param markTags.highlightPreTag The left tag\n * @param markTags.highlightPostTag The right tag\n */\nexport default function parseHtmlMarks({key, htmlString, markTags}: Options) {\n  const {highlightPreTag, highlightPostTag} = markTags;\n\n  const indices: [number, number][] = [];\n  let value = htmlString;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const openIndex = value.indexOf(highlightPreTag);\n    const openIndexEnd = openIndex + highlightPreTag.length;\n    if (openIndex === -1 || value.indexOf(highlightPostTag) === -1) {\n      break;\n    }\n    value = value.slice(0, openIndex) + value.slice(openIndexEnd);\n\n    const closeIndex = value.indexOf(highlightPostTag);\n    const closeIndexEnd = closeIndex + highlightPostTag.length;\n    value = value.slice(0, closeIndex) + value.slice(closeIndexEnd);\n\n    indices.push([openIndex, closeIndex - 1]);\n  }\n\n  return {key, value, indices};\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport {\n  Result as SearchResult,\n  SentryGlobalSearch,\n  standardSDKSlug,\n} from '@sentry-internal/global-search';\nimport dompurify from 'dompurify';\nimport debounce from 'lodash/debounce';\n\nimport {Organization, Project} from 'app/types';\nimport parseHtmlMarks from 'app/utils/parseHtmlMarks';\nimport withLatestContext from 'app/utils/withLatestContext';\n\nimport {ChildProps, Result, ResultItem} from './types';\n\ntype Props = WithRouterProps & {\n  organization: Organization;\n  project: Project;\n  /**\n   * Specific platforms to filter reults to\n   */\n  platforms: string[];\n  /**\n   * The string to search the navigation routes for\n   */\n  query: string;\n  /**\n   * Render function that renders the global search result\n   */\n  children: (props: ChildProps) => React.ReactNode;\n};\n\ntype State = {\n  loading: boolean;\n  results: Result[];\n};\n\nconst MARK_TAGS = {\n  highlightPreTag: '<mark>',\n  highlightPostTag: '</mark>',\n};\n\nclass HelpSource extends React.Component<Props, State> {\n  state: State = {\n    loading: false,\n    results: [],\n  };\n\n  componentDidMount() {\n    if (this.props.query !== undefined) {\n      this.doSearch(this.props.query);\n    }\n  }\n\n  componentDidUpdate(nextProps: Props) {\n    if (nextProps.query !== this.props.query) {\n      this.doSearch(nextProps.query);\n    }\n  }\n\n  search = new SentryGlobalSearch(['docs', 'help-center', 'develop', 'blog']);\n\n  async unbouncedSearch(query: string) {\n    this.setState({loading: true});\n    const {platforms = []} = this.props;\n\n    const searchResults = await this.search.query(query, {\n      platforms: platforms.map(platform => standardSDKSlug(platform)?.slug!),\n    });\n    const results = mapSearchResults(searchResults);\n\n    this.setState({loading: false, results});\n  }\n\n  doSearch = debounce(this.unbouncedSearch, 300);\n\n  render() {\n    return this.props.children({\n      isLoading: this.state.loading,\n      results: this.state.results,\n    });\n  }\n}\n\nfunction mapSearchResults(results: SearchResult[]) {\n  const items: Result[] = [];\n\n  results.forEach(section => {\n    const sectionItems = section.hits.map<Result>(hit => {\n      const title = parseHtmlMarks({\n        key: 'title',\n        htmlString: hit.title ?? '',\n        markTags: MARK_TAGS,\n      });\n      const description = parseHtmlMarks({\n        key: 'description',\n        htmlString: hit.text ?? '',\n        markTags: MARK_TAGS,\n      });\n\n      const item: ResultItem = {\n        ...hit,\n        sourceType: 'help',\n        resultType: `help-${hit.site}` as ResultItem['resultType'],\n        title: dompurify.sanitize(hit.title ?? ''),\n        extra: hit.context.context1,\n        description: hit.text ? dompurify.sanitize(hit.text) : undefined,\n        to: hit.url,\n      };\n\n      return {item, matches: [title, description], score: 1};\n    });\n\n    // The first element should indicate the section.\n    if (sectionItems.length > 0) {\n      sectionItems[0].item.sectionHeading = section.name;\n      sectionItems[0].item.sectionCount = sectionItems.length;\n\n      items.push(...sectionItems);\n      return;\n    }\n\n    // If we didn't have any results for this section mark it as empty\n    const emptyHeaderItem: ResultItem = {\n      sourceType: 'help',\n      resultType: `help-${section.site}` as ResultItem['resultType'],\n      title: `No results in ${section.name}`,\n      sectionHeading: section.name,\n      empty: true,\n    };\n\n    items.push({item: emptyHeaderItem, score: 1});\n  });\n\n  return items;\n}\n\nexport {HelpSource};\nexport default withLatestContext(withRouter(HelpSource));\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Search from 'app/components/search';\nimport SearchResult from 'app/components/search/searchResult';\nimport SearchResultWrapper from 'app/components/search/searchResultWrapper';\nimport HelpSource from 'app/components/search/sources/helpSource';\nimport {IconWindow} from 'app/icons';\nimport {t, tn} from 'app/locale';\nimport space from 'app/styles/space';\n\ntype HelpResult = Parameters<\n  React.ComponentProps<typeof HelpSource>['children']\n>[0]['results'][0];\n\ntype ResultItemProps = HelpResult & {\n  highlighted: boolean;\n  // TODO(ts): Improve types when we've typed more of the search components\n  itemProps: any;\n};\n\nconst renderResult = ({item, matches, itemProps, highlighted}: ResultItemProps) => {\n  const sectionHeading =\n    item.sectionHeading !== undefined ? (\n      <SectionHeading>\n        <IconWindow />\n        {t('From %s', item.sectionHeading)}\n        <Count>{tn('%s result', '%s results', item.sectionCount ?? 0)}</Count>\n      </SectionHeading>\n    ) : null;\n\n  if (item.empty) {\n    return (\n      <React.Fragment>\n        {sectionHeading}\n        <Empty>{t('No results from %s', item.sectionHeading)}</Empty>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      {sectionHeading}\n      <SearchResultWrapper {...itemProps} highlighted={highlighted}>\n        <SearchResult highlighted={highlighted} item={item} matches={matches} />\n      </SearchResultWrapper>\n    </React.Fragment>\n  );\n};\n\n// TODO(ts): Type based on Search props once that has types\nconst HelpSearch = props => (\n  <Search\n    {...props}\n    sources={[HelpSource]}\n    minSearch={3}\n    closeOnSelect={false}\n    renderItem={renderResult}\n  />\n);\n\nconst SectionHeading = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr max-content;\n  grid-gap: ${space(1)};\n  align-items: center;\n  background: ${p => p.theme.backgroundSecondary};\n  padding: ${space(1)} ${space(2)};\n\n  &:not(:first-of-type) {\n    border-top: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\nconst Count = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.gray300};\n`;\n\nconst Empty = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(2)};\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  border-top: 1px solid ${p => p.theme.innerBorder};\n`;\n\nexport default HelpSearch;\n","import {ClassNames, css, withTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport HelpSearch from 'app/components/helpSearch';\nimport Hook from 'app/components/hook';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport {Theme} from 'app/utils/theme';\nimport withOrganization from 'app/utils/withOrganization';\n\ntype Props = ModalRenderProps & {\n  theme: Theme;\n  organization: Organization;\n  placeholder?: string;\n};\n\nconst HelpSearchModal = ({\n  Body,\n  closeModal,\n  theme,\n  organization,\n  placeholder = t('Search for documentation, FAQs, blog posts...'),\n  ...props\n}: Props) => (\n  <Body>\n    <ClassNames>\n      {({css: injectedCss}) => (\n        <HelpSearch\n          {...props}\n          entryPoint=\"sidebar_help\"\n          dropdownStyle={injectedCss`\n                width: 100%;\n                border: transparent;\n                border-top-left-radius: 0;\n                border-top-right-radius: 0;\n                position: initial;\n                box-shadow: none;\n                border-top: 1px solid ${theme.border};\n              `}\n          renderInput={({getInputProps}) => (\n            <InputWrapper>\n              <Input\n                autoFocus\n                {...getInputProps({type: 'text', label: placeholder, placeholder})}\n              />\n            </InputWrapper>\n          )}\n          resultFooter={<Hook name=\"help-modal:footer\" {...{organization, closeModal}} />}\n        />\n      )}\n    </ClassNames>\n  </Body>\n);\n\nconst InputWrapper = styled('div')`\n  padding: ${space(0.25)};\n`;\n\nconst Input = styled('input')`\n  width: 100%;\n  padding: ${space(1)};\n  border: none;\n  border-radius: 8px;\n  outline: none;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const modalCss = css`\n  [role='document'] {\n    padding: 0;\n  }\n`;\n\nexport default withTheme(withOrganization(HelpSearchModal));\n","import Reflux from 'reflux';\n\nimport ProjectActions from 'app/actions/projectActions';\nimport TeamActions from 'app/actions/teamActions';\nimport {Project, Team} from 'app/types';\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\ntype StatsData = Record<string, Project['stats']>;\n\n/**\n * Attributes that need typing but aren't part of the external interface,\n */\ntype Internals = {\n  itemsById: Record<string, Project>;\n  loading: boolean;\n};\n\ntype ProjectsStoreInterface = {\n  init: () => void;\n  reset: () => void;\n  loadInitialData: (projects: Project[]) => void;\n  onStatsLoadSuccess: (data: StatsData) => void;\n  onChangeSlug: (prevSlug: string, newSlug: string) => void;\n  onCreateSuccess: (project: Project) => void;\n  onUpdateSuccess: (data: Partial<Project>) => void;\n  onDeleteTeam: (slug: string) => void;\n  onRemoveTeam: (teamSlug: string, projectSlug: string) => void;\n  onAddTeam: (team: Team, projectSlug: string) => void;\n  removeTeamFromProject: (teamSlug: string, project: Project) => void;\n  getWithTeam: (teamSlug: string) => Project[];\n  getAll: () => Project[];\n  getBySlugs: (slug: string[]) => Project[];\n  getState: (slugs?: string[]) => State;\n  getById: (id?: string) => Project | undefined;\n  getBySlug: (slug?: string) => Project | undefined;\n};\n\nconst storeConfig: Reflux.StoreDefinition & Internals & ProjectsStoreInterface = {\n  itemsById: {},\n  loading: true,\n\n  init() {\n    this.reset();\n\n    this.listenTo(ProjectActions.addTeamSuccess, this.onAddTeam);\n    this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);\n    this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);\n    this.listenTo(ProjectActions.loadProjects, this.loadInitialData);\n    this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess);\n    this.listenTo(ProjectActions.removeTeamSuccess, this.onRemoveTeam);\n    this.listenTo(ProjectActions.reset, this.reset);\n    this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);\n\n    this.listenTo(TeamActions.removeTeamSuccess, this.onDeleteTeam);\n  },\n\n  reset() {\n    this.itemsById = {};\n    this.loading = true;\n  },\n\n  loadInitialData(items: Project[]) {\n    this.itemsById = items.reduce((map, project) => {\n      map[project.id] = project;\n      return map;\n    }, {});\n    this.loading = false;\n    this.trigger(new Set(Object.keys(this.itemsById)));\n  },\n\n  onChangeSlug(prevSlug: string, newSlug: string) {\n    const prevProject = this.getBySlug(prevSlug);\n\n    // This shouldn't happen\n    if (!prevProject) {\n      return;\n    }\n\n    const newProject = {\n      ...prevProject,\n      slug: newSlug,\n    };\n\n    this.itemsById = {\n      ...this.itemsById,\n      [newProject.id]: newProject,\n    };\n\n    // Ideally we'd always trigger this.itemsById, but following existing patterns\n    // so we don't break things\n    this.trigger(new Set([prevProject.id]));\n  },\n\n  onCreateSuccess(project: Project) {\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: project,\n    };\n    this.trigger(new Set([project.id]));\n  },\n\n  onUpdateSuccess(data: Partial<Project>) {\n    const project = this.getById(data.id);\n    if (!project) {\n      return;\n    }\n    const newProject = Object.assign({}, project, data);\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: newProject,\n    };\n    this.trigger(new Set([data.id]));\n  },\n\n  onStatsLoadSuccess(data) {\n    const touchedIds: string[] = [];\n    Object.entries(data || {}).forEach(([projectId, stats]) => {\n      if (projectId in this.itemsById) {\n        this.itemsById[projectId].stats = stats;\n        touchedIds.push(projectId);\n      }\n    });\n    this.trigger(new Set(touchedIds));\n  },\n\n  /**\n   * Listener for when a team is completely removed\n   *\n   * @param teamSlug Team Slug\n   */\n  onDeleteTeam(teamSlug: string) {\n    // Look for team in all projects\n    const projectIds = this.getWithTeam(teamSlug).map(projectWithTeam => {\n      this.removeTeamFromProject(teamSlug, projectWithTeam);\n      return projectWithTeam.id;\n    });\n\n    this.trigger(new Set([projectIds]));\n  },\n\n  onRemoveTeam(teamSlug: string, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n    if (!project) {\n      return;\n    }\n\n    this.removeTeamFromProject(teamSlug, project);\n    this.trigger(new Set([project.id]));\n  },\n\n  onAddTeam(team: Team, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    // Don't do anything if we can't find a project\n    if (!project) {\n      return;\n    }\n\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: {\n        ...project,\n        teams: [...project.teams, team],\n      },\n    };\n\n    this.trigger(new Set([project.id]));\n  },\n\n  // Internal method, does not trigger\n  removeTeamFromProject(teamSlug: string, project: Project) {\n    const newTeams = project.teams.filter(({slug}) => slug !== teamSlug);\n\n    this.itemsById = {\n      ...this.itemsById,\n      [project.id]: {\n        ...project,\n        teams: newTeams,\n      },\n    };\n  },\n\n  /**\n   * Returns a list of projects that has the specified team\n   *\n   * @param {String} teamSlug Slug of team to find in projects\n   */\n  getWithTeam(teamSlug: string) {\n    return this.getAll().filter(({teams}) => teams.find(({slug}) => slug === teamSlug));\n  },\n\n  getAll() {\n    return Object.values(this.itemsById).sort((a: Project, b: Project) => {\n      if (a.slug > b.slug) {\n        return 1;\n      }\n      if (a.slug < b.slug) {\n        return -1;\n      }\n      return 0;\n    });\n  },\n\n  getById(id) {\n    return this.getAll().find(project => project.id === id);\n  },\n\n  getBySlug(slug) {\n    return this.getAll().find(project => project.slug === slug);\n  },\n\n  getBySlugs(slugs: string[]) {\n    return this.getAll().filter(project => slugs.includes(project.slug));\n  },\n\n  getState(slugs?: string[]): State {\n    return {\n      projects: slugs ? this.getBySlugs(slugs) : this.getAll(),\n      loading: this.loading,\n    };\n  },\n};\n\ntype ProjectsStore = Reflux.Store & ProjectsStoreInterface;\n\nconst ProjectsStore = Reflux.createStore(storeConfig) as ProjectsStore;\n\nexport default ProjectsStore;\n","import * as React from 'react';\n\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\ntype OptionProps = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * some where the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  {persistInFlight}: OptionProps = {}\n) =>\n  class extends React.Component<WrappedProps<P>> {\n    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: WrappedProps<P>) {\n      super(props);\n      this.api = new Client();\n    }\n\n    componentWillUnmount() {\n      if (!persistInFlight) {\n        this.api.clear();\n      }\n    }\n\n    private api: Client;\n\n    render() {\n      const {api, ...props} = this.props;\n      return <WrappedComponent {...({api: api ?? this.api, ...props} as P)} />;\n    }\n  };\n\nexport default withApi;\n","import * as React from 'react';\n\nimport ProjectsStore from 'app/stores/projectsStore';\nimport {Project} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedProjectsProps = {\n  projects: Project[];\n  loadingProjects?: boolean;\n};\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\n/**\n * Higher order component that uses ProjectsStore and provides a list of projects\n */\nfunction withProjects<P extends InjectedProjectsProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithProjects extends React.Component<\n    Omit<P, keyof InjectedProjectsProps> & Partial<InjectedProjectsProps>,\n    State\n  > {\n    static displayName = `withProjects(${getDisplayName(WrappedComponent)})`;\n\n    state: State = ProjectsStore.getState();\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = ProjectsStore.listen(\n      () => this.setState(ProjectsStore.getState()),\n      undefined\n    );\n\n    render() {\n      return (\n        <WrappedComponent\n          {...(this.props as P)}\n          projects={this.state.projects}\n          loadingProjects={this.state.loading}\n        />\n      );\n    }\n  }\n\n  return WithProjects;\n}\n\nexport default withProjects;\n"],"sourceRoot":""}