name: Python wheels
on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
    tags:        
      - '*'
  pull_request:
    branches:
      - main

jobs:

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    # Only build wheels when tagging (typically a release)
    if: startsWith(github.event.ref, 'refs/tags')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install MSVC x86
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements-tests.txt

      - name: Build wheels (Windows x86)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: 'cp37-win32 cp38-win32 cp39-win32'
          CIBW_BEFORE_BUILD: python -m pip install -r requirements.txt
          CIBW_BEFORE_TEST: python -m pip install -r requirements-tests.txt
          CIBW_TEST_COMMAND: python -m pytest {project}/tests
          CIBW_BUILD_VERBOSITY: 1

      - name: Install MSVC amd64
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Build wheels (Windows / amd64)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: 'cp37-win_amd64 cp38-win_amd64 cp39-win_amd64'
          CIBW_BEFORE_BUILD: python -m pip install -r requirements.txt
          CIBW_BEFORE_TEST: python -m pip install -r requirements-tests.txt
          CIBW_TEST_COMMAND: python -m pytest {project}/tests
          CIBW_BUILD_VERBOSITY: 1

      - name: Build wheels (Linux / macOS)
        if: runner.os != 'Windows'
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: 'cp37-* cp38-* cp39-*'
          CIBW_SKIP: '*-manylinux*_i686'
          CIBW_BEFORE_BUILD: python -m pip install -r requirements.txt
          CIBW_BEFORE_TEST: python -m pip install -r requirements-tests.txt
          CIBW_TEST_COMMAND: python -m pytest {project}/tests
          CIBW_BUILD_VERBOSITY: 1

      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl


  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-python@v2
        name: Setup Python ${{ matrix.python-version }}
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements-tests.txt

      - name: Build sdist
        run: |
          python setup.py sdist

      - name: Upload sdist package
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

      - name: Build building extension from sdist package
        run: |
          cd ./dist
          tar -xzf blosc2-*.tar.gz
          cd ./blosc2-*/
          python setup.py build_ext --inplace

      - name: Test sdist package with pytest
        run: |
          cd ./dist/blosc2-*/
          python -m pytest


  upload_pypi:
    needs: [ build_wheels, build_sdist ]  # last but not least
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.blosc_pypi_secret }}
